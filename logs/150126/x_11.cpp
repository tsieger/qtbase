//Auto-generated by C:\src\qtbase-master141107\qtbase\kdebindings-build\generator\bin\smokegen.exe. DO NOT EDIT.
#include <qt_includes.h>
#include <typeinfo>

#include <smoke.h>
#include <qt_smoke.h>

class __internal_SmokeClass {};

namespace __smokeqt {

class x_QOpenGLTimeMonitor : public QOpenGLTimeMonitor, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QOpenGLTimeMonitor*>(this))) {
            const QMetaObject* xret = ((const x_QOpenGLTimeMonitor*)this)->QOpenGLTimeMonitor::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QOpenGLTimeMonitor*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QOpenGLTimeMonitor*>(this))) {
            void* xret = this->QOpenGLTimeMonitor::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QOpenGLTimeMonitor::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QOpenGLTimeMonitor::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_5(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QOpenGLTimeMonitor*>(this))) {
            int xret = this->QOpenGLTimeMonitor::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_6(Smoke::Stack x) {
        // QOpenGLTimeMonitor* QOpenGLTimeMonitor(QObject*)
        x_QOpenGLTimeMonitor* xret = new x_QOpenGLTimeMonitor((QObject*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QOpenGLTimeMonitor(QObject* x1) : QOpenGLTimeMonitor(x1) {}
    void x_7(Smoke::Stack x) {
        // void setSampleCount(int)
        this->QOpenGLTimeMonitor::setSampleCount((int)x[1].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_8(Smoke::Stack x) {
        // int sampleCount() const
        int xret = ((const x_QOpenGLTimeMonitor*)this)->QOpenGLTimeMonitor::sampleCount();
        x[0].s_int = xret;
    }
    void x_9(Smoke::Stack x) {
        // bool create()
        bool xret = this->QOpenGLTimeMonitor::create();
        x[0].s_bool = xret;
    }
    void x_10(Smoke::Stack x) {
        // void destroy()
        this->QOpenGLTimeMonitor::destroy();
        (void)x; // noop (for compiler warning)
    }
    void x_11(Smoke::Stack x) {
        // bool isCreated() const
        bool xret = ((const x_QOpenGLTimeMonitor*)this)->QOpenGLTimeMonitor::isCreated();
        x[0].s_bool = xret;
    }
    void x_12(Smoke::Stack x) {
        // QVector<GLuint> objectIds() const
        QVector<GLuint> xret = ((const x_QOpenGLTimeMonitor*)this)->QOpenGLTimeMonitor::objectIds();
        x[0].s_class = (void*)new QVector<GLuint>(xret);
    }
    void x_13(Smoke::Stack x) {
        // int recordSample()
        int xret = this->QOpenGLTimeMonitor::recordSample();
        x[0].s_int = xret;
    }
    void x_14(Smoke::Stack x) {
        // bool isResultAvailable() const
        bool xret = ((const x_QOpenGLTimeMonitor*)this)->QOpenGLTimeMonitor::isResultAvailable();
        x[0].s_bool = xret;
    }
    void x_15(Smoke::Stack x) {
        // QVector<uint64_t> waitForSamples() const
        QVector<uint64_t> xret = ((const x_QOpenGLTimeMonitor*)this)->QOpenGLTimeMonitor::waitForSamples();
        x[0].s_class = (void*)new QVector<uint64_t>(xret);
    }
    void x_16(Smoke::Stack x) {
        // QVector<uint64_t> waitForIntervals() const
        QVector<uint64_t> xret = ((const x_QOpenGLTimeMonitor*)this)->QOpenGLTimeMonitor::waitForIntervals();
        x[0].s_class = (void*)new QVector<uint64_t>(xret);
    }
    void x_17(Smoke::Stack x) {
        // void reset()
        this->QOpenGLTimeMonitor::reset();
        (void)x; // noop (for compiler warning)
    }
    static void x_18(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QOpenGLTimeMonitor::tr((const char*)x[1].s_class,(const char*)0,(int)-1);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_19(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QOpenGLTimeMonitor::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)-1);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_20(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QOpenGLTimeMonitor::trUtf8((const char*)x[1].s_class,(const char*)0,(int)-1);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_21(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QOpenGLTimeMonitor::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)-1);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_22(Smoke::Stack x) {
        // QOpenGLTimeMonitor* QOpenGLTimeMonitor()
        x_QOpenGLTimeMonitor* xret = new x_QOpenGLTimeMonitor((QObject*)0);
        x[0].s_class = (void*)xret;
    }
    static void x_23(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QOpenGLTimeMonitor::staticMetaObject;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(12395, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QOpenGLTimeMonitor::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(12396, (void*)this, x)) return (void*)x[0].s_class;
        return this->QOpenGLTimeMonitor::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(12399, (void*)this, x)) return (int)x[0].s_int;
        return this->QOpenGLTimeMonitor::qt_metacall(x1, x2, x3);
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(11926, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(11927, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(11966, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(11967, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(11968, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const QMetaMethod& x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)&x1;
        if (this->_binding->callMethod(11969, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const QMetaMethod& x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)&x1;
        if (this->_binding->callMethod(11970, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    ~x_QOpenGLTimeMonitor() { this->_binding->deleted(283, (void*)this); }
};
void xcall_QOpenGLTimeMonitor(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QOpenGLTimeMonitor *xself = (x_QOpenGLTimeMonitor*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QOpenGLTimeMonitor::x_3(args);	break;
        case 4: x_QOpenGLTimeMonitor::x_4(args);	break;
        case 5: xself->x_5(args);	break;
        case 6: x_QOpenGLTimeMonitor::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: xself->x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: x_QOpenGLTimeMonitor::x_18(args);	break;
        case 19: x_QOpenGLTimeMonitor::x_19(args);	break;
        case 20: x_QOpenGLTimeMonitor::x_20(args);	break;
        case 21: x_QOpenGLTimeMonitor::x_21(args);	break;
        case 22: x_QOpenGLTimeMonitor::x_22(args);	break;
        case 23: x_QOpenGLTimeMonitor::x_23(args);	break;
        case 24: delete (QOpenGLTimeMonitor*)xself;	break;
    }
}
class x_QOpenGLTimerQuery : public QOpenGLTimerQuery, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QOpenGLTimerQuery*>(this))) {
            const QMetaObject* xret = ((const x_QOpenGLTimerQuery*)this)->QOpenGLTimerQuery::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QOpenGLTimerQuery*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QOpenGLTimerQuery*>(this))) {
            void* xret = this->QOpenGLTimerQuery::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QOpenGLTimerQuery::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QOpenGLTimerQuery::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_5(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QOpenGLTimerQuery*>(this))) {
            int xret = this->QOpenGLTimerQuery::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_6(Smoke::Stack x) {
        // QOpenGLTimerQuery* QOpenGLTimerQuery(QObject*)
        x_QOpenGLTimerQuery* xret = new x_QOpenGLTimerQuery((QObject*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QOpenGLTimerQuery(QObject* x1) : QOpenGLTimerQuery(x1) {}
    void x_7(Smoke::Stack x) {
        // bool create()
        bool xret = this->QOpenGLTimerQuery::create();
        x[0].s_bool = xret;
    }
    void x_8(Smoke::Stack x) {
        // void destroy()
        this->QOpenGLTimerQuery::destroy();
        (void)x; // noop (for compiler warning)
    }
    void x_9(Smoke::Stack x) {
        // bool isCreated() const
        bool xret = ((const x_QOpenGLTimerQuery*)this)->QOpenGLTimerQuery::isCreated();
        x[0].s_bool = xret;
    }
    void x_10(Smoke::Stack x) {
        // GLuint objectId() const
        GLuint xret = ((const x_QOpenGLTimerQuery*)this)->QOpenGLTimerQuery::objectId();
        x[0].s_class = (void*)new GLuint(xret);
    }
    void x_11(Smoke::Stack x) {
        // void begin()
        this->QOpenGLTimerQuery::begin();
        (void)x; // noop (for compiler warning)
    }
    void x_12(Smoke::Stack x) {
        // void end()
        this->QOpenGLTimerQuery::end();
        (void)x; // noop (for compiler warning)
    }
    void x_13(Smoke::Stack x) {
        // uint64_t waitForTimestamp() const
        uint64_t xret = ((const x_QOpenGLTimerQuery*)this)->QOpenGLTimerQuery::waitForTimestamp();
        x[0].s_class = (void*)new uint64_t(xret);
    }
    void x_14(Smoke::Stack x) {
        // void recordTimestamp()
        this->QOpenGLTimerQuery::recordTimestamp();
        (void)x; // noop (for compiler warning)
    }
    void x_15(Smoke::Stack x) {
        // bool isResultAvailable() const
        bool xret = ((const x_QOpenGLTimerQuery*)this)->QOpenGLTimerQuery::isResultAvailable();
        x[0].s_bool = xret;
    }
    void x_16(Smoke::Stack x) {
        // uint64_t waitForResult() const
        uint64_t xret = ((const x_QOpenGLTimerQuery*)this)->QOpenGLTimerQuery::waitForResult();
        x[0].s_class = (void*)new uint64_t(xret);
    }
    static void x_17(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QOpenGLTimerQuery::tr((const char*)x[1].s_class,(const char*)0,(int)-1);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_18(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QOpenGLTimerQuery::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)-1);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_19(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QOpenGLTimerQuery::trUtf8((const char*)x[1].s_class,(const char*)0,(int)-1);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_20(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QOpenGLTimerQuery::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)-1);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_21(Smoke::Stack x) {
        // QOpenGLTimerQuery* QOpenGLTimerQuery()
        x_QOpenGLTimerQuery* xret = new x_QOpenGLTimerQuery((QObject*)0);
        x[0].s_class = (void*)xret;
    }
    static void x_22(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QOpenGLTimerQuery::staticMetaObject;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(12419, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QOpenGLTimerQuery::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(12420, (void*)this, x)) return (void*)x[0].s_class;
        return this->QOpenGLTimerQuery::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(12423, (void*)this, x)) return (int)x[0].s_int;
        return this->QOpenGLTimerQuery::qt_metacall(x1, x2, x3);
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(11926, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(11927, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(11966, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(11967, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(11968, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const QMetaMethod& x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)&x1;
        if (this->_binding->callMethod(11969, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const QMetaMethod& x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)&x1;
        if (this->_binding->callMethod(11970, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    ~x_QOpenGLTimerQuery() { this->_binding->deleted(284, (void*)this); }
};
void xcall_QOpenGLTimerQuery(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QOpenGLTimerQuery *xself = (x_QOpenGLTimerQuery*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QOpenGLTimerQuery::x_3(args);	break;
        case 4: x_QOpenGLTimerQuery::x_4(args);	break;
        case 5: xself->x_5(args);	break;
        case 6: x_QOpenGLTimerQuery::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: xself->x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: x_QOpenGLTimerQuery::x_17(args);	break;
        case 18: x_QOpenGLTimerQuery::x_18(args);	break;
        case 19: x_QOpenGLTimerQuery::x_19(args);	break;
        case 20: x_QOpenGLTimerQuery::x_20(args);	break;
        case 21: x_QOpenGLTimerQuery::x_21(args);	break;
        case 22: x_QOpenGLTimerQuery::x_22(args);	break;
        case 23: delete (QOpenGLTimerQuery*)xself;	break;
    }
}
class x_QPagedPaintDevice : public QPagedPaintDevice, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    static void x_1(Smoke::Stack x) {
        // QPagedPaintDevice* QPagedPaintDevice()
        x_QPagedPaintDevice* xret = new x_QPagedPaintDevice();
        x[0].s_class = (void*)xret;
    }
    explicit x_QPagedPaintDevice() : QPagedPaintDevice() {}
    void x_2(Smoke::Stack x) {
        // virtual bool newPage() = 0
        bool xret = this->newPage();
        x[0].s_bool = xret;
    }
    void x_3(Smoke::Stack x) {
        // virtual void setPageSize(QPagedPaintDevice::PageSize)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPagedPaintDevice*>(this))) {
            this->QPagedPaintDevice::setPageSize((QPagedPaintDevice::PageSize)x[1].s_enum);
            (void)x; // noop (for compiler warning)
        } else {
            this->setPageSize((QPagedPaintDevice::PageSize)x[1].s_enum);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_4(Smoke::Stack x) {
        // QPagedPaintDevice::PageSize pageSize() const
        QPagedPaintDevice::PageSize xret = ((const x_QPagedPaintDevice*)this)->QPagedPaintDevice::pageSize();
        x[0].s_enum = xret;
    }
    void x_5(Smoke::Stack x) {
        // virtual void setPageSizeMM(const QSizeF&)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPagedPaintDevice*>(this))) {
            this->QPagedPaintDevice::setPageSizeMM(*(const QSizeF*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->setPageSizeMM(*(const QSizeF*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_6(Smoke::Stack x) {
        // QSizeF pageSizeMM() const
        QSizeF xret = ((const x_QPagedPaintDevice*)this)->QPagedPaintDevice::pageSizeMM();
        x[0].s_class = (void*)new QSizeF(xret);
    }
    void x_7(Smoke::Stack x) {
        // virtual void setMargins(const QPagedPaintDevice::Margins&)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPagedPaintDevice*>(this))) {
            this->QPagedPaintDevice::setMargins(*(const QPagedPaintDevice::Margins*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->setMargins(*(const QPagedPaintDevice::Margins*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_8(Smoke::Stack x) {
        // QPagedPaintDevice::Margins margins() const
        QPagedPaintDevice::Margins xret = ((const x_QPagedPaintDevice*)this)->QPagedPaintDevice::margins();
        x[0].s_class = (void*)new QPagedPaintDevice::Margins(xret);
    }
    static void x_9(Smoke::Stack x) {
        x[0].s_enum = (long)QPagedPaintDevice::A4;
    }
    static void x_10(Smoke::Stack x) {
        x[0].s_enum = (long)QPagedPaintDevice::B5;
    }
    static void x_11(Smoke::Stack x) {
        x[0].s_enum = (long)QPagedPaintDevice::Letter;
    }
    static void x_12(Smoke::Stack x) {
        x[0].s_enum = (long)QPagedPaintDevice::Legal;
    }
    static void x_13(Smoke::Stack x) {
        x[0].s_enum = (long)QPagedPaintDevice::Executive;
    }
    static void x_14(Smoke::Stack x) {
        x[0].s_enum = (long)QPagedPaintDevice::A0;
    }
    static void x_15(Smoke::Stack x) {
        x[0].s_enum = (long)QPagedPaintDevice::A1;
    }
    static void x_16(Smoke::Stack x) {
        x[0].s_enum = (long)QPagedPaintDevice::A2;
    }
    static void x_17(Smoke::Stack x) {
        x[0].s_enum = (long)QPagedPaintDevice::A3;
    }
    static void x_18(Smoke::Stack x) {
        x[0].s_enum = (long)QPagedPaintDevice::A5;
    }
    static void x_19(Smoke::Stack x) {
        x[0].s_enum = (long)QPagedPaintDevice::A6;
    }
    static void x_20(Smoke::Stack x) {
        x[0].s_enum = (long)QPagedPaintDevice::A7;
    }
    static void x_21(Smoke::Stack x) {
        x[0].s_enum = (long)QPagedPaintDevice::A8;
    }
    static void x_22(Smoke::Stack x) {
        x[0].s_enum = (long)QPagedPaintDevice::A9;
    }
    static void x_23(Smoke::Stack x) {
        x[0].s_enum = (long)QPagedPaintDevice::B0;
    }
    static void x_24(Smoke::Stack x) {
        x[0].s_enum = (long)QPagedPaintDevice::B1;
    }
    static void x_25(Smoke::Stack x) {
        x[0].s_enum = (long)QPagedPaintDevice::B10;
    }
    static void x_26(Smoke::Stack x) {
        x[0].s_enum = (long)QPagedPaintDevice::B2;
    }
    static void x_27(Smoke::Stack x) {
        x[0].s_enum = (long)QPagedPaintDevice::B3;
    }
    static void x_28(Smoke::Stack x) {
        x[0].s_enum = (long)QPagedPaintDevice::B4;
    }
    static void x_29(Smoke::Stack x) {
        x[0].s_enum = (long)QPagedPaintDevice::B6;
    }
    static void x_30(Smoke::Stack x) {
        x[0].s_enum = (long)QPagedPaintDevice::B7;
    }
    static void x_31(Smoke::Stack x) {
        x[0].s_enum = (long)QPagedPaintDevice::B8;
    }
    static void x_32(Smoke::Stack x) {
        x[0].s_enum = (long)QPagedPaintDevice::B9;
    }
    static void x_33(Smoke::Stack x) {
        x[0].s_enum = (long)QPagedPaintDevice::C5E;
    }
    static void x_34(Smoke::Stack x) {
        x[0].s_enum = (long)QPagedPaintDevice::Comm10E;
    }
    static void x_35(Smoke::Stack x) {
        x[0].s_enum = (long)QPagedPaintDevice::DLE;
    }
    static void x_36(Smoke::Stack x) {
        x[0].s_enum = (long)QPagedPaintDevice::Folio;
    }
    static void x_37(Smoke::Stack x) {
        x[0].s_enum = (long)QPagedPaintDevice::Ledger;
    }
    static void x_38(Smoke::Stack x) {
        x[0].s_enum = (long)QPagedPaintDevice::Tabloid;
    }
    static void x_39(Smoke::Stack x) {
        x[0].s_enum = (long)QPagedPaintDevice::Custom;
    }
    static void x_40(Smoke::Stack x) {
        x[0].s_enum = (long)QPagedPaintDevice::NPageSize;
    }
    virtual bool newPage() {
        Smoke::StackItem x[1];
        this->_binding->callMethod(12443, (void*)this, x, true /*pure virtual*/);
        return (bool)x[0].s_bool;
    }
    virtual void setPageSize(QPagedPaintDevice::PageSize x1) {
        Smoke::StackItem x[2];
        x[1].s_enum = x1;
        if (this->_binding->callMethod(12444, (void*)this, x)) return;
        this->QPagedPaintDevice::setPageSize(x1);
    }
    virtual void setPageSizeMM(const QSizeF& x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)&x1;
        if (this->_binding->callMethod(12446, (void*)this, x)) return;
        this->QPagedPaintDevice::setPageSizeMM(x1);
    }
    virtual void setMargins(const QPagedPaintDevice::Margins& x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)&x1;
        if (this->_binding->callMethod(12448, (void*)this, x)) return;
        this->QPagedPaintDevice::setMargins(x1);
    }
    virtual int devType() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(12483, (void*)this, x)) return (int)x[0].s_int;
        return this->QPaintDevice::devType();
    }
    virtual QPaintEngine* paintEngine() const {
        Smoke::StackItem x[1];
        this->_binding->callMethod(12485, (void*)this, x, true /*pure virtual*/);
        return (QPaintEngine*)x[0].s_class;
    }
    virtual int metric(QPaintDevice::PaintDeviceMetric x1) const {
        Smoke::StackItem x[2];
        x[1].s_enum = x1;
        if (this->_binding->callMethod(12498, (void*)this, x)) return (int)x[0].s_int;
        return this->QPaintDevice::metric(x1);
    }
    virtual void initPainter(QPainter* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(12499, (void*)this, x)) return;
        this->QPaintDevice::initPainter(x1);
    }
    virtual QPaintDevice* redirected(QPoint* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(12500, (void*)this, x)) return (QPaintDevice*)x[0].s_class;
        return this->QPaintDevice::redirected(x1);
    }
    virtual QPainter* sharedPainter() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(12501, (void*)this, x)) return (QPainter*)x[0].s_class;
        return this->QPaintDevice::sharedPainter();
    }
    static void xenum_operation(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
        switch(xtype) {
        case 761: //QPagedPaintDevice::PageSize
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QPagedPaintDevice::PageSize;
                    break;
                case Smoke::EnumDelete:
                    delete (QPagedPaintDevice::PageSize*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QPagedPaintDevice::PageSize*)xdata = (QPagedPaintDevice::PageSize)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QPagedPaintDevice::PageSize*)xdata;
                    break;
            }
            break;
        }
    }
    ~x_QPagedPaintDevice() { this->_binding->deleted(287, (void*)this); }
};
void xenum_QPagedPaintDevice(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
    x_QPagedPaintDevice::xenum_operation(xop, xtype, xdata, xvalue);
}
void xcall_QPagedPaintDevice(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QPagedPaintDevice *xself = (x_QPagedPaintDevice*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: x_QPagedPaintDevice::x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: xself->x_3(args);	break;
        case 4: xself->x_4(args);	break;
        case 5: xself->x_5(args);	break;
        case 6: xself->x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: xself->x_8(args);	break;
        case 9: x_QPagedPaintDevice::x_9(args);	break;
        case 10: x_QPagedPaintDevice::x_10(args);	break;
        case 11: x_QPagedPaintDevice::x_11(args);	break;
        case 12: x_QPagedPaintDevice::x_12(args);	break;
        case 13: x_QPagedPaintDevice::x_13(args);	break;
        case 14: x_QPagedPaintDevice::x_14(args);	break;
        case 15: x_QPagedPaintDevice::x_15(args);	break;
        case 16: x_QPagedPaintDevice::x_16(args);	break;
        case 17: x_QPagedPaintDevice::x_17(args);	break;
        case 18: x_QPagedPaintDevice::x_18(args);	break;
        case 19: x_QPagedPaintDevice::x_19(args);	break;
        case 20: x_QPagedPaintDevice::x_20(args);	break;
        case 21: x_QPagedPaintDevice::x_21(args);	break;
        case 22: x_QPagedPaintDevice::x_22(args);	break;
        case 23: x_QPagedPaintDevice::x_23(args);	break;
        case 24: x_QPagedPaintDevice::x_24(args);	break;
        case 25: x_QPagedPaintDevice::x_25(args);	break;
        case 26: x_QPagedPaintDevice::x_26(args);	break;
        case 27: x_QPagedPaintDevice::x_27(args);	break;
        case 28: x_QPagedPaintDevice::x_28(args);	break;
        case 29: x_QPagedPaintDevice::x_29(args);	break;
        case 30: x_QPagedPaintDevice::x_30(args);	break;
        case 31: x_QPagedPaintDevice::x_31(args);	break;
        case 32: x_QPagedPaintDevice::x_32(args);	break;
        case 33: x_QPagedPaintDevice::x_33(args);	break;
        case 34: x_QPagedPaintDevice::x_34(args);	break;
        case 35: x_QPagedPaintDevice::x_35(args);	break;
        case 36: x_QPagedPaintDevice::x_36(args);	break;
        case 37: x_QPagedPaintDevice::x_37(args);	break;
        case 38: x_QPagedPaintDevice::x_38(args);	break;
        case 39: x_QPagedPaintDevice::x_39(args);	break;
        case 40: x_QPagedPaintDevice::x_40(args);	break;
        case 41: delete (QPagedPaintDevice*)xself;	break;
    }
}
class x_QPaintDevice : public QPaintDevice, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual int devType() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPaintDevice*>(this))) {
            int xret = ((const x_QPaintDevice*)this)->QPaintDevice::devType();
            x[0].s_int = xret;
        } else {
            int xret = ((const x_QPaintDevice*)this)->devType();
            x[0].s_int = xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // bool paintingActive() const
        bool xret = ((const x_QPaintDevice*)this)->QPaintDevice::paintingActive();
        x[0].s_bool = xret;
    }
    void x_3(Smoke::Stack x) {
        // virtual QPaintEngine* paintEngine() const = 0
        QPaintEngine* xret = ((const x_QPaintDevice*)this)->paintEngine();
        x[0].s_class = (void*)xret;
    }
    void x_4(Smoke::Stack x) {
        // int width() const
        int xret = ((const x_QPaintDevice*)this)->QPaintDevice::width();
        x[0].s_int = xret;
    }
    void x_5(Smoke::Stack x) {
        // int height() const
        int xret = ((const x_QPaintDevice*)this)->QPaintDevice::height();
        x[0].s_int = xret;
    }
    void x_6(Smoke::Stack x) {
        // int widthMM() const
        int xret = ((const x_QPaintDevice*)this)->QPaintDevice::widthMM();
        x[0].s_int = xret;
    }
    void x_7(Smoke::Stack x) {
        // int heightMM() const
        int xret = ((const x_QPaintDevice*)this)->QPaintDevice::heightMM();
        x[0].s_int = xret;
    }
    void x_8(Smoke::Stack x) {
        // int logicalDpiX() const
        int xret = ((const x_QPaintDevice*)this)->QPaintDevice::logicalDpiX();
        x[0].s_int = xret;
    }
    void x_9(Smoke::Stack x) {
        // int logicalDpiY() const
        int xret = ((const x_QPaintDevice*)this)->QPaintDevice::logicalDpiY();
        x[0].s_int = xret;
    }
    void x_10(Smoke::Stack x) {
        // int physicalDpiX() const
        int xret = ((const x_QPaintDevice*)this)->QPaintDevice::physicalDpiX();
        x[0].s_int = xret;
    }
    void x_11(Smoke::Stack x) {
        // int physicalDpiY() const
        int xret = ((const x_QPaintDevice*)this)->QPaintDevice::physicalDpiY();
        x[0].s_int = xret;
    }
    void x_12(Smoke::Stack x) {
        // int devicePixelRatio() const
        int xret = ((const x_QPaintDevice*)this)->QPaintDevice::devicePixelRatio();
        x[0].s_int = xret;
    }
    void x_13(Smoke::Stack x) {
        // int colorCount() const
        int xret = ((const x_QPaintDevice*)this)->QPaintDevice::colorCount();
        x[0].s_int = xret;
    }
    void x_14(Smoke::Stack x) {
        // int depth() const
        int xret = ((const x_QPaintDevice*)this)->QPaintDevice::depth();
        x[0].s_int = xret;
    }
    static void x_15(Smoke::Stack x) {
        // QPaintDevice* QPaintDevice()
        x_QPaintDevice* xret = new x_QPaintDevice();
        x[0].s_class = (void*)xret;
    }
    explicit x_QPaintDevice() : QPaintDevice() {}
    void x_16(Smoke::Stack x) {
        // virtual int metric(QPaintDevice::PaintDeviceMetric) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPaintDevice*>(this))) {
            int xret = ((const x_QPaintDevice*)this)->QPaintDevice::metric((QPaintDevice::PaintDeviceMetric)x[1].s_enum);
            x[0].s_int = xret;
        } else {
            int xret = ((const x_QPaintDevice*)this)->metric((QPaintDevice::PaintDeviceMetric)x[1].s_enum);
            x[0].s_int = xret;
        }
    }
    void x_17(Smoke::Stack x) {
        // virtual void initPainter(QPainter*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPaintDevice*>(this))) {
            ((const x_QPaintDevice*)this)->QPaintDevice::initPainter((QPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            ((const x_QPaintDevice*)this)->initPainter((QPainter*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_18(Smoke::Stack x) {
        // virtual QPaintDevice* redirected(QPoint*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPaintDevice*>(this))) {
            QPaintDevice* xret = ((const x_QPaintDevice*)this)->QPaintDevice::redirected((QPoint*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            QPaintDevice* xret = ((const x_QPaintDevice*)this)->redirected((QPoint*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    void x_19(Smoke::Stack x) {
        // virtual QPainter* sharedPainter() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPaintDevice*>(this))) {
            QPainter* xret = ((const x_QPaintDevice*)this)->QPaintDevice::sharedPainter();
            x[0].s_class = (void*)xret;
        } else {
            QPainter* xret = ((const x_QPaintDevice*)this)->sharedPainter();
            x[0].s_class = (void*)xret;
        }
    }
    void x_20(Smoke::Stack x) {
        // unsigned short painters
        x[0].s_ushort = this->QPaintDevice::painters;
    }
    void x_21(Smoke::Stack x) {
        // unsigned short painters=
        this->QPaintDevice::painters = (unsigned short)x[1].s_ushort;
    }
    static void x_22(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintDevice::PdmWidth;
    }
    static void x_23(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintDevice::PdmHeight;
    }
    static void x_24(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintDevice::PdmWidthMM;
    }
    static void x_25(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintDevice::PdmHeightMM;
    }
    static void x_26(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintDevice::PdmNumColors;
    }
    static void x_27(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintDevice::PdmDepth;
    }
    static void x_28(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintDevice::PdmDpiX;
    }
    static void x_29(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintDevice::PdmDpiY;
    }
    static void x_30(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintDevice::PdmPhysicalDpiX;
    }
    static void x_31(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintDevice::PdmPhysicalDpiY;
    }
    static void x_32(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintDevice::PdmDevicePixelRatio;
    }
    virtual int devType() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(12483, (void*)this, x)) return (int)x[0].s_int;
        return this->QPaintDevice::devType();
    }
    virtual QPaintEngine* paintEngine() const {
        Smoke::StackItem x[1];
        this->_binding->callMethod(12485, (void*)this, x, true /*pure virtual*/);
        return (QPaintEngine*)x[0].s_class;
    }
    virtual int metric(QPaintDevice::PaintDeviceMetric x1) const {
        Smoke::StackItem x[2];
        x[1].s_enum = x1;
        if (this->_binding->callMethod(12498, (void*)this, x)) return (int)x[0].s_int;
        return this->QPaintDevice::metric(x1);
    }
    virtual void initPainter(QPainter* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(12499, (void*)this, x)) return;
        this->QPaintDevice::initPainter(x1);
    }
    virtual QPaintDevice* redirected(QPoint* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(12500, (void*)this, x)) return (QPaintDevice*)x[0].s_class;
        return this->QPaintDevice::redirected(x1);
    }
    virtual QPainter* sharedPainter() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(12501, (void*)this, x)) return (QPainter*)x[0].s_class;
        return this->QPaintDevice::sharedPainter();
    }
    static void xenum_operation(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
        switch(xtype) {
        case 763: //QPaintDevice::PaintDeviceMetric
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QPaintDevice::PaintDeviceMetric;
                    break;
                case Smoke::EnumDelete:
                    delete (QPaintDevice::PaintDeviceMetric*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QPaintDevice::PaintDeviceMetric*)xdata = (QPaintDevice::PaintDeviceMetric)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QPaintDevice::PaintDeviceMetric*)xdata;
                    break;
            }
            break;
        }
    }
    ~x_QPaintDevice() { this->_binding->deleted(289, (void*)this); }
};
void xenum_QPaintDevice(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
    x_QPaintDevice::xenum_operation(xop, xtype, xdata, xvalue);
}
void xcall_QPaintDevice(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QPaintDevice *xself = (x_QPaintDevice*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: xself->x_3(args);	break;
        case 4: xself->x_4(args);	break;
        case 5: xself->x_5(args);	break;
        case 6: xself->x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: xself->x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: x_QPaintDevice::x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: x_QPaintDevice::x_22(args);	break;
        case 23: x_QPaintDevice::x_23(args);	break;
        case 24: x_QPaintDevice::x_24(args);	break;
        case 25: x_QPaintDevice::x_25(args);	break;
        case 26: x_QPaintDevice::x_26(args);	break;
        case 27: x_QPaintDevice::x_27(args);	break;
        case 28: x_QPaintDevice::x_28(args);	break;
        case 29: x_QPaintDevice::x_29(args);	break;
        case 30: x_QPaintDevice::x_30(args);	break;
        case 31: x_QPaintDevice::x_31(args);	break;
        case 32: x_QPaintDevice::x_32(args);	break;
        case 33: delete (QPaintDevice*)xself;	break;
    }
}
class x_QPaintEngine : public QPaintEngine, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    static void x_1(Smoke::Stack x) {
        // QPaintEngine* QPaintEngine(QFlags<QPaintEngine::PaintEngineFeature>)
        x_QPaintEngine* xret = new x_QPaintEngine((QFlags<QPaintEngine::PaintEngineFeature>)x[1].s_uint);
        x[0].s_class = (void*)xret;
    }
    explicit x_QPaintEngine(QFlags<QPaintEngine::PaintEngineFeature> x1) : QPaintEngine(x1) {}
    void x_2(Smoke::Stack x) {
        // bool isActive() const
        bool xret = ((const x_QPaintEngine*)this)->QPaintEngine::isActive();
        x[0].s_bool = xret;
    }
    void x_3(Smoke::Stack x) {
        // void setActive(bool)
        this->QPaintEngine::setActive((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_4(Smoke::Stack x) {
        // virtual bool begin(QPaintDevice*) = 0
        bool xret = this->begin((QPaintDevice*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_5(Smoke::Stack x) {
        // virtual bool end() = 0
        bool xret = this->end();
        x[0].s_bool = xret;
    }
    void x_6(Smoke::Stack x) {
        // virtual void updateState(const QPaintEngineState&) = 0
        this->updateState(*(const QPaintEngineState*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_7(Smoke::Stack x) {
        // virtual void drawRects(const QRect*, int)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPaintEngine*>(this))) {
            this->QPaintEngine::drawRects((const QRect*)x[1].s_class,(int)x[2].s_int);
            (void)x; // noop (for compiler warning)
        } else {
            this->drawRects((const QRect*)x[1].s_class,(int)x[2].s_int);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_8(Smoke::Stack x) {
        // virtual void drawRects(const QRectF*, int)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPaintEngine*>(this))) {
            this->QPaintEngine::drawRects((const QRectF*)x[1].s_class,(int)x[2].s_int);
            (void)x; // noop (for compiler warning)
        } else {
            this->drawRects((const QRectF*)x[1].s_class,(int)x[2].s_int);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_9(Smoke::Stack x) {
        // virtual void drawLines(const QLine*, int)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPaintEngine*>(this))) {
            this->QPaintEngine::drawLines((const QLine*)x[1].s_class,(int)x[2].s_int);
            (void)x; // noop (for compiler warning)
        } else {
            this->drawLines((const QLine*)x[1].s_class,(int)x[2].s_int);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_10(Smoke::Stack x) {
        // virtual void drawLines(const QLineF*, int)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPaintEngine*>(this))) {
            this->QPaintEngine::drawLines((const QLineF*)x[1].s_class,(int)x[2].s_int);
            (void)x; // noop (for compiler warning)
        } else {
            this->drawLines((const QLineF*)x[1].s_class,(int)x[2].s_int);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_11(Smoke::Stack x) {
        // virtual void drawEllipse(const QRectF&)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPaintEngine*>(this))) {
            this->QPaintEngine::drawEllipse(*(const QRectF*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->drawEllipse(*(const QRectF*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_12(Smoke::Stack x) {
        // virtual void drawEllipse(const QRect&)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPaintEngine*>(this))) {
            this->QPaintEngine::drawEllipse(*(const QRect*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->drawEllipse(*(const QRect*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_13(Smoke::Stack x) {
        // virtual void drawPath(const QPainterPath&)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPaintEngine*>(this))) {
            this->QPaintEngine::drawPath(*(const QPainterPath*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->drawPath(*(const QPainterPath*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_14(Smoke::Stack x) {
        // virtual void drawPoints(const QPointF*, int)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPaintEngine*>(this))) {
            this->QPaintEngine::drawPoints((const QPointF*)x[1].s_class,(int)x[2].s_int);
            (void)x; // noop (for compiler warning)
        } else {
            this->drawPoints((const QPointF*)x[1].s_class,(int)x[2].s_int);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_15(Smoke::Stack x) {
        // virtual void drawPoints(const QPoint*, int)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPaintEngine*>(this))) {
            this->QPaintEngine::drawPoints((const QPoint*)x[1].s_class,(int)x[2].s_int);
            (void)x; // noop (for compiler warning)
        } else {
            this->drawPoints((const QPoint*)x[1].s_class,(int)x[2].s_int);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_16(Smoke::Stack x) {
        // virtual void drawPolygon(const QPointF*, int, QPaintEngine::PolygonDrawMode)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPaintEngine*>(this))) {
            this->QPaintEngine::drawPolygon((const QPointF*)x[1].s_class,(int)x[2].s_int,(QPaintEngine::PolygonDrawMode)x[3].s_enum);
            (void)x; // noop (for compiler warning)
        } else {
            this->drawPolygon((const QPointF*)x[1].s_class,(int)x[2].s_int,(QPaintEngine::PolygonDrawMode)x[3].s_enum);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_17(Smoke::Stack x) {
        // virtual void drawPolygon(const QPoint*, int, QPaintEngine::PolygonDrawMode)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPaintEngine*>(this))) {
            this->QPaintEngine::drawPolygon((const QPoint*)x[1].s_class,(int)x[2].s_int,(QPaintEngine::PolygonDrawMode)x[3].s_enum);
            (void)x; // noop (for compiler warning)
        } else {
            this->drawPolygon((const QPoint*)x[1].s_class,(int)x[2].s_int,(QPaintEngine::PolygonDrawMode)x[3].s_enum);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_18(Smoke::Stack x) {
        // virtual void drawPixmap(const QRectF&, const QPixmap&, const QRectF&) = 0
        this->drawPixmap(*(const QRectF*)x[1].s_class,*(const QPixmap*)x[2].s_class,*(const QRectF*)x[3].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_19(Smoke::Stack x) {
        // virtual void drawTextItem(const QPointF&, const QTextItem&)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPaintEngine*>(this))) {
            this->QPaintEngine::drawTextItem(*(const QPointF*)x[1].s_class,*(const QTextItem*)x[2].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->drawTextItem(*(const QPointF*)x[1].s_class,*(const QTextItem*)x[2].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_20(Smoke::Stack x) {
        // virtual void drawTiledPixmap(const QRectF&, const QPixmap&, const QPointF&)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPaintEngine*>(this))) {
            this->QPaintEngine::drawTiledPixmap(*(const QRectF*)x[1].s_class,*(const QPixmap*)x[2].s_class,*(const QPointF*)x[3].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->drawTiledPixmap(*(const QRectF*)x[1].s_class,*(const QPixmap*)x[2].s_class,*(const QPointF*)x[3].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_21(Smoke::Stack x) {
        // virtual void drawImage(const QRectF&, const QImage&, const QRectF&, QFlags<Qt::ImageConversionFlag>)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPaintEngine*>(this))) {
            this->QPaintEngine::drawImage(*(const QRectF*)x[1].s_class,*(const QImage*)x[2].s_class,*(const QRectF*)x[3].s_class,(QFlags<Qt::ImageConversionFlag>)x[4].s_uint);
            (void)x; // noop (for compiler warning)
        } else {
            this->drawImage(*(const QRectF*)x[1].s_class,*(const QImage*)x[2].s_class,*(const QRectF*)x[3].s_class,(QFlags<Qt::ImageConversionFlag>)x[4].s_uint);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_22(Smoke::Stack x) {
        // void setPaintDevice(QPaintDevice*)
        this->QPaintEngine::setPaintDevice((QPaintDevice*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_23(Smoke::Stack x) {
        // QPaintDevice* paintDevice() const
        QPaintDevice* xret = ((const x_QPaintEngine*)this)->QPaintEngine::paintDevice();
        x[0].s_class = (void*)xret;
    }
    void x_24(Smoke::Stack x) {
        // void setSystemClip(const QRegion&)
        this->QPaintEngine::setSystemClip(*(const QRegion*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_25(Smoke::Stack x) {
        // QRegion systemClip() const
        QRegion xret = ((const x_QPaintEngine*)this)->QPaintEngine::systemClip();
        x[0].s_class = (void*)new QRegion(xret);
    }
    void x_26(Smoke::Stack x) {
        // void setSystemRect(const QRect&)
        this->QPaintEngine::setSystemRect(*(const QRect*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_27(Smoke::Stack x) {
        // QRect systemRect() const
        QRect xret = ((const x_QPaintEngine*)this)->QPaintEngine::systemRect();
        x[0].s_class = (void*)new QRect(xret);
    }
    void x_28(Smoke::Stack x) {
        // virtual QPoint coordinateOffset() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPaintEngine*>(this))) {
            QPoint xret = ((const x_QPaintEngine*)this)->QPaintEngine::coordinateOffset();
            x[0].s_class = (void*)new QPoint(xret);
        } else {
            QPoint xret = ((const x_QPaintEngine*)this)->coordinateOffset();
            x[0].s_class = (void*)new QPoint(xret);
        }
    }
    void x_29(Smoke::Stack x) {
        // virtual QPaintEngine::Type type() const = 0
        QPaintEngine::Type xret = ((const x_QPaintEngine*)this)->type();
        x[0].s_enum = xret;
    }
    void x_30(Smoke::Stack x) {
        // void fix_neg_rect(int*, int*, int*, int*)
        this->QPaintEngine::fix_neg_rect((int*)x[1].s_class,(int*)x[2].s_class,(int*)x[3].s_class,(int*)x[4].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_31(Smoke::Stack x) {
        // bool testDirty(QFlags<QPaintEngine::DirtyFlag>)
        bool xret = this->QPaintEngine::testDirty((QFlags<QPaintEngine::DirtyFlag>)x[1].s_uint);
        x[0].s_bool = xret;
    }
    void x_32(Smoke::Stack x) {
        // void setDirty(QFlags<QPaintEngine::DirtyFlag>)
        this->QPaintEngine::setDirty((QFlags<QPaintEngine::DirtyFlag>)x[1].s_uint);
        (void)x; // noop (for compiler warning)
    }
    void x_33(Smoke::Stack x) {
        // void clearDirty(QFlags<QPaintEngine::DirtyFlag>)
        this->QPaintEngine::clearDirty((QFlags<QPaintEngine::DirtyFlag>)x[1].s_uint);
        (void)x; // noop (for compiler warning)
    }
    void x_34(Smoke::Stack x) {
        // bool hasFeature(QFlags<QPaintEngine::PaintEngineFeature>) const
        bool xret = ((const x_QPaintEngine*)this)->QPaintEngine::hasFeature((QFlags<QPaintEngine::PaintEngineFeature>)x[1].s_uint);
        x[0].s_bool = xret;
    }
    void x_35(Smoke::Stack x) {
        // QPainter* painter() const
        QPainter* xret = ((const x_QPaintEngine*)this)->QPaintEngine::painter();
        x[0].s_class = (void*)xret;
    }
    void x_36(Smoke::Stack x) {
        // void syncState()
        this->QPaintEngine::syncState();
        (void)x; // noop (for compiler warning)
    }
    void x_37(Smoke::Stack x) {
        // bool isExtended() const
        bool xret = ((const x_QPaintEngine*)this)->QPaintEngine::isExtended();
        x[0].s_bool = xret;
    }
    static void x_38(Smoke::Stack x) {
        // QPaintEngine* QPaintEngine()
        x_QPaintEngine* xret = new x_QPaintEngine((QFlags<QPaintEngine::PaintEngineFeature>)0);
        x[0].s_class = (void*)xret;
    }
    void x_39(Smoke::Stack x) {
        // void drawImage(const QRectF&, const QImage&, const QRectF&)
        this->QPaintEngine::drawImage(*(const QRectF*)x[1].s_class,*(const QImage*)x[2].s_class,*(const QRectF*)x[3].s_class,(QFlags<Qt::ImageConversionFlag>)Qt::AutoColor);
        (void)x; // noop (for compiler warning)
    }
    void x_40(Smoke::Stack x) {
        // QPaintEngineState* state
        x[0].s_class = (void*)this->QPaintEngine::state;
    }
    void x_41(Smoke::Stack x) {
        // QPaintEngineState* state=
        this->QPaintEngine::state = (QPaintEngineState*)x[1].s_class;
    }
    void x_42(Smoke::Stack x) {
        // QFlags<QPaintEngine::PaintEngineFeature> gccaps
        x[0].s_uint = (uint)this->QPaintEngine::gccaps;
    }
    void x_43(Smoke::Stack x) {
        // QFlags<QPaintEngine::PaintEngineFeature> gccaps=
        this->QPaintEngine::gccaps = (QFlags<QPaintEngine::PaintEngineFeature>)x[1].s_uint;
    }
    void x_44(Smoke::Stack x) {
        // unsigned int active
        x[0].s_uint = this->QPaintEngine::active;
    }
    void x_45(Smoke::Stack x) {
        // unsigned int active=
        this->QPaintEngine::active = (unsigned int)x[1].s_uint;
    }
    void x_46(Smoke::Stack x) {
        // unsigned int selfDestruct
        x[0].s_uint = this->QPaintEngine::selfDestruct;
    }
    void x_47(Smoke::Stack x) {
        // unsigned int selfDestruct=
        this->QPaintEngine::selfDestruct = (unsigned int)x[1].s_uint;
    }
    void x_48(Smoke::Stack x) {
        // unsigned int extended
        x[0].s_uint = this->QPaintEngine::extended;
    }
    void x_49(Smoke::Stack x) {
        // unsigned int extended=
        this->QPaintEngine::extended = (unsigned int)x[1].s_uint;
    }
    static void x_50(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::PrimitiveTransform;
    }
    static void x_51(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::PatternTransform;
    }
    static void x_52(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::PixmapTransform;
    }
    static void x_53(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::PatternBrush;
    }
    static void x_54(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::LinearGradientFill;
    }
    static void x_55(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::RadialGradientFill;
    }
    static void x_56(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::ConicalGradientFill;
    }
    static void x_57(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::AlphaBlend;
    }
    static void x_58(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::PorterDuff;
    }
    static void x_59(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::PainterPaths;
    }
    static void x_60(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::Antialiasing;
    }
    static void x_61(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::BrushStroke;
    }
    static void x_62(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::ConstantOpacity;
    }
    static void x_63(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::MaskedBrush;
    }
    static void x_64(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::PerspectiveTransform;
    }
    static void x_65(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::BlendModes;
    }
    static void x_66(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::ObjectBoundingModeGradients;
    }
    static void x_67(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::RasterOpModes;
    }
    static void x_68(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::PaintOutsidePaintEvent;
    }
    static void x_69(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::AllFeatures;
    }
    static void x_70(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::DirtyPen;
    }
    static void x_71(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::DirtyBrush;
    }
    static void x_72(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::DirtyBrushOrigin;
    }
    static void x_73(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::DirtyFont;
    }
    static void x_74(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::DirtyBackground;
    }
    static void x_75(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::DirtyBackgroundMode;
    }
    static void x_76(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::DirtyTransform;
    }
    static void x_77(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::DirtyClipRegion;
    }
    static void x_78(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::DirtyClipPath;
    }
    static void x_79(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::DirtyHints;
    }
    static void x_80(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::DirtyCompositionMode;
    }
    static void x_81(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::DirtyClipEnabled;
    }
    static void x_82(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::DirtyOpacity;
    }
    static void x_83(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::AllDirty;
    }
    static void x_84(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::OddEvenMode;
    }
    static void x_85(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::WindingMode;
    }
    static void x_86(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::ConvexMode;
    }
    static void x_87(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::PolylineMode;
    }
    static void x_88(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::X11;
    }
    static void x_89(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::Windows;
    }
    static void x_90(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::QuickDraw;
    }
    static void x_91(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::CoreGraphics;
    }
    static void x_92(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::MacPrinter;
    }
    static void x_93(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::QWindowSystem;
    }
    static void x_94(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::PostScript;
    }
    static void x_95(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::OpenGL;
    }
    static void x_96(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::Picture;
    }
    static void x_97(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::SVG;
    }
    static void x_98(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::Raster;
    }
    static void x_99(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::Direct3D;
    }
    static void x_100(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::Pdf;
    }
    static void x_101(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::OpenVG;
    }
    static void x_102(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::OpenGL2;
    }
    static void x_103(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::PaintBuffer;
    }
    static void x_104(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::Blitter;
    }
    static void x_105(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::User;
    }
    static void x_106(Smoke::Stack x) {
        x[0].s_enum = (long)QPaintEngine::MaxUser;
    }
    virtual bool begin(QPaintDevice* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        this->_binding->callMethod(12519, (void*)this, x, true /*pure virtual*/);
        return (bool)x[0].s_bool;
    }
    virtual bool end() {
        Smoke::StackItem x[1];
        this->_binding->callMethod(12520, (void*)this, x, true /*pure virtual*/);
        return (bool)x[0].s_bool;
    }
    virtual void updateState(const QPaintEngineState& x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)&x1;
        this->_binding->callMethod(12521, (void*)this, x, true /*pure virtual*/);
    }
    virtual void drawRects(const QRect* x1, int x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_int = x2;
        if (this->_binding->callMethod(12522, (void*)this, x)) return;
        this->QPaintEngine::drawRects(x1, x2);
    }
    virtual void drawRects(const QRectF* x1, int x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_int = x2;
        if (this->_binding->callMethod(12523, (void*)this, x)) return;
        this->QPaintEngine::drawRects(x1, x2);
    }
    virtual void drawLines(const QLine* x1, int x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_int = x2;
        if (this->_binding->callMethod(12524, (void*)this, x)) return;
        this->QPaintEngine::drawLines(x1, x2);
    }
    virtual void drawLines(const QLineF* x1, int x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_int = x2;
        if (this->_binding->callMethod(12525, (void*)this, x)) return;
        this->QPaintEngine::drawLines(x1, x2);
    }
    virtual void drawEllipse(const QRectF& x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)&x1;
        if (this->_binding->callMethod(12526, (void*)this, x)) return;
        this->QPaintEngine::drawEllipse(x1);
    }
    virtual void drawEllipse(const QRect& x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)&x1;
        if (this->_binding->callMethod(12527, (void*)this, x)) return;
        this->QPaintEngine::drawEllipse(x1);
    }
    virtual void drawPath(const QPainterPath& x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)&x1;
        if (this->_binding->callMethod(12528, (void*)this, x)) return;
        this->QPaintEngine::drawPath(x1);
    }
    virtual void drawPoints(const QPointF* x1, int x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_int = x2;
        if (this->_binding->callMethod(12529, (void*)this, x)) return;
        this->QPaintEngine::drawPoints(x1, x2);
    }
    virtual void drawPoints(const QPoint* x1, int x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_int = x2;
        if (this->_binding->callMethod(12530, (void*)this, x)) return;
        this->QPaintEngine::drawPoints(x1, x2);
    }
    virtual void drawPolygon(const QPointF* x1, int x2, QPaintEngine::PolygonDrawMode x3) {
        Smoke::StackItem x[4];
        x[1].s_class = (void*)x1;
        x[2].s_int = x2;
        x[3].s_enum = x3;
        if (this->_binding->callMethod(12531, (void*)this, x)) return;
        this->QPaintEngine::drawPolygon(x1, x2, x3);
    }
    virtual void drawPolygon(const QPoint* x1, int x2, QPaintEngine::PolygonDrawMode x3) {
        Smoke::StackItem x[4];
        x[1].s_class = (void*)x1;
        x[2].s_int = x2;
        x[3].s_enum = x3;
        if (this->_binding->callMethod(12532, (void*)this, x)) return;
        this->QPaintEngine::drawPolygon(x1, x2, x3);
    }
    virtual void drawPixmap(const QRectF& x1, const QPixmap& x2, const QRectF& x3) {
        Smoke::StackItem x[4];
        x[1].s_class = (void*)&x1;
        x[2].s_class = (void*)&x2;
        x[3].s_class = (void*)&x3;
        this->_binding->callMethod(12533, (void*)this, x, true /*pure virtual*/);
    }
    virtual void drawTextItem(const QPointF& x1, const QTextItem& x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)&x1;
        x[2].s_class = (void*)&x2;
        if (this->_binding->callMethod(12534, (void*)this, x)) return;
        this->QPaintEngine::drawTextItem(x1, x2);
    }
    virtual void drawTiledPixmap(const QRectF& x1, const QPixmap& x2, const QPointF& x3) {
        Smoke::StackItem x[4];
        x[1].s_class = (void*)&x1;
        x[2].s_class = (void*)&x2;
        x[3].s_class = (void*)&x3;
        if (this->_binding->callMethod(12535, (void*)this, x)) return;
        this->QPaintEngine::drawTiledPixmap(x1, x2, x3);
    }
    virtual void drawImage(const QRectF& x1, const QImage& x2, const QRectF& x3, QFlags<Qt::ImageConversionFlag> x4) {
        Smoke::StackItem x[5];
        x[1].s_class = (void*)&x1;
        x[2].s_class = (void*)&x2;
        x[3].s_class = (void*)&x3;
        x[4].s_uint = (uint)x4;
        if (this->_binding->callMethod(12536, (void*)this, x)) return;
        this->QPaintEngine::drawImage(x1, x2, x3, x4);
    }
    virtual QPoint coordinateOffset() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(12543, (void*)this, x)) {
            QPoint* xptr = (QPoint*)x[0].s_class;
            QPoint xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QPaintEngine::coordinateOffset();
    }
    virtual QPaintEngine::Type type() const {
        Smoke::StackItem x[1];
        this->_binding->callMethod(12544, (void*)this, x, true /*pure virtual*/);
        return (QPaintEngine::Type)x[0].s_enum;
    }
    static void xenum_operation(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
        switch(xtype) {
        case 766: //QPaintEngine::PaintEngineFeature
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QPaintEngine::PaintEngineFeature;
                    break;
                case Smoke::EnumDelete:
                    delete (QPaintEngine::PaintEngineFeature*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QPaintEngine::PaintEngineFeature*)xdata = (QPaintEngine::PaintEngineFeature)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QPaintEngine::PaintEngineFeature*)xdata;
                    break;
            }
            break;
        case 765: //QPaintEngine::DirtyFlag
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QPaintEngine::DirtyFlag;
                    break;
                case Smoke::EnumDelete:
                    delete (QPaintEngine::DirtyFlag*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QPaintEngine::DirtyFlag*)xdata = (QPaintEngine::DirtyFlag)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QPaintEngine::DirtyFlag*)xdata;
                    break;
            }
            break;
        case 767: //QPaintEngine::PolygonDrawMode
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QPaintEngine::PolygonDrawMode;
                    break;
                case Smoke::EnumDelete:
                    delete (QPaintEngine::PolygonDrawMode*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QPaintEngine::PolygonDrawMode*)xdata = (QPaintEngine::PolygonDrawMode)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QPaintEngine::PolygonDrawMode*)xdata;
                    break;
            }
            break;
        case 768: //QPaintEngine::Type
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QPaintEngine::Type;
                    break;
                case Smoke::EnumDelete:
                    delete (QPaintEngine::Type*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QPaintEngine::Type*)xdata = (QPaintEngine::Type)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QPaintEngine::Type*)xdata;
                    break;
            }
            break;
        }
    }
    ~x_QPaintEngine() { this->_binding->deleted(290, (void*)this); }
};
void xenum_QPaintEngine(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
    x_QPaintEngine::xenum_operation(xop, xtype, xdata, xvalue);
}
void xcall_QPaintEngine(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QPaintEngine *xself = (x_QPaintEngine*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: x_QPaintEngine::x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: xself->x_3(args);	break;
        case 4: xself->x_4(args);	break;
        case 5: xself->x_5(args);	break;
        case 6: xself->x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: xself->x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: xself->x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: xself->x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: xself->x_30(args);	break;
        case 31: xself->x_31(args);	break;
        case 32: xself->x_32(args);	break;
        case 33: xself->x_33(args);	break;
        case 34: xself->x_34(args);	break;
        case 35: xself->x_35(args);	break;
        case 36: xself->x_36(args);	break;
        case 37: xself->x_37(args);	break;
        case 38: x_QPaintEngine::x_38(args);	break;
        case 39: xself->x_39(args);	break;
        case 40: xself->x_40(args);	break;
        case 41: xself->x_41(args);	break;
        case 42: xself->x_42(args);	break;
        case 43: xself->x_43(args);	break;
        case 44: xself->x_44(args);	break;
        case 45: xself->x_45(args);	break;
        case 46: xself->x_46(args);	break;
        case 47: xself->x_47(args);	break;
        case 48: xself->x_48(args);	break;
        case 49: xself->x_49(args);	break;
        case 50: x_QPaintEngine::x_50(args);	break;
        case 51: x_QPaintEngine::x_51(args);	break;
        case 52: x_QPaintEngine::x_52(args);	break;
        case 53: x_QPaintEngine::x_53(args);	break;
        case 54: x_QPaintEngine::x_54(args);	break;
        case 55: x_QPaintEngine::x_55(args);	break;
        case 56: x_QPaintEngine::x_56(args);	break;
        case 57: x_QPaintEngine::x_57(args);	break;
        case 58: x_QPaintEngine::x_58(args);	break;
        case 59: x_QPaintEngine::x_59(args);	break;
        case 60: x_QPaintEngine::x_60(args);	break;
        case 61: x_QPaintEngine::x_61(args);	break;
        case 62: x_QPaintEngine::x_62(args);	break;
        case 63: x_QPaintEngine::x_63(args);	break;
        case 64: x_QPaintEngine::x_64(args);	break;
        case 65: x_QPaintEngine::x_65(args);	break;
        case 66: x_QPaintEngine::x_66(args);	break;
        case 67: x_QPaintEngine::x_67(args);	break;
        case 68: x_QPaintEngine::x_68(args);	break;
        case 69: x_QPaintEngine::x_69(args);	break;
        case 70: x_QPaintEngine::x_70(args);	break;
        case 71: x_QPaintEngine::x_71(args);	break;
        case 72: x_QPaintEngine::x_72(args);	break;
        case 73: x_QPaintEngine::x_73(args);	break;
        case 74: x_QPaintEngine::x_74(args);	break;
        case 75: x_QPaintEngine::x_75(args);	break;
        case 76: x_QPaintEngine::x_76(args);	break;
        case 77: x_QPaintEngine::x_77(args);	break;
        case 78: x_QPaintEngine::x_78(args);	break;
        case 79: x_QPaintEngine::x_79(args);	break;
        case 80: x_QPaintEngine::x_80(args);	break;
        case 81: x_QPaintEngine::x_81(args);	break;
        case 82: x_QPaintEngine::x_82(args);	break;
        case 83: x_QPaintEngine::x_83(args);	break;
        case 84: x_QPaintEngine::x_84(args);	break;
        case 85: x_QPaintEngine::x_85(args);	break;
        case 86: x_QPaintEngine::x_86(args);	break;
        case 87: x_QPaintEngine::x_87(args);	break;
        case 88: x_QPaintEngine::x_88(args);	break;
        case 89: x_QPaintEngine::x_89(args);	break;
        case 90: x_QPaintEngine::x_90(args);	break;
        case 91: x_QPaintEngine::x_91(args);	break;
        case 92: x_QPaintEngine::x_92(args);	break;
        case 93: x_QPaintEngine::x_93(args);	break;
        case 94: x_QPaintEngine::x_94(args);	break;
        case 95: x_QPaintEngine::x_95(args);	break;
        case 96: x_QPaintEngine::x_96(args);	break;
        case 97: x_QPaintEngine::x_97(args);	break;
        case 98: x_QPaintEngine::x_98(args);	break;
        case 99: x_QPaintEngine::x_99(args);	break;
        case 100: x_QPaintEngine::x_100(args);	break;
        case 101: x_QPaintEngine::x_101(args);	break;
        case 102: x_QPaintEngine::x_102(args);	break;
        case 103: x_QPaintEngine::x_103(args);	break;
        case 104: x_QPaintEngine::x_104(args);	break;
        case 105: x_QPaintEngine::x_105(args);	break;
        case 106: x_QPaintEngine::x_106(args);	break;
        case 107: delete (QPaintEngine*)xself;	break;
    }
}
class x_QPaintEngineState : public QPaintEngineState {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // QFlags<QPaintEngine::DirtyFlag> state() const
        QFlags<QPaintEngine::DirtyFlag> xret = ((const x_QPaintEngineState*)this)->QPaintEngineState::state();
        x[0].s_uint = (uint)xret;
    }
    void x_2(Smoke::Stack x) {
        // QPen pen() const
        QPen xret = ((const x_QPaintEngineState*)this)->QPaintEngineState::pen();
        x[0].s_class = (void*)new QPen(xret);
    }
    void x_3(Smoke::Stack x) {
        // QBrush brush() const
        QBrush xret = ((const x_QPaintEngineState*)this)->QPaintEngineState::brush();
        x[0].s_class = (void*)new QBrush(xret);
    }
    void x_4(Smoke::Stack x) {
        // QPointF brushOrigin() const
        QPointF xret = ((const x_QPaintEngineState*)this)->QPaintEngineState::brushOrigin();
        x[0].s_class = (void*)new QPointF(xret);
    }
    void x_5(Smoke::Stack x) {
        // QBrush backgroundBrush() const
        QBrush xret = ((const x_QPaintEngineState*)this)->QPaintEngineState::backgroundBrush();
        x[0].s_class = (void*)new QBrush(xret);
    }
    void x_6(Smoke::Stack x) {
        // Qt::BGMode backgroundMode() const
        Qt::BGMode xret = ((const x_QPaintEngineState*)this)->QPaintEngineState::backgroundMode();
        x[0].s_enum = xret;
    }
    void x_7(Smoke::Stack x) {
        // QFont font() const
        QFont xret = ((const x_QPaintEngineState*)this)->QPaintEngineState::font();
        x[0].s_class = (void*)new QFont(xret);
    }
    void x_8(Smoke::Stack x) {
        // QMatrix matrix() const
        QMatrix xret = ((const x_QPaintEngineState*)this)->QPaintEngineState::matrix();
        x[0].s_class = (void*)new QMatrix(xret);
    }
    void x_9(Smoke::Stack x) {
        // QTransform transform() const
        QTransform xret = ((const x_QPaintEngineState*)this)->QPaintEngineState::transform();
        x[0].s_class = (void*)new QTransform(xret);
    }
    void x_10(Smoke::Stack x) {
        // Qt::ClipOperation clipOperation() const
        Qt::ClipOperation xret = ((const x_QPaintEngineState*)this)->QPaintEngineState::clipOperation();
        x[0].s_enum = xret;
    }
    void x_11(Smoke::Stack x) {
        // QRegion clipRegion() const
        QRegion xret = ((const x_QPaintEngineState*)this)->QPaintEngineState::clipRegion();
        x[0].s_class = (void*)new QRegion(xret);
    }
    void x_12(Smoke::Stack x) {
        // QPainterPath clipPath() const
        QPainterPath xret = ((const x_QPaintEngineState*)this)->QPaintEngineState::clipPath();
        x[0].s_class = (void*)new QPainterPath(xret);
    }
    void x_13(Smoke::Stack x) {
        // bool isClipEnabled() const
        bool xret = ((const x_QPaintEngineState*)this)->QPaintEngineState::isClipEnabled();
        x[0].s_bool = xret;
    }
    void x_14(Smoke::Stack x) {
        // QFlags<QPainter::RenderHint> renderHints() const
        QFlags<QPainter::RenderHint> xret = ((const x_QPaintEngineState*)this)->QPaintEngineState::renderHints();
        x[0].s_uint = (uint)xret;
    }
    void x_15(Smoke::Stack x) {
        // QPainter::CompositionMode compositionMode() const
        QPainter::CompositionMode xret = ((const x_QPaintEngineState*)this)->QPaintEngineState::compositionMode();
        x[0].s_enum = xret;
    }
    void x_16(Smoke::Stack x) {
        // double opacity() const
        double xret = ((const x_QPaintEngineState*)this)->QPaintEngineState::opacity();
        x[0].s_double = xret;
    }
    void x_17(Smoke::Stack x) {
        // QPainter* painter() const
        QPainter* xret = ((const x_QPaintEngineState*)this)->QPaintEngineState::painter();
        x[0].s_class = (void*)xret;
    }
    void x_18(Smoke::Stack x) {
        // bool brushNeedsResolving() const
        bool xret = ((const x_QPaintEngineState*)this)->QPaintEngineState::brushNeedsResolving();
        x[0].s_bool = xret;
    }
    void x_19(Smoke::Stack x) {
        // bool penNeedsResolving() const
        bool xret = ((const x_QPaintEngineState*)this)->QPaintEngineState::penNeedsResolving();
        x[0].s_bool = xret;
    }
    static void x_20(Smoke::Stack x) {
        // QPaintEngineState* QPaintEngineState()
        x_QPaintEngineState* xret = new x_QPaintEngineState();
        x[0].s_class = (void*)xret;
    }
    explicit x_QPaintEngineState() : QPaintEngineState() {}
    static void x_21(Smoke::Stack x) {
        // QPaintEngineState* QPaintEngineState(const QPaintEngineState&)
        x_QPaintEngineState* xret = new x_QPaintEngineState(*(const QPaintEngineState*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QPaintEngineState(const QPaintEngineState& x1) : QPaintEngineState(x1) {}
    void x_22(Smoke::Stack x) {
        // QFlags<QPaintEngine::DirtyFlag> dirtyFlags
        x[0].s_uint = (uint)this->QPaintEngineState::dirtyFlags;
    }
    void x_23(Smoke::Stack x) {
        // QFlags<QPaintEngine::DirtyFlag> dirtyFlags=
        this->QPaintEngineState::dirtyFlags = (QFlags<QPaintEngine::DirtyFlag>)x[1].s_uint;
    }
    ~x_QPaintEngineState() { this->_binding->deleted(291, (void*)this); }
};
void xcall_QPaintEngineState(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QPaintEngineState *xself = (x_QPaintEngineState*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: xself->x_3(args);	break;
        case 4: xself->x_4(args);	break;
        case 5: xself->x_5(args);	break;
        case 6: xself->x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: xself->x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: x_QPaintEngineState::x_20(args);	break;
        case 21: x_QPaintEngineState::x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: delete (QPaintEngineState*)xself;	break;
    }
}
class x_QPaintEvent : public QPaintEvent, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    static void x_1(Smoke::Stack x) {
        // QPaintEvent* QPaintEvent(const QRegion&)
        x_QPaintEvent* xret = new x_QPaintEvent(*(const QRegion*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QPaintEvent(const QRegion& x1) : QPaintEvent(x1) {}
    static void x_2(Smoke::Stack x) {
        // QPaintEvent* QPaintEvent(const QRect&)
        x_QPaintEvent* xret = new x_QPaintEvent(*(const QRect*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QPaintEvent(const QRect& x1) : QPaintEvent(x1) {}
    void x_3(Smoke::Stack x) {
        // const QRect& rect() const
        const QRect& xret = ((const x_QPaintEvent*)this)->QPaintEvent::rect();
        x[0].s_class = (void*)&xret;
    }
    void x_4(Smoke::Stack x) {
        // const QRegion& region() const
        const QRegion& xret = ((const x_QPaintEvent*)this)->QPaintEvent::region();
        x[0].s_class = (void*)&xret;
    }
    static void x_5(Smoke::Stack x) {
        // QPaintEvent* QPaintEvent(const QPaintEvent&)
        x_QPaintEvent* xret = new x_QPaintEvent(*(const QPaintEvent*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QPaintEvent(const QPaintEvent& x1) : QPaintEvent(x1) {}
    void x_6(Smoke::Stack x) {
        // QRect m_rect
        x[0].s_class = (void*)&this->QPaintEvent::m_rect;
    }
    void x_7(Smoke::Stack x) {
        // QRect m_rect=
        this->QPaintEvent::m_rect = *(const QRect*)x[1].s_class;
    }
    void x_8(Smoke::Stack x) {
        // QRegion m_region
        x[0].s_class = (void*)&this->QPaintEvent::m_region;
    }
    void x_9(Smoke::Stack x) {
        // QRegion m_region=
        this->QPaintEvent::m_region = *(const QRegion*)x[1].s_class;
    }
    void x_10(Smoke::Stack x) {
        // bool m_erased
        x[0].s_bool = this->QPaintEvent::m_erased;
    }
    void x_11(Smoke::Stack x) {
        // bool m_erased=
        this->QPaintEvent::m_erased = (bool)x[1].s_bool;
    }
    ~x_QPaintEvent() { this->_binding->deleted(292, (void*)this); }
};
void xcall_QPaintEvent(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QPaintEvent *xself = (x_QPaintEvent*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: x_QPaintEvent::x_1(args);	break;
        case 2: x_QPaintEvent::x_2(args);	break;
        case 3: xself->x_3(args);	break;
        case 4: xself->x_4(args);	break;
        case 5: x_QPaintEvent::x_5(args);	break;
        case 6: xself->x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: xself->x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: delete (QPaintEvent*)xself;	break;
    }
}
class x_QPainter : public QPainter {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    static void x_1(Smoke::Stack x) {
        // QPainter* QPainter()
        x_QPainter* xret = new x_QPainter();
        x[0].s_class = (void*)xret;
    }
    explicit x_QPainter() : QPainter() {}
    static void x_2(Smoke::Stack x) {
        // QPainter* QPainter(QPaintDevice*)
        x_QPainter* xret = new x_QPainter((QPaintDevice*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QPainter(QPaintDevice* x1) : QPainter(x1) {}
    void x_3(Smoke::Stack x) {
        // QPaintDevice* device() const
        QPaintDevice* xret = ((const x_QPainter*)this)->QPainter::device();
        x[0].s_class = (void*)xret;
    }
    void x_4(Smoke::Stack x) {
        // bool begin(QPaintDevice*)
        bool xret = this->QPainter::begin((QPaintDevice*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_5(Smoke::Stack x) {
        // bool end()
        bool xret = this->QPainter::end();
        x[0].s_bool = xret;
    }
    void x_6(Smoke::Stack x) {
        // bool isActive() const
        bool xret = ((const x_QPainter*)this)->QPainter::isActive();
        x[0].s_bool = xret;
    }
    void x_7(Smoke::Stack x) {
        // void initFrom(const QPaintDevice*)
        this->QPainter::initFrom((const QPaintDevice*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_8(Smoke::Stack x) {
        // void setCompositionMode(QPainter::CompositionMode)
        this->QPainter::setCompositionMode((QPainter::CompositionMode)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_9(Smoke::Stack x) {
        // QPainter::CompositionMode compositionMode() const
        QPainter::CompositionMode xret = ((const x_QPainter*)this)->QPainter::compositionMode();
        x[0].s_enum = xret;
    }
    void x_10(Smoke::Stack x) {
        // const QFont& font() const
        const QFont& xret = ((const x_QPainter*)this)->QPainter::font();
        x[0].s_class = (void*)&xret;
    }
    void x_11(Smoke::Stack x) {
        // void setFont(const QFont&)
        this->QPainter::setFont(*(const QFont*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_12(Smoke::Stack x) {
        // QFontMetrics fontMetrics() const
        QFontMetrics xret = ((const x_QPainter*)this)->QPainter::fontMetrics();
        x[0].s_class = (void*)new QFontMetrics(xret);
    }
    void x_13(Smoke::Stack x) {
        // QFontInfo fontInfo() const
        QFontInfo xret = ((const x_QPainter*)this)->QPainter::fontInfo();
        x[0].s_class = (void*)new QFontInfo(xret);
    }
    void x_14(Smoke::Stack x) {
        // void setPen(const QColor&)
        this->QPainter::setPen(*(const QColor*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_15(Smoke::Stack x) {
        // void setPen(const QPen&)
        this->QPainter::setPen(*(const QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_16(Smoke::Stack x) {
        // void setPen(Qt::PenStyle)
        this->QPainter::setPen((Qt::PenStyle)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_17(Smoke::Stack x) {
        // const QPen& pen() const
        const QPen& xret = ((const x_QPainter*)this)->QPainter::pen();
        x[0].s_class = (void*)&xret;
    }
    void x_18(Smoke::Stack x) {
        // void setBrush(const QBrush&)
        this->QPainter::setBrush(*(const QBrush*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_19(Smoke::Stack x) {
        // void setBrush(Qt::BrushStyle)
        this->QPainter::setBrush((Qt::BrushStyle)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_20(Smoke::Stack x) {
        // const QBrush& brush() const
        const QBrush& xret = ((const x_QPainter*)this)->QPainter::brush();
        x[0].s_class = (void*)&xret;
    }
    void x_21(Smoke::Stack x) {
        // void setBackgroundMode(Qt::BGMode)
        this->QPainter::setBackgroundMode((Qt::BGMode)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_22(Smoke::Stack x) {
        // Qt::BGMode backgroundMode() const
        Qt::BGMode xret = ((const x_QPainter*)this)->QPainter::backgroundMode();
        x[0].s_enum = xret;
    }
    void x_23(Smoke::Stack x) {
        // QPoint brushOrigin() const
        QPoint xret = ((const x_QPainter*)this)->QPainter::brushOrigin();
        x[0].s_class = (void*)new QPoint(xret);
    }
    void x_24(Smoke::Stack x) {
        // void setBrushOrigin(int, int)
        this->QPainter::setBrushOrigin((int)x[1].s_int,(int)x[2].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_25(Smoke::Stack x) {
        // void setBrushOrigin(const QPoint&)
        this->QPainter::setBrushOrigin(*(const QPoint*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_26(Smoke::Stack x) {
        // void setBrushOrigin(const QPointF&)
        this->QPainter::setBrushOrigin(*(const QPointF*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_27(Smoke::Stack x) {
        // void setBackground(const QBrush&)
        this->QPainter::setBackground(*(const QBrush*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_28(Smoke::Stack x) {
        // const QBrush& background() const
        const QBrush& xret = ((const x_QPainter*)this)->QPainter::background();
        x[0].s_class = (void*)&xret;
    }
    void x_29(Smoke::Stack x) {
        // double opacity() const
        double xret = ((const x_QPainter*)this)->QPainter::opacity();
        x[0].s_double = xret;
    }
    void x_30(Smoke::Stack x) {
        // void setOpacity(double)
        this->QPainter::setOpacity((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_31(Smoke::Stack x) {
        // QRegion clipRegion() const
        QRegion xret = ((const x_QPainter*)this)->QPainter::clipRegion();
        x[0].s_class = (void*)new QRegion(xret);
    }
    void x_32(Smoke::Stack x) {
        // QPainterPath clipPath() const
        QPainterPath xret = ((const x_QPainter*)this)->QPainter::clipPath();
        x[0].s_class = (void*)new QPainterPath(xret);
    }
    void x_33(Smoke::Stack x) {
        // void setClipRect(const QRectF&, Qt::ClipOperation)
        this->QPainter::setClipRect(*(const QRectF*)x[1].s_class,(Qt::ClipOperation)x[2].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_34(Smoke::Stack x) {
        // void setClipRect(const QRect&, Qt::ClipOperation)
        this->QPainter::setClipRect(*(const QRect*)x[1].s_class,(Qt::ClipOperation)x[2].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_35(Smoke::Stack x) {
        // void setClipRect(int, int, int, int, Qt::ClipOperation)
        this->QPainter::setClipRect((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int,(Qt::ClipOperation)x[5].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_36(Smoke::Stack x) {
        // void setClipRegion(const QRegion&, Qt::ClipOperation)
        this->QPainter::setClipRegion(*(const QRegion*)x[1].s_class,(Qt::ClipOperation)x[2].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_37(Smoke::Stack x) {
        // void setClipPath(const QPainterPath&, Qt::ClipOperation)
        this->QPainter::setClipPath(*(const QPainterPath*)x[1].s_class,(Qt::ClipOperation)x[2].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_38(Smoke::Stack x) {
        // void setClipping(bool)
        this->QPainter::setClipping((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_39(Smoke::Stack x) {
        // bool hasClipping() const
        bool xret = ((const x_QPainter*)this)->QPainter::hasClipping();
        x[0].s_bool = xret;
    }
    void x_40(Smoke::Stack x) {
        // QRectF clipBoundingRect() const
        QRectF xret = ((const x_QPainter*)this)->QPainter::clipBoundingRect();
        x[0].s_class = (void*)new QRectF(xret);
    }
    void x_41(Smoke::Stack x) {
        // void save()
        this->QPainter::save();
        (void)x; // noop (for compiler warning)
    }
    void x_42(Smoke::Stack x) {
        // void restore()
        this->QPainter::restore();
        (void)x; // noop (for compiler warning)
    }
    void x_43(Smoke::Stack x) {
        // void setMatrix(const QMatrix&, bool)
        this->QPainter::setMatrix(*(const QMatrix*)x[1].s_class,(bool)x[2].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_44(Smoke::Stack x) {
        // const QMatrix& matrix() const
        const QMatrix& xret = ((const x_QPainter*)this)->QPainter::matrix();
        x[0].s_class = (void*)&xret;
    }
    void x_45(Smoke::Stack x) {
        // const QMatrix& deviceMatrix() const
        const QMatrix& xret = ((const x_QPainter*)this)->QPainter::deviceMatrix();
        x[0].s_class = (void*)&xret;
    }
    void x_46(Smoke::Stack x) {
        // void resetMatrix()
        this->QPainter::resetMatrix();
        (void)x; // noop (for compiler warning)
    }
    void x_47(Smoke::Stack x) {
        // void setTransform(const QTransform&, bool)
        this->QPainter::setTransform(*(const QTransform*)x[1].s_class,(bool)x[2].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_48(Smoke::Stack x) {
        // const QTransform& transform() const
        const QTransform& xret = ((const x_QPainter*)this)->QPainter::transform();
        x[0].s_class = (void*)&xret;
    }
    void x_49(Smoke::Stack x) {
        // const QTransform& deviceTransform() const
        const QTransform& xret = ((const x_QPainter*)this)->QPainter::deviceTransform();
        x[0].s_class = (void*)&xret;
    }
    void x_50(Smoke::Stack x) {
        // void resetTransform()
        this->QPainter::resetTransform();
        (void)x; // noop (for compiler warning)
    }
    void x_51(Smoke::Stack x) {
        // void setWorldMatrix(const QMatrix&, bool)
        this->QPainter::setWorldMatrix(*(const QMatrix*)x[1].s_class,(bool)x[2].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_52(Smoke::Stack x) {
        // const QMatrix& worldMatrix() const
        const QMatrix& xret = ((const x_QPainter*)this)->QPainter::worldMatrix();
        x[0].s_class = (void*)&xret;
    }
    void x_53(Smoke::Stack x) {
        // void setWorldTransform(const QTransform&, bool)
        this->QPainter::setWorldTransform(*(const QTransform*)x[1].s_class,(bool)x[2].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_54(Smoke::Stack x) {
        // const QTransform& worldTransform() const
        const QTransform& xret = ((const x_QPainter*)this)->QPainter::worldTransform();
        x[0].s_class = (void*)&xret;
    }
    void x_55(Smoke::Stack x) {
        // QMatrix combinedMatrix() const
        QMatrix xret = ((const x_QPainter*)this)->QPainter::combinedMatrix();
        x[0].s_class = (void*)new QMatrix(xret);
    }
    void x_56(Smoke::Stack x) {
        // QTransform combinedTransform() const
        QTransform xret = ((const x_QPainter*)this)->QPainter::combinedTransform();
        x[0].s_class = (void*)new QTransform(xret);
    }
    void x_57(Smoke::Stack x) {
        // void setMatrixEnabled(bool)
        this->QPainter::setMatrixEnabled((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_58(Smoke::Stack x) {
        // bool matrixEnabled() const
        bool xret = ((const x_QPainter*)this)->QPainter::matrixEnabled();
        x[0].s_bool = xret;
    }
    void x_59(Smoke::Stack x) {
        // void setWorldMatrixEnabled(bool)
        this->QPainter::setWorldMatrixEnabled((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_60(Smoke::Stack x) {
        // bool worldMatrixEnabled() const
        bool xret = ((const x_QPainter*)this)->QPainter::worldMatrixEnabled();
        x[0].s_bool = xret;
    }
    void x_61(Smoke::Stack x) {
        // void scale(double, double)
        this->QPainter::scale((double)x[1].s_double,(double)x[2].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_62(Smoke::Stack x) {
        // void shear(double, double)
        this->QPainter::shear((double)x[1].s_double,(double)x[2].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_63(Smoke::Stack x) {
        // void rotate(double)
        this->QPainter::rotate((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_64(Smoke::Stack x) {
        // void translate(const QPointF&)
        this->QPainter::translate(*(const QPointF*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_65(Smoke::Stack x) {
        // void translate(const QPoint&)
        this->QPainter::translate(*(const QPoint*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_66(Smoke::Stack x) {
        // void translate(double, double)
        this->QPainter::translate((double)x[1].s_double,(double)x[2].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_67(Smoke::Stack x) {
        // QRect window() const
        QRect xret = ((const x_QPainter*)this)->QPainter::window();
        x[0].s_class = (void*)new QRect(xret);
    }
    void x_68(Smoke::Stack x) {
        // void setWindow(const QRect&)
        this->QPainter::setWindow(*(const QRect*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_69(Smoke::Stack x) {
        // void setWindow(int, int, int, int)
        this->QPainter::setWindow((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_70(Smoke::Stack x) {
        // QRect viewport() const
        QRect xret = ((const x_QPainter*)this)->QPainter::viewport();
        x[0].s_class = (void*)new QRect(xret);
    }
    void x_71(Smoke::Stack x) {
        // void setViewport(const QRect&)
        this->QPainter::setViewport(*(const QRect*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_72(Smoke::Stack x) {
        // void setViewport(int, int, int, int)
        this->QPainter::setViewport((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_73(Smoke::Stack x) {
        // void setViewTransformEnabled(bool)
        this->QPainter::setViewTransformEnabled((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_74(Smoke::Stack x) {
        // bool viewTransformEnabled() const
        bool xret = ((const x_QPainter*)this)->QPainter::viewTransformEnabled();
        x[0].s_bool = xret;
    }
    void x_75(Smoke::Stack x) {
        // void strokePath(const QPainterPath&, const QPen&)
        this->QPainter::strokePath(*(const QPainterPath*)x[1].s_class,*(const QPen*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_76(Smoke::Stack x) {
        // void fillPath(const QPainterPath&, const QBrush&)
        this->QPainter::fillPath(*(const QPainterPath*)x[1].s_class,*(const QBrush*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_77(Smoke::Stack x) {
        // void drawPath(const QPainterPath&)
        this->QPainter::drawPath(*(const QPainterPath*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_78(Smoke::Stack x) {
        // void drawPoint(const QPointF&)
        this->QPainter::drawPoint(*(const QPointF*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_79(Smoke::Stack x) {
        // void drawPoint(const QPoint&)
        this->QPainter::drawPoint(*(const QPoint*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_80(Smoke::Stack x) {
        // void drawPoint(int, int)
        this->QPainter::drawPoint((int)x[1].s_int,(int)x[2].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_81(Smoke::Stack x) {
        // void drawPoints(const QPointF*, int)
        this->QPainter::drawPoints((const QPointF*)x[1].s_class,(int)x[2].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_82(Smoke::Stack x) {
        // void drawPoints(const QPolygonF&)
        this->QPainter::drawPoints(*(const QPolygonF*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_83(Smoke::Stack x) {
        // void drawPoints(const QPoint*, int)
        this->QPainter::drawPoints((const QPoint*)x[1].s_class,(int)x[2].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_84(Smoke::Stack x) {
        // void drawPoints(const QPolygon&)
        this->QPainter::drawPoints(*(const QPolygon*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_85(Smoke::Stack x) {
        // void drawLine(const QLineF&)
        this->QPainter::drawLine(*(const QLineF*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_86(Smoke::Stack x) {
        // void drawLine(const QLine&)
        this->QPainter::drawLine(*(const QLine*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_87(Smoke::Stack x) {
        // void drawLine(int, int, int, int)
        this->QPainter::drawLine((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_88(Smoke::Stack x) {
        // void drawLine(const QPoint&, const QPoint&)
        this->QPainter::drawLine(*(const QPoint*)x[1].s_class,*(const QPoint*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_89(Smoke::Stack x) {
        // void drawLine(const QPointF&, const QPointF&)
        this->QPainter::drawLine(*(const QPointF*)x[1].s_class,*(const QPointF*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_90(Smoke::Stack x) {
        // void drawLines(const QLineF*, int)
        this->QPainter::drawLines((const QLineF*)x[1].s_class,(int)x[2].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_91(Smoke::Stack x) {
        // void drawLines(const QVector<QLineF>&)
        this->QPainter::drawLines(*(const QVector<QLineF>*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_92(Smoke::Stack x) {
        // void drawLines(const QPointF*, int)
        this->QPainter::drawLines((const QPointF*)x[1].s_class,(int)x[2].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_93(Smoke::Stack x) {
        // void drawLines(const QVector<QPointF>&)
        this->QPainter::drawLines(*(const QVector<QPointF>*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_94(Smoke::Stack x) {
        // void drawLines(const QLine*, int)
        this->QPainter::drawLines((const QLine*)x[1].s_class,(int)x[2].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_95(Smoke::Stack x) {
        // void drawLines(const QVector<QLine>&)
        this->QPainter::drawLines(*(const QVector<QLine>*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_96(Smoke::Stack x) {
        // void drawLines(const QPoint*, int)
        this->QPainter::drawLines((const QPoint*)x[1].s_class,(int)x[2].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_97(Smoke::Stack x) {
        // void drawLines(const QVector<QPoint>&)
        this->QPainter::drawLines(*(const QVector<QPoint>*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_98(Smoke::Stack x) {
        // void drawRect(const QRectF&)
        this->QPainter::drawRect(*(const QRectF*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_99(Smoke::Stack x) {
        // void drawRect(int, int, int, int)
        this->QPainter::drawRect((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_100(Smoke::Stack x) {
        // void drawRect(const QRect&)
        this->QPainter::drawRect(*(const QRect*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_101(Smoke::Stack x) {
        // void drawRects(const QRectF*, int)
        this->QPainter::drawRects((const QRectF*)x[1].s_class,(int)x[2].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_102(Smoke::Stack x) {
        // void drawRects(const QVector<QRectF>&)
        this->QPainter::drawRects(*(const QVector<QRectF>*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_103(Smoke::Stack x) {
        // void drawRects(const QRect*, int)
        this->QPainter::drawRects((const QRect*)x[1].s_class,(int)x[2].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_104(Smoke::Stack x) {
        // void drawRects(const QVector<QRect>&)
        this->QPainter::drawRects(*(const QVector<QRect>*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_105(Smoke::Stack x) {
        // void drawEllipse(const QRectF&)
        this->QPainter::drawEllipse(*(const QRectF*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_106(Smoke::Stack x) {
        // void drawEllipse(const QRect&)
        this->QPainter::drawEllipse(*(const QRect*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_107(Smoke::Stack x) {
        // void drawEllipse(int, int, int, int)
        this->QPainter::drawEllipse((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_108(Smoke::Stack x) {
        // void drawEllipse(const QPointF&, double, double)
        this->QPainter::drawEllipse(*(const QPointF*)x[1].s_class,(double)x[2].s_double,(double)x[3].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_109(Smoke::Stack x) {
        // void drawEllipse(const QPoint&, int, int)
        this->QPainter::drawEllipse(*(const QPoint*)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_110(Smoke::Stack x) {
        // void drawPolyline(const QPointF*, int)
        this->QPainter::drawPolyline((const QPointF*)x[1].s_class,(int)x[2].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_111(Smoke::Stack x) {
        // void drawPolyline(const QPolygonF&)
        this->QPainter::drawPolyline(*(const QPolygonF*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_112(Smoke::Stack x) {
        // void drawPolyline(const QPoint*, int)
        this->QPainter::drawPolyline((const QPoint*)x[1].s_class,(int)x[2].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_113(Smoke::Stack x) {
        // void drawPolyline(const QPolygon&)
        this->QPainter::drawPolyline(*(const QPolygon*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_114(Smoke::Stack x) {
        // void drawPolygon(const QPointF*, int, Qt::FillRule)
        this->QPainter::drawPolygon((const QPointF*)x[1].s_class,(int)x[2].s_int,(Qt::FillRule)x[3].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_115(Smoke::Stack x) {
        // void drawPolygon(const QPolygonF&, Qt::FillRule)
        this->QPainter::drawPolygon(*(const QPolygonF*)x[1].s_class,(Qt::FillRule)x[2].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_116(Smoke::Stack x) {
        // void drawPolygon(const QPoint*, int, Qt::FillRule)
        this->QPainter::drawPolygon((const QPoint*)x[1].s_class,(int)x[2].s_int,(Qt::FillRule)x[3].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_117(Smoke::Stack x) {
        // void drawPolygon(const QPolygon&, Qt::FillRule)
        this->QPainter::drawPolygon(*(const QPolygon*)x[1].s_class,(Qt::FillRule)x[2].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_118(Smoke::Stack x) {
        // void drawConvexPolygon(const QPointF*, int)
        this->QPainter::drawConvexPolygon((const QPointF*)x[1].s_class,(int)x[2].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_119(Smoke::Stack x) {
        // void drawConvexPolygon(const QPolygonF&)
        this->QPainter::drawConvexPolygon(*(const QPolygonF*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_120(Smoke::Stack x) {
        // void drawConvexPolygon(const QPoint*, int)
        this->QPainter::drawConvexPolygon((const QPoint*)x[1].s_class,(int)x[2].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_121(Smoke::Stack x) {
        // void drawConvexPolygon(const QPolygon&)
        this->QPainter::drawConvexPolygon(*(const QPolygon*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_122(Smoke::Stack x) {
        // void drawArc(const QRectF&, int, int)
        this->QPainter::drawArc(*(const QRectF*)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_123(Smoke::Stack x) {
        // void drawArc(const QRect&, int, int)
        this->QPainter::drawArc(*(const QRect*)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_124(Smoke::Stack x) {
        // void drawArc(int, int, int, int, int, int)
        this->QPainter::drawArc((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int,(int)x[5].s_int,(int)x[6].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_125(Smoke::Stack x) {
        // void drawPie(const QRectF&, int, int)
        this->QPainter::drawPie(*(const QRectF*)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_126(Smoke::Stack x) {
        // void drawPie(int, int, int, int, int, int)
        this->QPainter::drawPie((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int,(int)x[5].s_int,(int)x[6].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_127(Smoke::Stack x) {
        // void drawPie(const QRect&, int, int)
        this->QPainter::drawPie(*(const QRect*)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_128(Smoke::Stack x) {
        // void drawChord(const QRectF&, int, int)
        this->QPainter::drawChord(*(const QRectF*)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_129(Smoke::Stack x) {
        // void drawChord(int, int, int, int, int, int)
        this->QPainter::drawChord((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int,(int)x[5].s_int,(int)x[6].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_130(Smoke::Stack x) {
        // void drawChord(const QRect&, int, int)
        this->QPainter::drawChord(*(const QRect*)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_131(Smoke::Stack x) {
        // void drawRoundedRect(const QRectF&, double, double, Qt::SizeMode)
        this->QPainter::drawRoundedRect(*(const QRectF*)x[1].s_class,(double)x[2].s_double,(double)x[3].s_double,(Qt::SizeMode)x[4].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_132(Smoke::Stack x) {
        // void drawRoundedRect(int, int, int, int, double, double, Qt::SizeMode)
        this->QPainter::drawRoundedRect((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int,(double)x[5].s_double,(double)x[6].s_double,(Qt::SizeMode)x[7].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_133(Smoke::Stack x) {
        // void drawRoundedRect(const QRect&, double, double, Qt::SizeMode)
        this->QPainter::drawRoundedRect(*(const QRect*)x[1].s_class,(double)x[2].s_double,(double)x[3].s_double,(Qt::SizeMode)x[4].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_134(Smoke::Stack x) {
        // void drawRoundRect(const QRectF&, int, int)
        this->QPainter::drawRoundRect(*(const QRectF*)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_135(Smoke::Stack x) {
        // void drawRoundRect(int, int, int, int, int, int)
        this->QPainter::drawRoundRect((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int,(int)x[5].s_int,(int)x[6].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_136(Smoke::Stack x) {
        // void drawRoundRect(const QRect&, int, int)
        this->QPainter::drawRoundRect(*(const QRect*)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_137(Smoke::Stack x) {
        // void drawTiledPixmap(const QRectF&, const QPixmap&, const QPointF&)
        this->QPainter::drawTiledPixmap(*(const QRectF*)x[1].s_class,*(const QPixmap*)x[2].s_class,*(const QPointF*)x[3].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_138(Smoke::Stack x) {
        // void drawTiledPixmap(int, int, int, int, const QPixmap&, int, int)
        this->QPainter::drawTiledPixmap((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int,*(const QPixmap*)x[5].s_class,(int)x[6].s_int,(int)x[7].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_139(Smoke::Stack x) {
        // void drawTiledPixmap(const QRect&, const QPixmap&, const QPoint&)
        this->QPainter::drawTiledPixmap(*(const QRect*)x[1].s_class,*(const QPixmap*)x[2].s_class,*(const QPoint*)x[3].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_140(Smoke::Stack x) {
        // void drawPicture(const QPointF&, const QPicture&)
        this->QPainter::drawPicture(*(const QPointF*)x[1].s_class,*(const QPicture*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_141(Smoke::Stack x) {
        // void drawPicture(int, int, const QPicture&)
        this->QPainter::drawPicture((int)x[1].s_int,(int)x[2].s_int,*(const QPicture*)x[3].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_142(Smoke::Stack x) {
        // void drawPicture(const QPoint&, const QPicture&)
        this->QPainter::drawPicture(*(const QPoint*)x[1].s_class,*(const QPicture*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_143(Smoke::Stack x) {
        // void drawPixmap(const QRectF&, const QPixmap&, const QRectF&)
        this->QPainter::drawPixmap(*(const QRectF*)x[1].s_class,*(const QPixmap*)x[2].s_class,*(const QRectF*)x[3].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_144(Smoke::Stack x) {
        // void drawPixmap(const QRect&, const QPixmap&, const QRect&)
        this->QPainter::drawPixmap(*(const QRect*)x[1].s_class,*(const QPixmap*)x[2].s_class,*(const QRect*)x[3].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_145(Smoke::Stack x) {
        // void drawPixmap(int, int, int, int, const QPixmap&, int, int, int, int)
        this->QPainter::drawPixmap((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int,*(const QPixmap*)x[5].s_class,(int)x[6].s_int,(int)x[7].s_int,(int)x[8].s_int,(int)x[9].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_146(Smoke::Stack x) {
        // void drawPixmap(int, int, const QPixmap&, int, int, int, int)
        this->QPainter::drawPixmap((int)x[1].s_int,(int)x[2].s_int,*(const QPixmap*)x[3].s_class,(int)x[4].s_int,(int)x[5].s_int,(int)x[6].s_int,(int)x[7].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_147(Smoke::Stack x) {
        // void drawPixmap(const QPointF&, const QPixmap&, const QRectF&)
        this->QPainter::drawPixmap(*(const QPointF*)x[1].s_class,*(const QPixmap*)x[2].s_class,*(const QRectF*)x[3].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_148(Smoke::Stack x) {
        // void drawPixmap(const QPoint&, const QPixmap&, const QRect&)
        this->QPainter::drawPixmap(*(const QPoint*)x[1].s_class,*(const QPixmap*)x[2].s_class,*(const QRect*)x[3].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_149(Smoke::Stack x) {
        // void drawPixmap(const QPointF&, const QPixmap&)
        this->QPainter::drawPixmap(*(const QPointF*)x[1].s_class,*(const QPixmap*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_150(Smoke::Stack x) {
        // void drawPixmap(const QPoint&, const QPixmap&)
        this->QPainter::drawPixmap(*(const QPoint*)x[1].s_class,*(const QPixmap*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_151(Smoke::Stack x) {
        // void drawPixmap(int, int, const QPixmap&)
        this->QPainter::drawPixmap((int)x[1].s_int,(int)x[2].s_int,*(const QPixmap*)x[3].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_152(Smoke::Stack x) {
        // void drawPixmap(const QRect&, const QPixmap&)
        this->QPainter::drawPixmap(*(const QRect*)x[1].s_class,*(const QPixmap*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_153(Smoke::Stack x) {
        // void drawPixmap(int, int, int, int, const QPixmap&)
        this->QPainter::drawPixmap((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int,*(const QPixmap*)x[5].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_154(Smoke::Stack x) {
        // void drawPixmapFragments(const QPainter::PixmapFragment*, int, const QPixmap&, QFlags<QPainter::PixmapFragmentHint>)
        this->QPainter::drawPixmapFragments((const QPainter::PixmapFragment*)x[1].s_class,(int)x[2].s_int,*(const QPixmap*)x[3].s_class,(QFlags<QPainter::PixmapFragmentHint>)x[4].s_uint);
        (void)x; // noop (for compiler warning)
    }
    void x_155(Smoke::Stack x) {
        // void drawImage(const QRectF&, const QImage&, const QRectF&, QFlags<Qt::ImageConversionFlag>)
        this->QPainter::drawImage(*(const QRectF*)x[1].s_class,*(const QImage*)x[2].s_class,*(const QRectF*)x[3].s_class,(QFlags<Qt::ImageConversionFlag>)x[4].s_uint);
        (void)x; // noop (for compiler warning)
    }
    void x_156(Smoke::Stack x) {
        // void drawImage(const QRect&, const QImage&, const QRect&, QFlags<Qt::ImageConversionFlag>)
        this->QPainter::drawImage(*(const QRect*)x[1].s_class,*(const QImage*)x[2].s_class,*(const QRect*)x[3].s_class,(QFlags<Qt::ImageConversionFlag>)x[4].s_uint);
        (void)x; // noop (for compiler warning)
    }
    void x_157(Smoke::Stack x) {
        // void drawImage(const QPointF&, const QImage&, const QRectF&, QFlags<Qt::ImageConversionFlag>)
        this->QPainter::drawImage(*(const QPointF*)x[1].s_class,*(const QImage*)x[2].s_class,*(const QRectF*)x[3].s_class,(QFlags<Qt::ImageConversionFlag>)x[4].s_uint);
        (void)x; // noop (for compiler warning)
    }
    void x_158(Smoke::Stack x) {
        // void drawImage(const QPoint&, const QImage&, const QRect&, QFlags<Qt::ImageConversionFlag>)
        this->QPainter::drawImage(*(const QPoint*)x[1].s_class,*(const QImage*)x[2].s_class,*(const QRect*)x[3].s_class,(QFlags<Qt::ImageConversionFlag>)x[4].s_uint);
        (void)x; // noop (for compiler warning)
    }
    void x_159(Smoke::Stack x) {
        // void drawImage(const QRectF&, const QImage&)
        this->QPainter::drawImage(*(const QRectF*)x[1].s_class,*(const QImage*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_160(Smoke::Stack x) {
        // void drawImage(const QRect&, const QImage&)
        this->QPainter::drawImage(*(const QRect*)x[1].s_class,*(const QImage*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_161(Smoke::Stack x) {
        // void drawImage(const QPointF&, const QImage&)
        this->QPainter::drawImage(*(const QPointF*)x[1].s_class,*(const QImage*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_162(Smoke::Stack x) {
        // void drawImage(const QPoint&, const QImage&)
        this->QPainter::drawImage(*(const QPoint*)x[1].s_class,*(const QImage*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_163(Smoke::Stack x) {
        // void drawImage(int, int, const QImage&, int, int, int, int, QFlags<Qt::ImageConversionFlag>)
        this->QPainter::drawImage((int)x[1].s_int,(int)x[2].s_int,*(const QImage*)x[3].s_class,(int)x[4].s_int,(int)x[5].s_int,(int)x[6].s_int,(int)x[7].s_int,(QFlags<Qt::ImageConversionFlag>)x[8].s_uint);
        (void)x; // noop (for compiler warning)
    }
    void x_164(Smoke::Stack x) {
        // void setLayoutDirection(Qt::LayoutDirection)
        this->QPainter::setLayoutDirection((Qt::LayoutDirection)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_165(Smoke::Stack x) {
        // Qt::LayoutDirection layoutDirection() const
        Qt::LayoutDirection xret = ((const x_QPainter*)this)->QPainter::layoutDirection();
        x[0].s_enum = xret;
    }
    void x_166(Smoke::Stack x) {
        // void drawGlyphRun(const QPointF&, const QGlyphRun&)
        this->QPainter::drawGlyphRun(*(const QPointF*)x[1].s_class,*(const QGlyphRun*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_167(Smoke::Stack x) {
        // void drawStaticText(const QPointF&, const QStaticText&)
        this->QPainter::drawStaticText(*(const QPointF*)x[1].s_class,*(const QStaticText*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_168(Smoke::Stack x) {
        // void drawStaticText(const QPoint&, const QStaticText&)
        this->QPainter::drawStaticText(*(const QPoint*)x[1].s_class,*(const QStaticText*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_169(Smoke::Stack x) {
        // void drawStaticText(int, int, const QStaticText&)
        this->QPainter::drawStaticText((int)x[1].s_int,(int)x[2].s_int,*(const QStaticText*)x[3].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_170(Smoke::Stack x) {
        // void drawText(const QPointF&, const QString&)
        this->QPainter::drawText(*(const QPointF*)x[1].s_class,*(const QString*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_171(Smoke::Stack x) {
        // void drawText(const QPoint&, const QString&)
        this->QPainter::drawText(*(const QPoint*)x[1].s_class,*(const QString*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_172(Smoke::Stack x) {
        // void drawText(int, int, const QString&)
        this->QPainter::drawText((int)x[1].s_int,(int)x[2].s_int,*(const QString*)x[3].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_173(Smoke::Stack x) {
        // void drawText(const QPointF&, const QString&, int, int)
        this->QPainter::drawText(*(const QPointF*)x[1].s_class,*(const QString*)x[2].s_class,(int)x[3].s_int,(int)x[4].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_174(Smoke::Stack x) {
        // void drawText(const QRectF&, int, const QString&, QRectF*)
        this->QPainter::drawText(*(const QRectF*)x[1].s_class,(int)x[2].s_int,*(const QString*)x[3].s_class,(QRectF*)x[4].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_175(Smoke::Stack x) {
        // void drawText(const QRect&, int, const QString&, QRect*)
        this->QPainter::drawText(*(const QRect*)x[1].s_class,(int)x[2].s_int,*(const QString*)x[3].s_class,(QRect*)x[4].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_176(Smoke::Stack x) {
        // void drawText(int, int, int, int, int, const QString&, QRect*)
        this->QPainter::drawText((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int,(int)x[5].s_int,*(const QString*)x[6].s_class,(QRect*)x[7].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_177(Smoke::Stack x) {
        // void drawText(const QRectF&, const QString&, const QTextOption&)
        this->QPainter::drawText(*(const QRectF*)x[1].s_class,*(const QString*)x[2].s_class,*(const QTextOption*)x[3].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_178(Smoke::Stack x) {
        // QRectF boundingRect(const QRectF&, int, const QString&)
        QRectF xret = this->QPainter::boundingRect(*(const QRectF*)x[1].s_class,(int)x[2].s_int,*(const QString*)x[3].s_class);
        x[0].s_class = (void*)new QRectF(xret);
    }
    void x_179(Smoke::Stack x) {
        // QRect boundingRect(const QRect&, int, const QString&)
        QRect xret = this->QPainter::boundingRect(*(const QRect*)x[1].s_class,(int)x[2].s_int,*(const QString*)x[3].s_class);
        x[0].s_class = (void*)new QRect(xret);
    }
    void x_180(Smoke::Stack x) {
        // QRect boundingRect(int, int, int, int, int, const QString&)
        QRect xret = this->QPainter::boundingRect((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int,(int)x[5].s_int,*(const QString*)x[6].s_class);
        x[0].s_class = (void*)new QRect(xret);
    }
    void x_181(Smoke::Stack x) {
        // QRectF boundingRect(const QRectF&, const QString&, const QTextOption&)
        QRectF xret = this->QPainter::boundingRect(*(const QRectF*)x[1].s_class,*(const QString*)x[2].s_class,*(const QTextOption*)x[3].s_class);
        x[0].s_class = (void*)new QRectF(xret);
    }
    void x_182(Smoke::Stack x) {
        // void drawTextItem(const QPointF&, const QTextItem&)
        this->QPainter::drawTextItem(*(const QPointF*)x[1].s_class,*(const QTextItem*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_183(Smoke::Stack x) {
        // void drawTextItem(int, int, const QTextItem&)
        this->QPainter::drawTextItem((int)x[1].s_int,(int)x[2].s_int,*(const QTextItem*)x[3].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_184(Smoke::Stack x) {
        // void drawTextItem(const QPoint&, const QTextItem&)
        this->QPainter::drawTextItem(*(const QPoint*)x[1].s_class,*(const QTextItem*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_185(Smoke::Stack x) {
        // void fillRect(const QRectF&, const QBrush&)
        this->QPainter::fillRect(*(const QRectF*)x[1].s_class,*(const QBrush*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_186(Smoke::Stack x) {
        // void fillRect(int, int, int, int, const QBrush&)
        this->QPainter::fillRect((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int,*(const QBrush*)x[5].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_187(Smoke::Stack x) {
        // void fillRect(const QRect&, const QBrush&)
        this->QPainter::fillRect(*(const QRect*)x[1].s_class,*(const QBrush*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_188(Smoke::Stack x) {
        // void fillRect(const QRectF&, const QColor&)
        this->QPainter::fillRect(*(const QRectF*)x[1].s_class,*(const QColor*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_189(Smoke::Stack x) {
        // void fillRect(int, int, int, int, const QColor&)
        this->QPainter::fillRect((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int,*(const QColor*)x[5].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_190(Smoke::Stack x) {
        // void fillRect(const QRect&, const QColor&)
        this->QPainter::fillRect(*(const QRect*)x[1].s_class,*(const QColor*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_191(Smoke::Stack x) {
        // void fillRect(int, int, int, int, Qt::GlobalColor)
        this->QPainter::fillRect((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int,(Qt::GlobalColor)x[5].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_192(Smoke::Stack x) {
        // void fillRect(const QRect&, Qt::GlobalColor)
        this->QPainter::fillRect(*(const QRect*)x[1].s_class,(Qt::GlobalColor)x[2].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_193(Smoke::Stack x) {
        // void fillRect(const QRectF&, Qt::GlobalColor)
        this->QPainter::fillRect(*(const QRectF*)x[1].s_class,(Qt::GlobalColor)x[2].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_194(Smoke::Stack x) {
        // void fillRect(int, int, int, int, Qt::BrushStyle)
        this->QPainter::fillRect((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int,(Qt::BrushStyle)x[5].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_195(Smoke::Stack x) {
        // void fillRect(const QRect&, Qt::BrushStyle)
        this->QPainter::fillRect(*(const QRect*)x[1].s_class,(Qt::BrushStyle)x[2].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_196(Smoke::Stack x) {
        // void fillRect(const QRectF&, Qt::BrushStyle)
        this->QPainter::fillRect(*(const QRectF*)x[1].s_class,(Qt::BrushStyle)x[2].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_197(Smoke::Stack x) {
        // void eraseRect(const QRectF&)
        this->QPainter::eraseRect(*(const QRectF*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_198(Smoke::Stack x) {
        // void eraseRect(int, int, int, int)
        this->QPainter::eraseRect((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_199(Smoke::Stack x) {
        // void eraseRect(const QRect&)
        this->QPainter::eraseRect(*(const QRect*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_200(Smoke::Stack x) {
        // void setRenderHint(QPainter::RenderHint, bool)
        this->QPainter::setRenderHint((QPainter::RenderHint)x[1].s_enum,(bool)x[2].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_201(Smoke::Stack x) {
        // void setRenderHints(QFlags<QPainter::RenderHint>, bool)
        this->QPainter::setRenderHints((QFlags<QPainter::RenderHint>)x[1].s_uint,(bool)x[2].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_202(Smoke::Stack x) {
        // QFlags<QPainter::RenderHint> renderHints() const
        QFlags<QPainter::RenderHint> xret = ((const x_QPainter*)this)->QPainter::renderHints();
        x[0].s_uint = (uint)xret;
    }
    void x_203(Smoke::Stack x) {
        // bool testRenderHint(QPainter::RenderHint) const
        bool xret = ((const x_QPainter*)this)->QPainter::testRenderHint((QPainter::RenderHint)x[1].s_enum);
        x[0].s_bool = xret;
    }
    void x_204(Smoke::Stack x) {
        // QPaintEngine* paintEngine() const
        QPaintEngine* xret = ((const x_QPainter*)this)->QPainter::paintEngine();
        x[0].s_class = (void*)xret;
    }
    static void x_205(Smoke::Stack x) {
        // static void setRedirected(const QPaintDevice*, QPaintDevice*, const QPoint&)
        QPainter::setRedirected((const QPaintDevice*)x[1].s_class,(QPaintDevice*)x[2].s_class,*(const QPoint*)x[3].s_class);
        (void)x; // noop (for compiler warning)
    }
    static void x_206(Smoke::Stack x) {
        // static QPaintDevice* redirected(const QPaintDevice*, QPoint*)
        QPaintDevice* xret = QPainter::redirected((const QPaintDevice*)x[1].s_class,(QPoint*)x[2].s_class);
        x[0].s_class = (void*)xret;
    }
    static void x_207(Smoke::Stack x) {
        // static void restoreRedirected(const QPaintDevice*)
        QPainter::restoreRedirected((const QPaintDevice*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_208(Smoke::Stack x) {
        // void beginNativePainting()
        this->QPainter::beginNativePainting();
        (void)x; // noop (for compiler warning)
    }
    void x_209(Smoke::Stack x) {
        // void endNativePainting()
        this->QPainter::endNativePainting();
        (void)x; // noop (for compiler warning)
    }
    void x_210(Smoke::Stack x) {
        // void setClipRect(const QRectF&)
        this->QPainter::setClipRect(*(const QRectF*)x[1].s_class,(Qt::ClipOperation)Qt::ReplaceClip);
        (void)x; // noop (for compiler warning)
    }
    void x_211(Smoke::Stack x) {
        // void setClipRect(const QRect&)
        this->QPainter::setClipRect(*(const QRect*)x[1].s_class,(Qt::ClipOperation)Qt::ReplaceClip);
        (void)x; // noop (for compiler warning)
    }
    void x_212(Smoke::Stack x) {
        // void setClipRect(int, int, int, int)
        this->QPainter::setClipRect((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int,(Qt::ClipOperation)Qt::ReplaceClip);
        (void)x; // noop (for compiler warning)
    }
    void x_213(Smoke::Stack x) {
        // void setClipRegion(const QRegion&)
        this->QPainter::setClipRegion(*(const QRegion*)x[1].s_class,(Qt::ClipOperation)Qt::ReplaceClip);
        (void)x; // noop (for compiler warning)
    }
    void x_214(Smoke::Stack x) {
        // void setClipPath(const QPainterPath&)
        this->QPainter::setClipPath(*(const QPainterPath*)x[1].s_class,(Qt::ClipOperation)Qt::ReplaceClip);
        (void)x; // noop (for compiler warning)
    }
    void x_215(Smoke::Stack x) {
        // void setMatrix(const QMatrix&)
        this->QPainter::setMatrix(*(const QMatrix*)x[1].s_class,(bool)false);
        (void)x; // noop (for compiler warning)
    }
    void x_216(Smoke::Stack x) {
        // void setTransform(const QTransform&)
        this->QPainter::setTransform(*(const QTransform*)x[1].s_class,(bool)false);
        (void)x; // noop (for compiler warning)
    }
    void x_217(Smoke::Stack x) {
        // void setWorldMatrix(const QMatrix&)
        this->QPainter::setWorldMatrix(*(const QMatrix*)x[1].s_class,(bool)false);
        (void)x; // noop (for compiler warning)
    }
    void x_218(Smoke::Stack x) {
        // void setWorldTransform(const QTransform&)
        this->QPainter::setWorldTransform(*(const QTransform*)x[1].s_class,(bool)false);
        (void)x; // noop (for compiler warning)
    }
    void x_219(Smoke::Stack x) {
        // void drawPolygon(const QPointF*, int)
        this->QPainter::drawPolygon((const QPointF*)x[1].s_class,(int)x[2].s_int,(Qt::FillRule)Qt::OddEvenFill);
        (void)x; // noop (for compiler warning)
    }
    void x_220(Smoke::Stack x) {
        // void drawPolygon(const QPolygonF&)
        this->QPainter::drawPolygon(*(const QPolygonF*)x[1].s_class,(Qt::FillRule)Qt::OddEvenFill);
        (void)x; // noop (for compiler warning)
    }
    void x_221(Smoke::Stack x) {
        // void drawPolygon(const QPoint*, int)
        this->QPainter::drawPolygon((const QPoint*)x[1].s_class,(int)x[2].s_int,(Qt::FillRule)Qt::OddEvenFill);
        (void)x; // noop (for compiler warning)
    }
    void x_222(Smoke::Stack x) {
        // void drawPolygon(const QPolygon&)
        this->QPainter::drawPolygon(*(const QPolygon*)x[1].s_class,(Qt::FillRule)Qt::OddEvenFill);
        (void)x; // noop (for compiler warning)
    }
    void x_223(Smoke::Stack x) {
        // void drawRoundedRect(const QRectF&, double, double)
        this->QPainter::drawRoundedRect(*(const QRectF*)x[1].s_class,(double)x[2].s_double,(double)x[3].s_double,(Qt::SizeMode)Qt::AbsoluteSize);
        (void)x; // noop (for compiler warning)
    }
    void x_224(Smoke::Stack x) {
        // void drawRoundedRect(int, int, int, int, double, double)
        this->QPainter::drawRoundedRect((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int,(double)x[5].s_double,(double)x[6].s_double,(Qt::SizeMode)Qt::AbsoluteSize);
        (void)x; // noop (for compiler warning)
    }
    void x_225(Smoke::Stack x) {
        // void drawRoundedRect(const QRect&, double, double)
        this->QPainter::drawRoundedRect(*(const QRect*)x[1].s_class,(double)x[2].s_double,(double)x[3].s_double,(Qt::SizeMode)Qt::AbsoluteSize);
        (void)x; // noop (for compiler warning)
    }
    void x_226(Smoke::Stack x) {
        // void drawRoundRect(const QRectF&)
        this->QPainter::drawRoundRect(*(const QRectF*)x[1].s_class,(int)25,(int)25);
        (void)x; // noop (for compiler warning)
    }
    void x_227(Smoke::Stack x) {
        // void drawRoundRect(const QRectF&, int)
        this->QPainter::drawRoundRect(*(const QRectF*)x[1].s_class,(int)x[2].s_int,(int)25);
        (void)x; // noop (for compiler warning)
    }
    void x_228(Smoke::Stack x) {
        // void drawRoundRect(int, int, int, int)
        this->QPainter::drawRoundRect((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int,(int)25,(int)25);
        (void)x; // noop (for compiler warning)
    }
    void x_229(Smoke::Stack x) {
        // void drawRoundRect(int, int, int, int, int)
        this->QPainter::drawRoundRect((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int,(int)x[5].s_int,(int)25);
        (void)x; // noop (for compiler warning)
    }
    void x_230(Smoke::Stack x) {
        // void drawRoundRect(const QRect&)
        this->QPainter::drawRoundRect(*(const QRect*)x[1].s_class,(int)25,(int)25);
        (void)x; // noop (for compiler warning)
    }
    void x_231(Smoke::Stack x) {
        // void drawRoundRect(const QRect&, int)
        this->QPainter::drawRoundRect(*(const QRect*)x[1].s_class,(int)x[2].s_int,(int)25);
        (void)x; // noop (for compiler warning)
    }
    void x_232(Smoke::Stack x) {
        // void drawTiledPixmap(const QRectF&, const QPixmap&)
        this->QPainter::drawTiledPixmap(*(const QRectF*)x[1].s_class,*(const QPixmap*)x[2].s_class,(const QPointF&)QPointF());
        (void)x; // noop (for compiler warning)
    }
    void x_233(Smoke::Stack x) {
        // void drawTiledPixmap(int, int, int, int, const QPixmap&)
        this->QPainter::drawTiledPixmap((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int,*(const QPixmap*)x[5].s_class,(int)0,(int)0);
        (void)x; // noop (for compiler warning)
    }
    void x_234(Smoke::Stack x) {
        // void drawTiledPixmap(int, int, int, int, const QPixmap&, int)
        this->QPainter::drawTiledPixmap((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int,*(const QPixmap*)x[5].s_class,(int)x[6].s_int,(int)0);
        (void)x; // noop (for compiler warning)
    }
    void x_235(Smoke::Stack x) {
        // void drawTiledPixmap(const QRect&, const QPixmap&)
        this->QPainter::drawTiledPixmap(*(const QRect*)x[1].s_class,*(const QPixmap*)x[2].s_class,(const QPoint&)QPoint());
        (void)x; // noop (for compiler warning)
    }
    void x_236(Smoke::Stack x) {
        // void drawPixmapFragments(const QPainter::PixmapFragment*, int, const QPixmap&)
        this->QPainter::drawPixmapFragments((const QPainter::PixmapFragment*)x[1].s_class,(int)x[2].s_int,*(const QPixmap*)x[3].s_class,(QFlags<QPainter::PixmapFragmentHint>)0);
        (void)x; // noop (for compiler warning)
    }
    void x_237(Smoke::Stack x) {
        // void drawImage(const QRectF&, const QImage&, const QRectF&)
        this->QPainter::drawImage(*(const QRectF*)x[1].s_class,*(const QImage*)x[2].s_class,*(const QRectF*)x[3].s_class,(QFlags<Qt::ImageConversionFlag>)Qt::AutoColor);
        (void)x; // noop (for compiler warning)
    }
    void x_238(Smoke::Stack x) {
        // void drawImage(const QRect&, const QImage&, const QRect&)
        this->QPainter::drawImage(*(const QRect*)x[1].s_class,*(const QImage*)x[2].s_class,*(const QRect*)x[3].s_class,(QFlags<Qt::ImageConversionFlag>)Qt::AutoColor);
        (void)x; // noop (for compiler warning)
    }
    void x_239(Smoke::Stack x) {
        // void drawImage(const QPointF&, const QImage&, const QRectF&)
        this->QPainter::drawImage(*(const QPointF*)x[1].s_class,*(const QImage*)x[2].s_class,*(const QRectF*)x[3].s_class,(QFlags<Qt::ImageConversionFlag>)Qt::AutoColor);
        (void)x; // noop (for compiler warning)
    }
    void x_240(Smoke::Stack x) {
        // void drawImage(const QPoint&, const QImage&, const QRect&)
        this->QPainter::drawImage(*(const QPoint*)x[1].s_class,*(const QImage*)x[2].s_class,*(const QRect*)x[3].s_class,(QFlags<Qt::ImageConversionFlag>)Qt::AutoColor);
        (void)x; // noop (for compiler warning)
    }
    void x_241(Smoke::Stack x) {
        // void drawImage(int, int, const QImage&)
        this->QPainter::drawImage((int)x[1].s_int,(int)x[2].s_int,*(const QImage*)x[3].s_class,(int)0,(int)0,(int)-1,(int)-1,(QFlags<Qt::ImageConversionFlag>)Qt::AutoColor);
        (void)x; // noop (for compiler warning)
    }
    void x_242(Smoke::Stack x) {
        // void drawImage(int, int, const QImage&, int)
        this->QPainter::drawImage((int)x[1].s_int,(int)x[2].s_int,*(const QImage*)x[3].s_class,(int)x[4].s_int,(int)0,(int)-1,(int)-1,(QFlags<Qt::ImageConversionFlag>)Qt::AutoColor);
        (void)x; // noop (for compiler warning)
    }
    void x_243(Smoke::Stack x) {
        // void drawImage(int, int, const QImage&, int, int)
        this->QPainter::drawImage((int)x[1].s_int,(int)x[2].s_int,*(const QImage*)x[3].s_class,(int)x[4].s_int,(int)x[5].s_int,(int)-1,(int)-1,(QFlags<Qt::ImageConversionFlag>)Qt::AutoColor);
        (void)x; // noop (for compiler warning)
    }
    void x_244(Smoke::Stack x) {
        // void drawImage(int, int, const QImage&, int, int, int)
        this->QPainter::drawImage((int)x[1].s_int,(int)x[2].s_int,*(const QImage*)x[3].s_class,(int)x[4].s_int,(int)x[5].s_int,(int)x[6].s_int,(int)-1,(QFlags<Qt::ImageConversionFlag>)Qt::AutoColor);
        (void)x; // noop (for compiler warning)
    }
    void x_245(Smoke::Stack x) {
        // void drawImage(int, int, const QImage&, int, int, int, int)
        this->QPainter::drawImage((int)x[1].s_int,(int)x[2].s_int,*(const QImage*)x[3].s_class,(int)x[4].s_int,(int)x[5].s_int,(int)x[6].s_int,(int)x[7].s_int,(QFlags<Qt::ImageConversionFlag>)Qt::AutoColor);
        (void)x; // noop (for compiler warning)
    }
    void x_246(Smoke::Stack x) {
        // void drawText(const QRectF&, int, const QString&)
        this->QPainter::drawText(*(const QRectF*)x[1].s_class,(int)x[2].s_int,*(const QString*)x[3].s_class,(QRectF*)0);
        (void)x; // noop (for compiler warning)
    }
    void x_247(Smoke::Stack x) {
        // void drawText(const QRect&, int, const QString&)
        this->QPainter::drawText(*(const QRect*)x[1].s_class,(int)x[2].s_int,*(const QString*)x[3].s_class,(QRect*)0);
        (void)x; // noop (for compiler warning)
    }
    void x_248(Smoke::Stack x) {
        // void drawText(int, int, int, int, int, const QString&)
        this->QPainter::drawText((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int,(int)x[5].s_int,*(const QString*)x[6].s_class,(QRect*)0);
        (void)x; // noop (for compiler warning)
    }
    void x_249(Smoke::Stack x) {
        // void drawText(const QRectF&, const QString&)
        this->QPainter::drawText(*(const QRectF*)x[1].s_class,*(const QString*)x[2].s_class,(const QTextOption&)QTextOption());
        (void)x; // noop (for compiler warning)
    }
    void x_250(Smoke::Stack x) {
        // QRectF boundingRect(const QRectF&, const QString&)
        QRectF xret = this->QPainter::boundingRect(*(const QRectF*)x[1].s_class,*(const QString*)x[2].s_class,(const QTextOption&)QTextOption());
        x[0].s_class = (void*)new QRectF(xret);
    }
    void x_251(Smoke::Stack x) {
        // void setRenderHint(QPainter::RenderHint)
        this->QPainter::setRenderHint((QPainter::RenderHint)x[1].s_enum,(bool)true);
        (void)x; // noop (for compiler warning)
    }
    void x_252(Smoke::Stack x) {
        // void setRenderHints(QFlags<QPainter::RenderHint>)
        this->QPainter::setRenderHints((QFlags<QPainter::RenderHint>)x[1].s_uint,(bool)true);
        (void)x; // noop (for compiler warning)
    }
    static void x_253(Smoke::Stack x) {
        // static void setRedirected(const QPaintDevice*, QPaintDevice*)
        QPainter::setRedirected((const QPaintDevice*)x[1].s_class,(QPaintDevice*)x[2].s_class,(const QPoint&)QPoint());
        (void)x; // noop (for compiler warning)
    }
    static void x_254(Smoke::Stack x) {
        // static QPaintDevice* redirected(const QPaintDevice*)
        QPaintDevice* xret = QPainter::redirected((const QPaintDevice*)x[1].s_class,(QPoint*)0);
        x[0].s_class = (void*)xret;
    }
    static void x_255(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QPainter::staticMetaObject;
    }
    static void x_256(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::Antialiasing;
    }
    static void x_257(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::TextAntialiasing;
    }
    static void x_258(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::SmoothPixmapTransform;
    }
    static void x_259(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::HighQualityAntialiasing;
    }
    static void x_260(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::NonCosmeticDefaultPen;
    }
    static void x_261(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::Qt4CompatiblePainting;
    }
    static void x_262(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::OpaqueHint;
    }
    static void x_263(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::CompositionMode_SourceOver;
    }
    static void x_264(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::CompositionMode_DestinationOver;
    }
    static void x_265(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::CompositionMode_Clear;
    }
    static void x_266(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::CompositionMode_Source;
    }
    static void x_267(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::CompositionMode_Destination;
    }
    static void x_268(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::CompositionMode_SourceIn;
    }
    static void x_269(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::CompositionMode_DestinationIn;
    }
    static void x_270(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::CompositionMode_SourceOut;
    }
    static void x_271(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::CompositionMode_DestinationOut;
    }
    static void x_272(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::CompositionMode_SourceAtop;
    }
    static void x_273(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::CompositionMode_DestinationAtop;
    }
    static void x_274(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::CompositionMode_Xor;
    }
    static void x_275(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::CompositionMode_Plus;
    }
    static void x_276(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::CompositionMode_Multiply;
    }
    static void x_277(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::CompositionMode_Screen;
    }
    static void x_278(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::CompositionMode_Overlay;
    }
    static void x_279(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::CompositionMode_Darken;
    }
    static void x_280(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::CompositionMode_Lighten;
    }
    static void x_281(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::CompositionMode_ColorDodge;
    }
    static void x_282(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::CompositionMode_ColorBurn;
    }
    static void x_283(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::CompositionMode_HardLight;
    }
    static void x_284(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::CompositionMode_SoftLight;
    }
    static void x_285(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::CompositionMode_Difference;
    }
    static void x_286(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::CompositionMode_Exclusion;
    }
    static void x_287(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::RasterOp_SourceOrDestination;
    }
    static void x_288(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::RasterOp_SourceAndDestination;
    }
    static void x_289(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::RasterOp_SourceXorDestination;
    }
    static void x_290(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::RasterOp_NotSourceAndNotDestination;
    }
    static void x_291(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::RasterOp_NotSourceOrNotDestination;
    }
    static void x_292(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::RasterOp_NotSourceXorDestination;
    }
    static void x_293(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::RasterOp_NotSource;
    }
    static void x_294(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::RasterOp_NotSourceAndDestination;
    }
    static void x_295(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::RasterOp_SourceAndNotDestination;
    }
    static void x_296(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::RasterOp_NotSourceOrDestination;
    }
    static void x_297(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::RasterOp_SourceOrNotDestination;
    }
    static void x_298(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::RasterOp_ClearDestination;
    }
    static void x_299(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::RasterOp_SetDestination;
    }
    static void x_300(Smoke::Stack x) {
        x[0].s_enum = (long)QPainter::RasterOp_NotDestination;
    }
    static void xenum_operation(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
        switch(xtype) {
        case 776: //QPainter::RenderHint
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QPainter::RenderHint;
                    break;
                case Smoke::EnumDelete:
                    delete (QPainter::RenderHint*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QPainter::RenderHint*)xdata = (QPainter::RenderHint)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QPainter::RenderHint*)xdata;
                    break;
            }
            break;
        case 775: //QPainter::PixmapFragmentHint
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QPainter::PixmapFragmentHint;
                    break;
                case Smoke::EnumDelete:
                    delete (QPainter::PixmapFragmentHint*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QPainter::PixmapFragmentHint*)xdata = (QPainter::PixmapFragmentHint)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QPainter::PixmapFragmentHint*)xdata;
                    break;
            }
            break;
        case 772: //QPainter::CompositionMode
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QPainter::CompositionMode;
                    break;
                case Smoke::EnumDelete:
                    delete (QPainter::CompositionMode*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QPainter::CompositionMode*)xdata = (QPainter::CompositionMode)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QPainter::CompositionMode*)xdata;
                    break;
            }
            break;
        }
    }
    ~x_QPainter() { this->_binding->deleted(293, (void*)this); }
};
void xenum_QPainter(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
    x_QPainter::xenum_operation(xop, xtype, xdata, xvalue);
}
void xcall_QPainter(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QPainter *xself = (x_QPainter*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: x_QPainter::x_1(args);	break;
        case 2: x_QPainter::x_2(args);	break;
        case 3: xself->x_3(args);	break;
        case 4: xself->x_4(args);	break;
        case 5: xself->x_5(args);	break;
        case 6: xself->x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: xself->x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: xself->x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: xself->x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: xself->x_30(args);	break;
        case 31: xself->x_31(args);	break;
        case 32: xself->x_32(args);	break;
        case 33: xself->x_33(args);	break;
        case 34: xself->x_34(args);	break;
        case 35: xself->x_35(args);	break;
        case 36: xself->x_36(args);	break;
        case 37: xself->x_37(args);	break;
        case 38: xself->x_38(args);	break;
        case 39: xself->x_39(args);	break;
        case 40: xself->x_40(args);	break;
        case 41: xself->x_41(args);	break;
        case 42: xself->x_42(args);	break;
        case 43: xself->x_43(args);	break;
        case 44: xself->x_44(args);	break;
        case 45: xself->x_45(args);	break;
        case 46: xself->x_46(args);	break;
        case 47: xself->x_47(args);	break;
        case 48: xself->x_48(args);	break;
        case 49: xself->x_49(args);	break;
        case 50: xself->x_50(args);	break;
        case 51: xself->x_51(args);	break;
        case 52: xself->x_52(args);	break;
        case 53: xself->x_53(args);	break;
        case 54: xself->x_54(args);	break;
        case 55: xself->x_55(args);	break;
        case 56: xself->x_56(args);	break;
        case 57: xself->x_57(args);	break;
        case 58: xself->x_58(args);	break;
        case 59: xself->x_59(args);	break;
        case 60: xself->x_60(args);	break;
        case 61: xself->x_61(args);	break;
        case 62: xself->x_62(args);	break;
        case 63: xself->x_63(args);	break;
        case 64: xself->x_64(args);	break;
        case 65: xself->x_65(args);	break;
        case 66: xself->x_66(args);	break;
        case 67: xself->x_67(args);	break;
        case 68: xself->x_68(args);	break;
        case 69: xself->x_69(args);	break;
        case 70: xself->x_70(args);	break;
        case 71: xself->x_71(args);	break;
        case 72: xself->x_72(args);	break;
        case 73: xself->x_73(args);	break;
        case 74: xself->x_74(args);	break;
        case 75: xself->x_75(args);	break;
        case 76: xself->x_76(args);	break;
        case 77: xself->x_77(args);	break;
        case 78: xself->x_78(args);	break;
        case 79: xself->x_79(args);	break;
        case 80: xself->x_80(args);	break;
        case 81: xself->x_81(args);	break;
        case 82: xself->x_82(args);	break;
        case 83: xself->x_83(args);	break;
        case 84: xself->x_84(args);	break;
        case 85: xself->x_85(args);	break;
        case 86: xself->x_86(args);	break;
        case 87: xself->x_87(args);	break;
        case 88: xself->x_88(args);	break;
        case 89: xself->x_89(args);	break;
        case 90: xself->x_90(args);	break;
        case 91: xself->x_91(args);	break;
        case 92: xself->x_92(args);	break;
        case 93: xself->x_93(args);	break;
        case 94: xself->x_94(args);	break;
        case 95: xself->x_95(args);	break;
        case 96: xself->x_96(args);	break;
        case 97: xself->x_97(args);	break;
        case 98: xself->x_98(args);	break;
        case 99: xself->x_99(args);	break;
        case 100: xself->x_100(args);	break;
        case 101: xself->x_101(args);	break;
        case 102: xself->x_102(args);	break;
        case 103: xself->x_103(args);	break;
        case 104: xself->x_104(args);	break;
        case 105: xself->x_105(args);	break;
        case 106: xself->x_106(args);	break;
        case 107: xself->x_107(args);	break;
        case 108: xself->x_108(args);	break;
        case 109: xself->x_109(args);	break;
        case 110: xself->x_110(args);	break;
        case 111: xself->x_111(args);	break;
        case 112: xself->x_112(args);	break;
        case 113: xself->x_113(args);	break;
        case 114: xself->x_114(args);	break;
        case 115: xself->x_115(args);	break;
        case 116: xself->x_116(args);	break;
        case 117: xself->x_117(args);	break;
        case 118: xself->x_118(args);	break;
        case 119: xself->x_119(args);	break;
        case 120: xself->x_120(args);	break;
        case 121: xself->x_121(args);	break;
        case 122: xself->x_122(args);	break;
        case 123: xself->x_123(args);	break;
        case 124: xself->x_124(args);	break;
        case 125: xself->x_125(args);	break;
        case 126: xself->x_126(args);	break;
        case 127: xself->x_127(args);	break;
        case 128: xself->x_128(args);	break;
        case 129: xself->x_129(args);	break;
        case 130: xself->x_130(args);	break;
        case 131: xself->x_131(args);	break;
        case 132: xself->x_132(args);	break;
        case 133: xself->x_133(args);	break;
        case 134: xself->x_134(args);	break;
        case 135: xself->x_135(args);	break;
        case 136: xself->x_136(args);	break;
        case 137: xself->x_137(args);	break;
        case 138: xself->x_138(args);	break;
        case 139: xself->x_139(args);	break;
        case 140: xself->x_140(args);	break;
        case 141: xself->x_141(args);	break;
        case 142: xself->x_142(args);	break;
        case 143: xself->x_143(args);	break;
        case 144: xself->x_144(args);	break;
        case 145: xself->x_145(args);	break;
        case 146: xself->x_146(args);	break;
        case 147: xself->x_147(args);	break;
        case 148: xself->x_148(args);	break;
        case 149: xself->x_149(args);	break;
        case 150: xself->x_150(args);	break;
        case 151: xself->x_151(args);	break;
        case 152: xself->x_152(args);	break;
        case 153: xself->x_153(args);	break;
        case 154: xself->x_154(args);	break;
        case 155: xself->x_155(args);	break;
        case 156: xself->x_156(args);	break;
        case 157: xself->x_157(args);	break;
        case 158: xself->x_158(args);	break;
        case 159: xself->x_159(args);	break;
        case 160: xself->x_160(args);	break;
        case 161: xself->x_161(args);	break;
        case 162: xself->x_162(args);	break;
        case 163: xself->x_163(args);	break;
        case 164: xself->x_164(args);	break;
        case 165: xself->x_165(args);	break;
        case 166: xself->x_166(args);	break;
        case 167: xself->x_167(args);	break;
        case 168: xself->x_168(args);	break;
        case 169: xself->x_169(args);	break;
        case 170: xself->x_170(args);	break;
        case 171: xself->x_171(args);	break;
        case 172: xself->x_172(args);	break;
        case 173: xself->x_173(args);	break;
        case 174: xself->x_174(args);	break;
        case 175: xself->x_175(args);	break;
        case 176: xself->x_176(args);	break;
        case 177: xself->x_177(args);	break;
        case 178: xself->x_178(args);	break;
        case 179: xself->x_179(args);	break;
        case 180: xself->x_180(args);	break;
        case 181: xself->x_181(args);	break;
        case 182: xself->x_182(args);	break;
        case 183: xself->x_183(args);	break;
        case 184: xself->x_184(args);	break;
        case 185: xself->x_185(args);	break;
        case 186: xself->x_186(args);	break;
        case 187: xself->x_187(args);	break;
        case 188: xself->x_188(args);	break;
        case 189: xself->x_189(args);	break;
        case 190: xself->x_190(args);	break;
        case 191: xself->x_191(args);	break;
        case 192: xself->x_192(args);	break;
        case 193: xself->x_193(args);	break;
        case 194: xself->x_194(args);	break;
        case 195: xself->x_195(args);	break;
        case 196: xself->x_196(args);	break;
        case 197: xself->x_197(args);	break;
        case 198: xself->x_198(args);	break;
        case 199: xself->x_199(args);	break;
        case 200: xself->x_200(args);	break;
        case 201: xself->x_201(args);	break;
        case 202: xself->x_202(args);	break;
        case 203: xself->x_203(args);	break;
        case 204: xself->x_204(args);	break;
        case 205: x_QPainter::x_205(args);	break;
        case 206: x_QPainter::x_206(args);	break;
        case 207: x_QPainter::x_207(args);	break;
        case 208: xself->x_208(args);	break;
        case 209: xself->x_209(args);	break;
        case 210: xself->x_210(args);	break;
        case 211: xself->x_211(args);	break;
        case 212: xself->x_212(args);	break;
        case 213: xself->x_213(args);	break;
        case 214: xself->x_214(args);	break;
        case 215: xself->x_215(args);	break;
        case 216: xself->x_216(args);	break;
        case 217: xself->x_217(args);	break;
        case 218: xself->x_218(args);	break;
        case 219: xself->x_219(args);	break;
        case 220: xself->x_220(args);	break;
        case 221: xself->x_221(args);	break;
        case 222: xself->x_222(args);	break;
        case 223: xself->x_223(args);	break;
        case 224: xself->x_224(args);	break;
        case 225: xself->x_225(args);	break;
        case 226: xself->x_226(args);	break;
        case 227: xself->x_227(args);	break;
        case 228: xself->x_228(args);	break;
        case 229: xself->x_229(args);	break;
        case 230: xself->x_230(args);	break;
        case 231: xself->x_231(args);	break;
        case 232: xself->x_232(args);	break;
        case 233: xself->x_233(args);	break;
        case 234: xself->x_234(args);	break;
        case 235: xself->x_235(args);	break;
        case 236: xself->x_236(args);	break;
        case 237: xself->x_237(args);	break;
        case 238: xself->x_238(args);	break;
        case 239: xself->x_239(args);	break;
        case 240: xself->x_240(args);	break;
        case 241: xself->x_241(args);	break;
        case 242: xself->x_242(args);	break;
        case 243: xself->x_243(args);	break;
        case 244: xself->x_244(args);	break;
        case 245: xself->x_245(args);	break;
        case 246: xself->x_246(args);	break;
        case 247: xself->x_247(args);	break;
        case 248: xself->x_248(args);	break;
        case 249: xself->x_249(args);	break;
        case 250: xself->x_250(args);	break;
        case 251: xself->x_251(args);	break;
        case 252: xself->x_252(args);	break;
        case 253: x_QPainter::x_253(args);	break;
        case 254: x_QPainter::x_254(args);	break;
        case 255: x_QPainter::x_255(args);	break;
        case 256: x_QPainter::x_256(args);	break;
        case 257: x_QPainter::x_257(args);	break;
        case 258: x_QPainter::x_258(args);	break;
        case 259: x_QPainter::x_259(args);	break;
        case 260: x_QPainter::x_260(args);	break;
        case 261: x_QPainter::x_261(args);	break;
        case 262: x_QPainter::x_262(args);	break;
        case 263: x_QPainter::x_263(args);	break;
        case 264: x_QPainter::x_264(args);	break;
        case 265: x_QPainter::x_265(args);	break;
        case 266: x_QPainter::x_266(args);	break;
        case 267: x_QPainter::x_267(args);	break;
        case 268: x_QPainter::x_268(args);	break;
        case 269: x_QPainter::x_269(args);	break;
        case 270: x_QPainter::x_270(args);	break;
        case 271: x_QPainter::x_271(args);	break;
        case 272: x_QPainter::x_272(args);	break;
        case 273: x_QPainter::x_273(args);	break;
        case 274: x_QPainter::x_274(args);	break;
        case 275: x_QPainter::x_275(args);	break;
        case 276: x_QPainter::x_276(args);	break;
        case 277: x_QPainter::x_277(args);	break;
        case 278: x_QPainter::x_278(args);	break;
        case 279: x_QPainter::x_279(args);	break;
        case 280: x_QPainter::x_280(args);	break;
        case 281: x_QPainter::x_281(args);	break;
        case 282: x_QPainter::x_282(args);	break;
        case 283: x_QPainter::x_283(args);	break;
        case 284: x_QPainter::x_284(args);	break;
        case 285: x_QPainter::x_285(args);	break;
        case 286: x_QPainter::x_286(args);	break;
        case 287: x_QPainter::x_287(args);	break;
        case 288: x_QPainter::x_288(args);	break;
        case 289: x_QPainter::x_289(args);	break;
        case 290: x_QPainter::x_290(args);	break;
        case 291: x_QPainter::x_291(args);	break;
        case 292: x_QPainter::x_292(args);	break;
        case 293: x_QPainter::x_293(args);	break;
        case 294: x_QPainter::x_294(args);	break;
        case 295: x_QPainter::x_295(args);	break;
        case 296: x_QPainter::x_296(args);	break;
        case 297: x_QPainter::x_297(args);	break;
        case 298: x_QPainter::x_298(args);	break;
        case 299: x_QPainter::x_299(args);	break;
        case 300: x_QPainter::x_300(args);	break;
        case 301: delete (QPainter*)xself;	break;
    }
}
class x_QPainter__PixmapFragment : public QPainter::PixmapFragment {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    static void x_1(Smoke::Stack x) {
        // static QPainter::PixmapFragment create(const QPointF&, const QRectF&, double, double, double, double)
        QPainter::PixmapFragment xret = QPainter::PixmapFragment::create(*(const QPointF*)x[1].s_class,*(const QRectF*)x[2].s_class,(double)x[3].s_double,(double)x[4].s_double,(double)x[5].s_double,(double)x[6].s_double);
        x[0].s_class = (void*)new QPainter::PixmapFragment(xret);
    }
    static void x_2(Smoke::Stack x) {
        // QPainter::PixmapFragment* PixmapFragment()
        x_QPainter__PixmapFragment* xret = new x_QPainter__PixmapFragment();
        x[0].s_class = (void*)xret;
    }
    explicit x_QPainter__PixmapFragment() : PixmapFragment() {}
    static void x_3(Smoke::Stack x) {
        // QPainter::PixmapFragment* PixmapFragment(const QPainter::PixmapFragment&)
        x_QPainter__PixmapFragment* xret = new x_QPainter__PixmapFragment(*(const QPainter::PixmapFragment*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QPainter__PixmapFragment(const QPainter::PixmapFragment& x1) : PixmapFragment(x1) {}
    static void x_4(Smoke::Stack x) {
        // static QPainter::PixmapFragment create(const QPointF&, const QRectF&)
        QPainter::PixmapFragment xret = QPainter::PixmapFragment::create(*(const QPointF*)x[1].s_class,*(const QRectF*)x[2].s_class,(double)1,(double)1,(double)0,(double)1);
        x[0].s_class = (void*)new QPainter::PixmapFragment(xret);
    }
    static void x_5(Smoke::Stack x) {
        // static QPainter::PixmapFragment create(const QPointF&, const QRectF&, double)
        QPainter::PixmapFragment xret = QPainter::PixmapFragment::create(*(const QPointF*)x[1].s_class,*(const QRectF*)x[2].s_class,(double)x[3].s_double,(double)1,(double)0,(double)1);
        x[0].s_class = (void*)new QPainter::PixmapFragment(xret);
    }
    static void x_6(Smoke::Stack x) {
        // static QPainter::PixmapFragment create(const QPointF&, const QRectF&, double, double)
        QPainter::PixmapFragment xret = QPainter::PixmapFragment::create(*(const QPointF*)x[1].s_class,*(const QRectF*)x[2].s_class,(double)x[3].s_double,(double)x[4].s_double,(double)0,(double)1);
        x[0].s_class = (void*)new QPainter::PixmapFragment(xret);
    }
    static void x_7(Smoke::Stack x) {
        // static QPainter::PixmapFragment create(const QPointF&, const QRectF&, double, double, double)
        QPainter::PixmapFragment xret = QPainter::PixmapFragment::create(*(const QPointF*)x[1].s_class,*(const QRectF*)x[2].s_class,(double)x[3].s_double,(double)x[4].s_double,(double)x[5].s_double,(double)1);
        x[0].s_class = (void*)new QPainter::PixmapFragment(xret);
    }
    void x_8(Smoke::Stack x) {
        // double x
        x[0].s_double = this->QPainter::PixmapFragment::x;
    }
    void x_9(Smoke::Stack x) {
        // double x=
        this->QPainter::PixmapFragment::x = (double)x[1].s_double;
    }
    void x_10(Smoke::Stack x) {
        // double y
        x[0].s_double = this->QPainter::PixmapFragment::y;
    }
    void x_11(Smoke::Stack x) {
        // double y=
        this->QPainter::PixmapFragment::y = (double)x[1].s_double;
    }
    void x_12(Smoke::Stack x) {
        // double sourceLeft
        x[0].s_double = this->QPainter::PixmapFragment::sourceLeft;
    }
    void x_13(Smoke::Stack x) {
        // double sourceLeft=
        this->QPainter::PixmapFragment::sourceLeft = (double)x[1].s_double;
    }
    void x_14(Smoke::Stack x) {
        // double sourceTop
        x[0].s_double = this->QPainter::PixmapFragment::sourceTop;
    }
    void x_15(Smoke::Stack x) {
        // double sourceTop=
        this->QPainter::PixmapFragment::sourceTop = (double)x[1].s_double;
    }
    void x_16(Smoke::Stack x) {
        // double width
        x[0].s_double = this->QPainter::PixmapFragment::width;
    }
    void x_17(Smoke::Stack x) {
        // double width=
        this->QPainter::PixmapFragment::width = (double)x[1].s_double;
    }
    void x_18(Smoke::Stack x) {
        // double height
        x[0].s_double = this->QPainter::PixmapFragment::height;
    }
    void x_19(Smoke::Stack x) {
        // double height=
        this->QPainter::PixmapFragment::height = (double)x[1].s_double;
    }
    void x_20(Smoke::Stack x) {
        // double scaleX
        x[0].s_double = this->QPainter::PixmapFragment::scaleX;
    }
    void x_21(Smoke::Stack x) {
        // double scaleX=
        this->QPainter::PixmapFragment::scaleX = (double)x[1].s_double;
    }
    void x_22(Smoke::Stack x) {
        // double scaleY
        x[0].s_double = this->QPainter::PixmapFragment::scaleY;
    }
    void x_23(Smoke::Stack x) {
        // double scaleY=
        this->QPainter::PixmapFragment::scaleY = (double)x[1].s_double;
    }
    void x_24(Smoke::Stack x) {
        // double rotation
        x[0].s_double = this->QPainter::PixmapFragment::rotation;
    }
    void x_25(Smoke::Stack x) {
        // double rotation=
        this->QPainter::PixmapFragment::rotation = (double)x[1].s_double;
    }
    void x_26(Smoke::Stack x) {
        // double opacity
        x[0].s_double = this->QPainter::PixmapFragment::opacity;
    }
    void x_27(Smoke::Stack x) {
        // double opacity=
        this->QPainter::PixmapFragment::opacity = (double)x[1].s_double;
    }
    ~x_QPainter__PixmapFragment() { this->_binding->deleted(294, (void*)this); }
};
void xcall_QPainter__PixmapFragment(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QPainter__PixmapFragment *xself = (x_QPainter__PixmapFragment*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: x_QPainter__PixmapFragment::x_1(args);	break;
        case 2: x_QPainter__PixmapFragment::x_2(args);	break;
        case 3: x_QPainter__PixmapFragment::x_3(args);	break;
        case 4: x_QPainter__PixmapFragment::x_4(args);	break;
        case 5: x_QPainter__PixmapFragment::x_5(args);	break;
        case 6: x_QPainter__PixmapFragment::x_6(args);	break;
        case 7: x_QPainter__PixmapFragment::x_7(args);	break;
        case 8: xself->x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: xself->x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: xself->x_27(args);	break;
        case 28: delete (QPainter::PixmapFragment*)xself;	break;
    }
}
class x_QPainterPath : public QPainterPath {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    static void x_1(Smoke::Stack x) {
        // QPainterPath* QPainterPath()
        x_QPainterPath* xret = new x_QPainterPath();
        x[0].s_class = (void*)xret;
    }
    explicit x_QPainterPath() : QPainterPath() {}
    static void x_2(Smoke::Stack x) {
        // QPainterPath* QPainterPath(const QPointF&)
        x_QPainterPath* xret = new x_QPainterPath(*(const QPointF*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QPainterPath(const QPointF& x1) : QPainterPath(x1) {}
    static void x_3(Smoke::Stack x) {
        // QPainterPath* QPainterPath(const QPainterPath&)
        x_QPainterPath* xret = new x_QPainterPath(*(const QPainterPath*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QPainterPath(const QPainterPath& x1) : QPainterPath(x1) {}
    void x_4(Smoke::Stack x) {
        // QPainterPath& operator=(const QPainterPath&)
        QPainterPath& xret = this->QPainterPath::operator=(*(const QPainterPath*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    void x_5(Smoke::Stack x) {
        // void swap(QPainterPath&)
        this->QPainterPath::swap(*(QPainterPath*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_6(Smoke::Stack x) {
        // void closeSubpath()
        this->QPainterPath::closeSubpath();
        (void)x; // noop (for compiler warning)
    }
    void x_7(Smoke::Stack x) {
        // void moveTo(const QPointF&)
        this->QPainterPath::moveTo(*(const QPointF*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_8(Smoke::Stack x) {
        // void moveTo(double, double)
        this->QPainterPath::moveTo((double)x[1].s_double,(double)x[2].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_9(Smoke::Stack x) {
        // void lineTo(const QPointF&)
        this->QPainterPath::lineTo(*(const QPointF*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_10(Smoke::Stack x) {
        // void lineTo(double, double)
        this->QPainterPath::lineTo((double)x[1].s_double,(double)x[2].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_11(Smoke::Stack x) {
        // void arcMoveTo(const QRectF&, double)
        this->QPainterPath::arcMoveTo(*(const QRectF*)x[1].s_class,(double)x[2].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_12(Smoke::Stack x) {
        // void arcMoveTo(double, double, double, double, double)
        this->QPainterPath::arcMoveTo((double)x[1].s_double,(double)x[2].s_double,(double)x[3].s_double,(double)x[4].s_double,(double)x[5].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_13(Smoke::Stack x) {
        // void arcTo(const QRectF&, double, double)
        this->QPainterPath::arcTo(*(const QRectF*)x[1].s_class,(double)x[2].s_double,(double)x[3].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_14(Smoke::Stack x) {
        // void arcTo(double, double, double, double, double, double)
        this->QPainterPath::arcTo((double)x[1].s_double,(double)x[2].s_double,(double)x[3].s_double,(double)x[4].s_double,(double)x[5].s_double,(double)x[6].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_15(Smoke::Stack x) {
        // void cubicTo(const QPointF&, const QPointF&, const QPointF&)
        this->QPainterPath::cubicTo(*(const QPointF*)x[1].s_class,*(const QPointF*)x[2].s_class,*(const QPointF*)x[3].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_16(Smoke::Stack x) {
        // void cubicTo(double, double, double, double, double, double)
        this->QPainterPath::cubicTo((double)x[1].s_double,(double)x[2].s_double,(double)x[3].s_double,(double)x[4].s_double,(double)x[5].s_double,(double)x[6].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_17(Smoke::Stack x) {
        // void quadTo(const QPointF&, const QPointF&)
        this->QPainterPath::quadTo(*(const QPointF*)x[1].s_class,*(const QPointF*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_18(Smoke::Stack x) {
        // void quadTo(double, double, double, double)
        this->QPainterPath::quadTo((double)x[1].s_double,(double)x[2].s_double,(double)x[3].s_double,(double)x[4].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_19(Smoke::Stack x) {
        // QPointF currentPosition() const
        QPointF xret = ((const x_QPainterPath*)this)->QPainterPath::currentPosition();
        x[0].s_class = (void*)new QPointF(xret);
    }
    void x_20(Smoke::Stack x) {
        // void addRect(const QRectF&)
        this->QPainterPath::addRect(*(const QRectF*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_21(Smoke::Stack x) {
        // void addRect(double, double, double, double)
        this->QPainterPath::addRect((double)x[1].s_double,(double)x[2].s_double,(double)x[3].s_double,(double)x[4].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_22(Smoke::Stack x) {
        // void addEllipse(const QRectF&)
        this->QPainterPath::addEllipse(*(const QRectF*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_23(Smoke::Stack x) {
        // void addEllipse(double, double, double, double)
        this->QPainterPath::addEllipse((double)x[1].s_double,(double)x[2].s_double,(double)x[3].s_double,(double)x[4].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_24(Smoke::Stack x) {
        // void addEllipse(const QPointF&, double, double)
        this->QPainterPath::addEllipse(*(const QPointF*)x[1].s_class,(double)x[2].s_double,(double)x[3].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_25(Smoke::Stack x) {
        // void addPolygon(const QPolygonF&)
        this->QPainterPath::addPolygon(*(const QPolygonF*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_26(Smoke::Stack x) {
        // void addText(const QPointF&, const QFont&, const QString&)
        this->QPainterPath::addText(*(const QPointF*)x[1].s_class,*(const QFont*)x[2].s_class,*(const QString*)x[3].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_27(Smoke::Stack x) {
        // void addText(double, double, const QFont&, const QString&)
        this->QPainterPath::addText((double)x[1].s_double,(double)x[2].s_double,*(const QFont*)x[3].s_class,*(const QString*)x[4].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_28(Smoke::Stack x) {
        // void addPath(const QPainterPath&)
        this->QPainterPath::addPath(*(const QPainterPath*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_29(Smoke::Stack x) {
        // void addRegion(const QRegion&)
        this->QPainterPath::addRegion(*(const QRegion*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_30(Smoke::Stack x) {
        // void addRoundedRect(const QRectF&, double, double, Qt::SizeMode)
        this->QPainterPath::addRoundedRect(*(const QRectF*)x[1].s_class,(double)x[2].s_double,(double)x[3].s_double,(Qt::SizeMode)x[4].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_31(Smoke::Stack x) {
        // void addRoundedRect(double, double, double, double, double, double, Qt::SizeMode)
        this->QPainterPath::addRoundedRect((double)x[1].s_double,(double)x[2].s_double,(double)x[3].s_double,(double)x[4].s_double,(double)x[5].s_double,(double)x[6].s_double,(Qt::SizeMode)x[7].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_32(Smoke::Stack x) {
        // void addRoundRect(const QRectF&, int, int)
        this->QPainterPath::addRoundRect(*(const QRectF*)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_33(Smoke::Stack x) {
        // void addRoundRect(double, double, double, double, int, int)
        this->QPainterPath::addRoundRect((double)x[1].s_double,(double)x[2].s_double,(double)x[3].s_double,(double)x[4].s_double,(int)x[5].s_int,(int)x[6].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_34(Smoke::Stack x) {
        // void addRoundRect(const QRectF&, int)
        this->QPainterPath::addRoundRect(*(const QRectF*)x[1].s_class,(int)x[2].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_35(Smoke::Stack x) {
        // void addRoundRect(double, double, double, double, int)
        this->QPainterPath::addRoundRect((double)x[1].s_double,(double)x[2].s_double,(double)x[3].s_double,(double)x[4].s_double,(int)x[5].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_36(Smoke::Stack x) {
        // void connectPath(const QPainterPath&)
        this->QPainterPath::connectPath(*(const QPainterPath*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_37(Smoke::Stack x) {
        // bool contains(const QPointF&) const
        bool xret = ((const x_QPainterPath*)this)->QPainterPath::contains(*(const QPointF*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_38(Smoke::Stack x) {
        // bool contains(const QRectF&) const
        bool xret = ((const x_QPainterPath*)this)->QPainterPath::contains(*(const QRectF*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_39(Smoke::Stack x) {
        // bool intersects(const QRectF&) const
        bool xret = ((const x_QPainterPath*)this)->QPainterPath::intersects(*(const QRectF*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_40(Smoke::Stack x) {
        // void translate(double, double)
        this->QPainterPath::translate((double)x[1].s_double,(double)x[2].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_41(Smoke::Stack x) {
        // void translate(const QPointF&)
        this->QPainterPath::translate(*(const QPointF*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_42(Smoke::Stack x) {
        // QPainterPath translated(double, double) const
        QPainterPath xret = ((const x_QPainterPath*)this)->QPainterPath::translated((double)x[1].s_double,(double)x[2].s_double);
        x[0].s_class = (void*)new QPainterPath(xret);
    }
    void x_43(Smoke::Stack x) {
        // QPainterPath translated(const QPointF&) const
        QPainterPath xret = ((const x_QPainterPath*)this)->QPainterPath::translated(*(const QPointF*)x[1].s_class);
        x[0].s_class = (void*)new QPainterPath(xret);
    }
    void x_44(Smoke::Stack x) {
        // QRectF boundingRect() const
        QRectF xret = ((const x_QPainterPath*)this)->QPainterPath::boundingRect();
        x[0].s_class = (void*)new QRectF(xret);
    }
    void x_45(Smoke::Stack x) {
        // QRectF controlPointRect() const
        QRectF xret = ((const x_QPainterPath*)this)->QPainterPath::controlPointRect();
        x[0].s_class = (void*)new QRectF(xret);
    }
    void x_46(Smoke::Stack x) {
        // Qt::FillRule fillRule() const
        Qt::FillRule xret = ((const x_QPainterPath*)this)->QPainterPath::fillRule();
        x[0].s_enum = xret;
    }
    void x_47(Smoke::Stack x) {
        // void setFillRule(Qt::FillRule)
        this->QPainterPath::setFillRule((Qt::FillRule)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_48(Smoke::Stack x) {
        // bool isEmpty() const
        bool xret = ((const x_QPainterPath*)this)->QPainterPath::isEmpty();
        x[0].s_bool = xret;
    }
    void x_49(Smoke::Stack x) {
        // QPainterPath toReversed() const
        QPainterPath xret = ((const x_QPainterPath*)this)->QPainterPath::toReversed();
        x[0].s_class = (void*)new QPainterPath(xret);
    }
    void x_50(Smoke::Stack x) {
        // QList<QPolygonF> toSubpathPolygons(const QMatrix&) const
        QList<QPolygonF> xret = ((const x_QPainterPath*)this)->QPainterPath::toSubpathPolygons(*(const QMatrix*)x[1].s_class);
        x[0].s_class = (void*)new QList<QPolygonF>(xret);
    }
    void x_51(Smoke::Stack x) {
        // QList<QPolygonF> toFillPolygons(const QMatrix&) const
        QList<QPolygonF> xret = ((const x_QPainterPath*)this)->QPainterPath::toFillPolygons(*(const QMatrix*)x[1].s_class);
        x[0].s_class = (void*)new QList<QPolygonF>(xret);
    }
    void x_52(Smoke::Stack x) {
        // QPolygonF toFillPolygon(const QMatrix&) const
        QPolygonF xret = ((const x_QPainterPath*)this)->QPainterPath::toFillPolygon(*(const QMatrix*)x[1].s_class);
        x[0].s_class = (void*)new QPolygonF(xret);
    }
    void x_53(Smoke::Stack x) {
        // QList<QPolygonF> toSubpathPolygons(const QTransform&) const
        QList<QPolygonF> xret = ((const x_QPainterPath*)this)->QPainterPath::toSubpathPolygons(*(const QTransform*)x[1].s_class);
        x[0].s_class = (void*)new QList<QPolygonF>(xret);
    }
    void x_54(Smoke::Stack x) {
        // QList<QPolygonF> toFillPolygons(const QTransform&) const
        QList<QPolygonF> xret = ((const x_QPainterPath*)this)->QPainterPath::toFillPolygons(*(const QTransform*)x[1].s_class);
        x[0].s_class = (void*)new QList<QPolygonF>(xret);
    }
    void x_55(Smoke::Stack x) {
        // QPolygonF toFillPolygon(const QTransform&) const
        QPolygonF xret = ((const x_QPainterPath*)this)->QPainterPath::toFillPolygon(*(const QTransform*)x[1].s_class);
        x[0].s_class = (void*)new QPolygonF(xret);
    }
    void x_56(Smoke::Stack x) {
        // int elementCount() const
        int xret = ((const x_QPainterPath*)this)->QPainterPath::elementCount();
        x[0].s_int = xret;
    }
    void x_57(Smoke::Stack x) {
        // QPainterPath::Element elementAt(int) const
        QPainterPath::Element xret = ((const x_QPainterPath*)this)->QPainterPath::elementAt((int)x[1].s_int);
        x[0].s_class = (void*)new QPainterPath::Element(xret);
    }
    void x_58(Smoke::Stack x) {
        // void setElementPositionAt(int, double, double)
        this->QPainterPath::setElementPositionAt((int)x[1].s_int,(double)x[2].s_double,(double)x[3].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_59(Smoke::Stack x) {
        // double length() const
        double xret = ((const x_QPainterPath*)this)->QPainterPath::length();
        x[0].s_double = xret;
    }
    void x_60(Smoke::Stack x) {
        // double percentAtLength(double) const
        double xret = ((const x_QPainterPath*)this)->QPainterPath::percentAtLength((double)x[1].s_double);
        x[0].s_double = xret;
    }
    void x_61(Smoke::Stack x) {
        // QPointF pointAtPercent(double) const
        QPointF xret = ((const x_QPainterPath*)this)->QPainterPath::pointAtPercent((double)x[1].s_double);
        x[0].s_class = (void*)new QPointF(xret);
    }
    void x_62(Smoke::Stack x) {
        // double angleAtPercent(double) const
        double xret = ((const x_QPainterPath*)this)->QPainterPath::angleAtPercent((double)x[1].s_double);
        x[0].s_double = xret;
    }
    void x_63(Smoke::Stack x) {
        // double slopeAtPercent(double) const
        double xret = ((const x_QPainterPath*)this)->QPainterPath::slopeAtPercent((double)x[1].s_double);
        x[0].s_double = xret;
    }
    void x_64(Smoke::Stack x) {
        // bool intersects(const QPainterPath&) const
        bool xret = ((const x_QPainterPath*)this)->QPainterPath::intersects(*(const QPainterPath*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_65(Smoke::Stack x) {
        // bool contains(const QPainterPath&) const
        bool xret = ((const x_QPainterPath*)this)->QPainterPath::contains(*(const QPainterPath*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_66(Smoke::Stack x) {
        // QPainterPath united(const QPainterPath&) const
        QPainterPath xret = ((const x_QPainterPath*)this)->QPainterPath::united(*(const QPainterPath*)x[1].s_class);
        x[0].s_class = (void*)new QPainterPath(xret);
    }
    void x_67(Smoke::Stack x) {
        // QPainterPath intersected(const QPainterPath&) const
        QPainterPath xret = ((const x_QPainterPath*)this)->QPainterPath::intersected(*(const QPainterPath*)x[1].s_class);
        x[0].s_class = (void*)new QPainterPath(xret);
    }
    void x_68(Smoke::Stack x) {
        // QPainterPath subtracted(const QPainterPath&) const
        QPainterPath xret = ((const x_QPainterPath*)this)->QPainterPath::subtracted(*(const QPainterPath*)x[1].s_class);
        x[0].s_class = (void*)new QPainterPath(xret);
    }
    void x_69(Smoke::Stack x) {
        // QPainterPath subtractedInverted(const QPainterPath&) const
        QPainterPath xret = ((const x_QPainterPath*)this)->QPainterPath::subtractedInverted(*(const QPainterPath*)x[1].s_class);
        x[0].s_class = (void*)new QPainterPath(xret);
    }
    void x_70(Smoke::Stack x) {
        // QPainterPath simplified() const
        QPainterPath xret = ((const x_QPainterPath*)this)->QPainterPath::simplified();
        x[0].s_class = (void*)new QPainterPath(xret);
    }
    void x_71(Smoke::Stack x) {
        // bool operator==(const QPainterPath&) const
        bool xret = ((const x_QPainterPath*)this)->QPainterPath::operator==(*(const QPainterPath*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_72(Smoke::Stack x) {
        // bool operator!=(const QPainterPath&) const
        bool xret = ((const x_QPainterPath*)this)->QPainterPath::operator!=(*(const QPainterPath*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_73(Smoke::Stack x) {
        // QPainterPath operator&(const QPainterPath&) const
        QPainterPath xret = ((const x_QPainterPath*)this)->QPainterPath::operator&(*(const QPainterPath*)x[1].s_class);
        x[0].s_class = (void*)new QPainterPath(xret);
    }
    void x_74(Smoke::Stack x) {
        // QPainterPath operator|(const QPainterPath&) const
        QPainterPath xret = ((const x_QPainterPath*)this)->QPainterPath::operator|(*(const QPainterPath*)x[1].s_class);
        x[0].s_class = (void*)new QPainterPath(xret);
    }
    void x_75(Smoke::Stack x) {
        // QPainterPath operator+(const QPainterPath&) const
        QPainterPath xret = ((const x_QPainterPath*)this)->QPainterPath::operator+(*(const QPainterPath*)x[1].s_class);
        x[0].s_class = (void*)new QPainterPath(xret);
    }
    void x_76(Smoke::Stack x) {
        // QPainterPath operator-(const QPainterPath&) const
        QPainterPath xret = ((const x_QPainterPath*)this)->QPainterPath::operator-(*(const QPainterPath*)x[1].s_class);
        x[0].s_class = (void*)new QPainterPath(xret);
    }
    void x_77(Smoke::Stack x) {
        // QPainterPath& operator&=(const QPainterPath&)
        QPainterPath& xret = this->QPainterPath::operator&=(*(const QPainterPath*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    void x_78(Smoke::Stack x) {
        // QPainterPath& operator|=(const QPainterPath&)
        QPainterPath& xret = this->QPainterPath::operator|=(*(const QPainterPath*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    void x_79(Smoke::Stack x) {
        // QPainterPath& operator+=(const QPainterPath&)
        QPainterPath& xret = this->QPainterPath::operator+=(*(const QPainterPath*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    void x_80(Smoke::Stack x) {
        // QPainterPath& operator-=(const QPainterPath&)
        QPainterPath& xret = this->QPainterPath::operator-=(*(const QPainterPath*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    void x_81(Smoke::Stack x) {
        // void addRoundedRect(const QRectF&, double, double)
        this->QPainterPath::addRoundedRect(*(const QRectF*)x[1].s_class,(double)x[2].s_double,(double)x[3].s_double,(Qt::SizeMode)Qt::AbsoluteSize);
        (void)x; // noop (for compiler warning)
    }
    void x_82(Smoke::Stack x) {
        // void addRoundedRect(double, double, double, double, double, double)
        this->QPainterPath::addRoundedRect((double)x[1].s_double,(double)x[2].s_double,(double)x[3].s_double,(double)x[4].s_double,(double)x[5].s_double,(double)x[6].s_double,(Qt::SizeMode)Qt::AbsoluteSize);
        (void)x; // noop (for compiler warning)
    }
    void x_83(Smoke::Stack x) {
        // QList<QPolygonF> toSubpathPolygons() const
        QList<QPolygonF> xret = ((const x_QPainterPath*)this)->QPainterPath::toSubpathPolygons((const QMatrix&)QMatrix());
        x[0].s_class = (void*)new QList<QPolygonF>(xret);
    }
    void x_84(Smoke::Stack x) {
        // QList<QPolygonF> toFillPolygons() const
        QList<QPolygonF> xret = ((const x_QPainterPath*)this)->QPainterPath::toFillPolygons((const QMatrix&)QMatrix());
        x[0].s_class = (void*)new QList<QPolygonF>(xret);
    }
    void x_85(Smoke::Stack x) {
        // QPolygonF toFillPolygon() const
        QPolygonF xret = ((const x_QPainterPath*)this)->QPainterPath::toFillPolygon((const QMatrix&)QMatrix());
        x[0].s_class = (void*)new QPolygonF(xret);
    }
    static void x_86(Smoke::Stack x) {
        x[0].s_enum = (long)QPainterPath::MoveToElement;
    }
    static void x_87(Smoke::Stack x) {
        x[0].s_enum = (long)QPainterPath::LineToElement;
    }
    static void x_88(Smoke::Stack x) {
        x[0].s_enum = (long)QPainterPath::CurveToElement;
    }
    static void x_89(Smoke::Stack x) {
        x[0].s_enum = (long)QPainterPath::CurveToDataElement;
    }
    static void xenum_operation(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
        switch(xtype) {
        case 782: //QPainterPath::ElementType
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QPainterPath::ElementType;
                    break;
                case Smoke::EnumDelete:
                    delete (QPainterPath::ElementType*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QPainterPath::ElementType*)xdata = (QPainterPath::ElementType)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QPainterPath::ElementType*)xdata;
                    break;
            }
            break;
        }
    }
    ~x_QPainterPath() { this->_binding->deleted(295, (void*)this); }
};
void xenum_QPainterPath(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
    x_QPainterPath::xenum_operation(xop, xtype, xdata, xvalue);
}
void xcall_QPainterPath(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QPainterPath *xself = (x_QPainterPath*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: x_QPainterPath::x_1(args);	break;
        case 2: x_QPainterPath::x_2(args);	break;
        case 3: x_QPainterPath::x_3(args);	break;
        case 4: xself->x_4(args);	break;
        case 5: xself->x_5(args);	break;
        case 6: xself->x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: xself->x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: xself->x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: xself->x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: xself->x_30(args);	break;
        case 31: xself->x_31(args);	break;
        case 32: xself->x_32(args);	break;
        case 33: xself->x_33(args);	break;
        case 34: xself->x_34(args);	break;
        case 35: xself->x_35(args);	break;
        case 36: xself->x_36(args);	break;
        case 37: xself->x_37(args);	break;
        case 38: xself->x_38(args);	break;
        case 39: xself->x_39(args);	break;
        case 40: xself->x_40(args);	break;
        case 41: xself->x_41(args);	break;
        case 42: xself->x_42(args);	break;
        case 43: xself->x_43(args);	break;
        case 44: xself->x_44(args);	break;
        case 45: xself->x_45(args);	break;
        case 46: xself->x_46(args);	break;
        case 47: xself->x_47(args);	break;
        case 48: xself->x_48(args);	break;
        case 49: xself->x_49(args);	break;
        case 50: xself->x_50(args);	break;
        case 51: xself->x_51(args);	break;
        case 52: xself->x_52(args);	break;
        case 53: xself->x_53(args);	break;
        case 54: xself->x_54(args);	break;
        case 55: xself->x_55(args);	break;
        case 56: xself->x_56(args);	break;
        case 57: xself->x_57(args);	break;
        case 58: xself->x_58(args);	break;
        case 59: xself->x_59(args);	break;
        case 60: xself->x_60(args);	break;
        case 61: xself->x_61(args);	break;
        case 62: xself->x_62(args);	break;
        case 63: xself->x_63(args);	break;
        case 64: xself->x_64(args);	break;
        case 65: xself->x_65(args);	break;
        case 66: xself->x_66(args);	break;
        case 67: xself->x_67(args);	break;
        case 68: xself->x_68(args);	break;
        case 69: xself->x_69(args);	break;
        case 70: xself->x_70(args);	break;
        case 71: xself->x_71(args);	break;
        case 72: xself->x_72(args);	break;
        case 73: xself->x_73(args);	break;
        case 74: xself->x_74(args);	break;
        case 75: xself->x_75(args);	break;
        case 76: xself->x_76(args);	break;
        case 77: xself->x_77(args);	break;
        case 78: xself->x_78(args);	break;
        case 79: xself->x_79(args);	break;
        case 80: xself->x_80(args);	break;
        case 81: xself->x_81(args);	break;
        case 82: xself->x_82(args);	break;
        case 83: xself->x_83(args);	break;
        case 84: xself->x_84(args);	break;
        case 85: xself->x_85(args);	break;
        case 86: x_QPainterPath::x_86(args);	break;
        case 87: x_QPainterPath::x_87(args);	break;
        case 88: x_QPainterPath::x_88(args);	break;
        case 89: x_QPainterPath::x_89(args);	break;
        case 90: delete (QPainterPath*)xself;	break;
    }
}
class x_QPainterPath__Element : public QPainterPath::Element {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // bool isMoveTo() const
        bool xret = ((const x_QPainterPath__Element*)this)->QPainterPath::Element::isMoveTo();
        x[0].s_bool = xret;
    }
    void x_2(Smoke::Stack x) {
        // bool isLineTo() const
        bool xret = ((const x_QPainterPath__Element*)this)->QPainterPath::Element::isLineTo();
        x[0].s_bool = xret;
    }
    void x_3(Smoke::Stack x) {
        // bool isCurveTo() const
        bool xret = ((const x_QPainterPath__Element*)this)->QPainterPath::Element::isCurveTo();
        x[0].s_bool = xret;
    }
    void x_4(Smoke::Stack x) {
        // QPointF operator QPointF() const
        QPointF xret = ((const x_QPainterPath__Element*)this)->QPainterPath::Element::operator QPointF();
        x[0].s_class = (void*)new QPointF(xret);
    }
    void x_5(Smoke::Stack x) {
        // bool operator==(const QPainterPath::Element&) const
        bool xret = ((const x_QPainterPath__Element*)this)->QPainterPath::Element::operator==(*(const QPainterPath::Element*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_6(Smoke::Stack x) {
        // bool operator!=(const QPainterPath::Element&) const
        bool xret = ((const x_QPainterPath__Element*)this)->QPainterPath::Element::operator!=(*(const QPainterPath::Element*)x[1].s_class);
        x[0].s_bool = xret;
    }
    static void x_7(Smoke::Stack x) {
        // QPainterPath::Element* Element()
        x_QPainterPath__Element* xret = new x_QPainterPath__Element();
        x[0].s_class = (void*)xret;
    }
    explicit x_QPainterPath__Element() : Element() {}
    static void x_8(Smoke::Stack x) {
        // QPainterPath::Element* Element(const QPainterPath::Element&)
        x_QPainterPath__Element* xret = new x_QPainterPath__Element(*(const QPainterPath::Element*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QPainterPath__Element(const QPainterPath::Element& x1) : Element(x1) {}
    void x_9(Smoke::Stack x) {
        // double x
        x[0].s_double = this->QPainterPath::Element::x;
    }
    void x_10(Smoke::Stack x) {
        // double x=
        this->QPainterPath::Element::x = (double)x[1].s_double;
    }
    void x_11(Smoke::Stack x) {
        // double y
        x[0].s_double = this->QPainterPath::Element::y;
    }
    void x_12(Smoke::Stack x) {
        // double y=
        this->QPainterPath::Element::y = (double)x[1].s_double;
    }
    void x_13(Smoke::Stack x) {
        // QPainterPath::ElementType type
        x[0].s_enum = this->QPainterPath::Element::type;
    }
    void x_14(Smoke::Stack x) {
        // QPainterPath::ElementType type=
        this->QPainterPath::Element::type = (QPainterPath::ElementType)x[1].s_enum;
    }
    ~x_QPainterPath__Element() { this->_binding->deleted(296, (void*)this); }
};
void xcall_QPainterPath__Element(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QPainterPath__Element *xself = (x_QPainterPath__Element*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: xself->x_3(args);	break;
        case 4: xself->x_4(args);	break;
        case 5: xself->x_5(args);	break;
        case 6: xself->x_6(args);	break;
        case 7: x_QPainterPath__Element::x_7(args);	break;
        case 8: x_QPainterPath__Element::x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: delete (QPainterPath::Element*)xself;	break;
    }
}
class x_QPainterPathStroker : public QPainterPathStroker {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    static void x_1(Smoke::Stack x) {
        // QPainterPathStroker* QPainterPathStroker()
        x_QPainterPathStroker* xret = new x_QPainterPathStroker();
        x[0].s_class = (void*)xret;
    }
    explicit x_QPainterPathStroker() : QPainterPathStroker() {}
    void x_2(Smoke::Stack x) {
        // void setWidth(double)
        this->QPainterPathStroker::setWidth((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_3(Smoke::Stack x) {
        // double width() const
        double xret = ((const x_QPainterPathStroker*)this)->QPainterPathStroker::width();
        x[0].s_double = xret;
    }
    void x_4(Smoke::Stack x) {
        // void setCapStyle(Qt::PenCapStyle)
        this->QPainterPathStroker::setCapStyle((Qt::PenCapStyle)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_5(Smoke::Stack x) {
        // Qt::PenCapStyle capStyle() const
        Qt::PenCapStyle xret = ((const x_QPainterPathStroker*)this)->QPainterPathStroker::capStyle();
        x[0].s_enum = xret;
    }
    void x_6(Smoke::Stack x) {
        // void setJoinStyle(Qt::PenJoinStyle)
        this->QPainterPathStroker::setJoinStyle((Qt::PenJoinStyle)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_7(Smoke::Stack x) {
        // Qt::PenJoinStyle joinStyle() const
        Qt::PenJoinStyle xret = ((const x_QPainterPathStroker*)this)->QPainterPathStroker::joinStyle();
        x[0].s_enum = xret;
    }
    void x_8(Smoke::Stack x) {
        // void setMiterLimit(double)
        this->QPainterPathStroker::setMiterLimit((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_9(Smoke::Stack x) {
        // double miterLimit() const
        double xret = ((const x_QPainterPathStroker*)this)->QPainterPathStroker::miterLimit();
        x[0].s_double = xret;
    }
    void x_10(Smoke::Stack x) {
        // void setCurveThreshold(double)
        this->QPainterPathStroker::setCurveThreshold((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_11(Smoke::Stack x) {
        // double curveThreshold() const
        double xret = ((const x_QPainterPathStroker*)this)->QPainterPathStroker::curveThreshold();
        x[0].s_double = xret;
    }
    void x_12(Smoke::Stack x) {
        // void setDashPattern(Qt::PenStyle)
        this->QPainterPathStroker::setDashPattern((Qt::PenStyle)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_13(Smoke::Stack x) {
        // void setDashPattern(const QVector<double>&)
        this->QPainterPathStroker::setDashPattern(*(const QVector<double>*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_14(Smoke::Stack x) {
        // QVector<double> dashPattern() const
        QVector<double> xret = ((const x_QPainterPathStroker*)this)->QPainterPathStroker::dashPattern();
        x[0].s_class = (void*)new QVector<double>(xret);
    }
    void x_15(Smoke::Stack x) {
        // void setDashOffset(double)
        this->QPainterPathStroker::setDashOffset((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_16(Smoke::Stack x) {
        // double dashOffset() const
        double xret = ((const x_QPainterPathStroker*)this)->QPainterPathStroker::dashOffset();
        x[0].s_double = xret;
    }
    void x_17(Smoke::Stack x) {
        // QPainterPath createStroke(const QPainterPath&) const
        QPainterPath xret = ((const x_QPainterPathStroker*)this)->QPainterPathStroker::createStroke(*(const QPainterPath*)x[1].s_class);
        x[0].s_class = (void*)new QPainterPath(xret);
    }
    ~x_QPainterPathStroker() { this->_binding->deleted(297, (void*)this); }
};
void xcall_QPainterPathStroker(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QPainterPathStroker *xself = (x_QPainterPathStroker*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: x_QPainterPathStroker::x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: xself->x_3(args);	break;
        case 4: xself->x_4(args);	break;
        case 5: xself->x_5(args);	break;
        case 6: xself->x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: xself->x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: delete (QPainterPathStroker*)xself;	break;
    }
}
class x_QPalette : public QPalette {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    static void x_1(Smoke::Stack x) {
        // QPalette* QPalette()
        x_QPalette* xret = new x_QPalette();
        x[0].s_class = (void*)xret;
    }
    explicit x_QPalette() : QPalette() {}
    static void x_2(Smoke::Stack x) {
        // QPalette* QPalette(const QColor&)
        x_QPalette* xret = new x_QPalette(*(const QColor*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QPalette(const QColor& x1) : QPalette(x1) {}
    static void x_3(Smoke::Stack x) {
        // QPalette* QPalette(Qt::GlobalColor)
        x_QPalette* xret = new x_QPalette((Qt::GlobalColor)x[1].s_enum);
        x[0].s_class = (void*)xret;
    }
    explicit x_QPalette(Qt::GlobalColor x1) : QPalette(x1) {}
    static void x_4(Smoke::Stack x) {
        // QPalette* QPalette(const QColor&, const QColor&)
        x_QPalette* xret = new x_QPalette(*(const QColor*)x[1].s_class,*(const QColor*)x[2].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QPalette(const QColor& x1, const QColor& x2) : QPalette(x1, x2) {}
    static void x_5(Smoke::Stack x) {
        // QPalette* QPalette(const QBrush&, const QBrush&, const QBrush&, const QBrush&, const QBrush&, const QBrush&, const QBrush&, const QBrush&, const QBrush&)
        x_QPalette* xret = new x_QPalette(*(const QBrush*)x[1].s_class,*(const QBrush*)x[2].s_class,*(const QBrush*)x[3].s_class,*(const QBrush*)x[4].s_class,*(const QBrush*)x[5].s_class,*(const QBrush*)x[6].s_class,*(const QBrush*)x[7].s_class,*(const QBrush*)x[8].s_class,*(const QBrush*)x[9].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QPalette(const QBrush& x1, const QBrush& x2, const QBrush& x3, const QBrush& x4, const QBrush& x5, const QBrush& x6, const QBrush& x7, const QBrush& x8, const QBrush& x9) : QPalette(x1, x2, x3, x4, x5, x6, x7, x8, x9) {}
    static void x_6(Smoke::Stack x) {
        // QPalette* QPalette(const QColor&, const QColor&, const QColor&, const QColor&, const QColor&, const QColor&, const QColor&)
        x_QPalette* xret = new x_QPalette(*(const QColor*)x[1].s_class,*(const QColor*)x[2].s_class,*(const QColor*)x[3].s_class,*(const QColor*)x[4].s_class,*(const QColor*)x[5].s_class,*(const QColor*)x[6].s_class,*(const QColor*)x[7].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QPalette(const QColor& x1, const QColor& x2, const QColor& x3, const QColor& x4, const QColor& x5, const QColor& x6, const QColor& x7) : QPalette(x1, x2, x3, x4, x5, x6, x7) {}
    static void x_7(Smoke::Stack x) {
        // QPalette* QPalette(const QPalette&)
        x_QPalette* xret = new x_QPalette(*(const QPalette*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QPalette(const QPalette& x1) : QPalette(x1) {}
    void x_8(Smoke::Stack x) {
        // QPalette& operator=(const QPalette&)
        QPalette& xret = this->QPalette::operator=(*(const QPalette*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    void x_9(Smoke::Stack x) {
        // void swap(QPalette&)
        this->QPalette::swap(*(QPalette*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_10(Smoke::Stack x) {
        // QVariant operator QVariant() const
        QVariant xret = ((const x_QPalette*)this)->QPalette::operator QVariant();
        x[0].s_class = (void*)new QVariant(xret);
    }
    void x_11(Smoke::Stack x) {
        // QPalette::ColorGroup currentColorGroup() const
        QPalette::ColorGroup xret = ((const x_QPalette*)this)->QPalette::currentColorGroup();
        x[0].s_enum = xret;
    }
    void x_12(Smoke::Stack x) {
        // void setCurrentColorGroup(QPalette::ColorGroup)
        this->QPalette::setCurrentColorGroup((QPalette::ColorGroup)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_13(Smoke::Stack x) {
        // const QColor& color(QPalette::ColorGroup, QPalette::ColorRole) const
        const QColor& xret = ((const x_QPalette*)this)->QPalette::color((QPalette::ColorGroup)x[1].s_enum,(QPalette::ColorRole)x[2].s_enum);
        x[0].s_class = (void*)&xret;
    }
    void x_14(Smoke::Stack x) {
        // const QBrush& brush(QPalette::ColorGroup, QPalette::ColorRole) const
        const QBrush& xret = ((const x_QPalette*)this)->QPalette::brush((QPalette::ColorGroup)x[1].s_enum,(QPalette::ColorRole)x[2].s_enum);
        x[0].s_class = (void*)&xret;
    }
    void x_15(Smoke::Stack x) {
        // void setColor(QPalette::ColorGroup, QPalette::ColorRole, const QColor&)
        this->QPalette::setColor((QPalette::ColorGroup)x[1].s_enum,(QPalette::ColorRole)x[2].s_enum,*(const QColor*)x[3].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_16(Smoke::Stack x) {
        // void setColor(QPalette::ColorRole, const QColor&)
        this->QPalette::setColor((QPalette::ColorRole)x[1].s_enum,*(const QColor*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_17(Smoke::Stack x) {
        // void setBrush(QPalette::ColorRole, const QBrush&)
        this->QPalette::setBrush((QPalette::ColorRole)x[1].s_enum,*(const QBrush*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_18(Smoke::Stack x) {
        // bool isBrushSet(QPalette::ColorGroup, QPalette::ColorRole) const
        bool xret = ((const x_QPalette*)this)->QPalette::isBrushSet((QPalette::ColorGroup)x[1].s_enum,(QPalette::ColorRole)x[2].s_enum);
        x[0].s_bool = xret;
    }
    void x_19(Smoke::Stack x) {
        // void setBrush(QPalette::ColorGroup, QPalette::ColorRole, const QBrush&)
        this->QPalette::setBrush((QPalette::ColorGroup)x[1].s_enum,(QPalette::ColorRole)x[2].s_enum,*(const QBrush*)x[3].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_20(Smoke::Stack x) {
        // void setColorGroup(QPalette::ColorGroup, const QBrush&, const QBrush&, const QBrush&, const QBrush&, const QBrush&, const QBrush&, const QBrush&, const QBrush&, const QBrush&)
        this->QPalette::setColorGroup((QPalette::ColorGroup)x[1].s_enum,*(const QBrush*)x[2].s_class,*(const QBrush*)x[3].s_class,*(const QBrush*)x[4].s_class,*(const QBrush*)x[5].s_class,*(const QBrush*)x[6].s_class,*(const QBrush*)x[7].s_class,*(const QBrush*)x[8].s_class,*(const QBrush*)x[9].s_class,*(const QBrush*)x[10].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_21(Smoke::Stack x) {
        // bool isEqual(QPalette::ColorGroup, QPalette::ColorGroup) const
        bool xret = ((const x_QPalette*)this)->QPalette::isEqual((QPalette::ColorGroup)x[1].s_enum,(QPalette::ColorGroup)x[2].s_enum);
        x[0].s_bool = xret;
    }
    void x_22(Smoke::Stack x) {
        // const QColor& color(QPalette::ColorRole) const
        const QColor& xret = ((const x_QPalette*)this)->QPalette::color((QPalette::ColorRole)x[1].s_enum);
        x[0].s_class = (void*)&xret;
    }
    void x_23(Smoke::Stack x) {
        // const QBrush& brush(QPalette::ColorRole) const
        const QBrush& xret = ((const x_QPalette*)this)->QPalette::brush((QPalette::ColorRole)x[1].s_enum);
        x[0].s_class = (void*)&xret;
    }
    void x_24(Smoke::Stack x) {
        // const QBrush& foreground() const
        const QBrush& xret = ((const x_QPalette*)this)->QPalette::foreground();
        x[0].s_class = (void*)&xret;
    }
    void x_25(Smoke::Stack x) {
        // const QBrush& windowText() const
        const QBrush& xret = ((const x_QPalette*)this)->QPalette::windowText();
        x[0].s_class = (void*)&xret;
    }
    void x_26(Smoke::Stack x) {
        // const QBrush& button() const
        const QBrush& xret = ((const x_QPalette*)this)->QPalette::button();
        x[0].s_class = (void*)&xret;
    }
    void x_27(Smoke::Stack x) {
        // const QBrush& light() const
        const QBrush& xret = ((const x_QPalette*)this)->QPalette::light();
        x[0].s_class = (void*)&xret;
    }
    void x_28(Smoke::Stack x) {
        // const QBrush& dark() const
        const QBrush& xret = ((const x_QPalette*)this)->QPalette::dark();
        x[0].s_class = (void*)&xret;
    }
    void x_29(Smoke::Stack x) {
        // const QBrush& mid() const
        const QBrush& xret = ((const x_QPalette*)this)->QPalette::mid();
        x[0].s_class = (void*)&xret;
    }
    void x_30(Smoke::Stack x) {
        // const QBrush& text() const
        const QBrush& xret = ((const x_QPalette*)this)->QPalette::text();
        x[0].s_class = (void*)&xret;
    }
    void x_31(Smoke::Stack x) {
        // const QBrush& base() const
        const QBrush& xret = ((const x_QPalette*)this)->QPalette::base();
        x[0].s_class = (void*)&xret;
    }
    void x_32(Smoke::Stack x) {
        // const QBrush& alternateBase() const
        const QBrush& xret = ((const x_QPalette*)this)->QPalette::alternateBase();
        x[0].s_class = (void*)&xret;
    }
    void x_33(Smoke::Stack x) {
        // const QBrush& toolTipBase() const
        const QBrush& xret = ((const x_QPalette*)this)->QPalette::toolTipBase();
        x[0].s_class = (void*)&xret;
    }
    void x_34(Smoke::Stack x) {
        // const QBrush& toolTipText() const
        const QBrush& xret = ((const x_QPalette*)this)->QPalette::toolTipText();
        x[0].s_class = (void*)&xret;
    }
    void x_35(Smoke::Stack x) {
        // const QBrush& background() const
        const QBrush& xret = ((const x_QPalette*)this)->QPalette::background();
        x[0].s_class = (void*)&xret;
    }
    void x_36(Smoke::Stack x) {
        // const QBrush& window() const
        const QBrush& xret = ((const x_QPalette*)this)->QPalette::window();
        x[0].s_class = (void*)&xret;
    }
    void x_37(Smoke::Stack x) {
        // const QBrush& midlight() const
        const QBrush& xret = ((const x_QPalette*)this)->QPalette::midlight();
        x[0].s_class = (void*)&xret;
    }
    void x_38(Smoke::Stack x) {
        // const QBrush& brightText() const
        const QBrush& xret = ((const x_QPalette*)this)->QPalette::brightText();
        x[0].s_class = (void*)&xret;
    }
    void x_39(Smoke::Stack x) {
        // const QBrush& buttonText() const
        const QBrush& xret = ((const x_QPalette*)this)->QPalette::buttonText();
        x[0].s_class = (void*)&xret;
    }
    void x_40(Smoke::Stack x) {
        // const QBrush& shadow() const
        const QBrush& xret = ((const x_QPalette*)this)->QPalette::shadow();
        x[0].s_class = (void*)&xret;
    }
    void x_41(Smoke::Stack x) {
        // const QBrush& highlight() const
        const QBrush& xret = ((const x_QPalette*)this)->QPalette::highlight();
        x[0].s_class = (void*)&xret;
    }
    void x_42(Smoke::Stack x) {
        // const QBrush& highlightedText() const
        const QBrush& xret = ((const x_QPalette*)this)->QPalette::highlightedText();
        x[0].s_class = (void*)&xret;
    }
    void x_43(Smoke::Stack x) {
        // const QBrush& link() const
        const QBrush& xret = ((const x_QPalette*)this)->QPalette::link();
        x[0].s_class = (void*)&xret;
    }
    void x_44(Smoke::Stack x) {
        // const QBrush& linkVisited() const
        const QBrush& xret = ((const x_QPalette*)this)->QPalette::linkVisited();
        x[0].s_class = (void*)&xret;
    }
    void x_45(Smoke::Stack x) {
        // bool operator==(const QPalette&) const
        bool xret = ((const x_QPalette*)this)->QPalette::operator==(*(const QPalette*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_46(Smoke::Stack x) {
        // bool operator!=(const QPalette&) const
        bool xret = ((const x_QPalette*)this)->QPalette::operator!=(*(const QPalette*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_47(Smoke::Stack x) {
        // bool isCopyOf(const QPalette&) const
        bool xret = ((const x_QPalette*)this)->QPalette::isCopyOf(*(const QPalette*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_48(Smoke::Stack x) {
        // long long cacheKey() const
        long long xret = ((const x_QPalette*)this)->QPalette::cacheKey();
        x[0].s_class = (void*)new long long(xret);
    }
    void x_49(Smoke::Stack x) {
        // QPalette resolve(const QPalette&) const
        QPalette xret = ((const x_QPalette*)this)->QPalette::resolve(*(const QPalette*)x[1].s_class);
        x[0].s_class = (void*)new QPalette(xret);
    }
    void x_50(Smoke::Stack x) {
        // unsigned int resolve() const
        unsigned int xret = ((const x_QPalette*)this)->QPalette::resolve();
        x[0].s_uint = xret;
    }
    void x_51(Smoke::Stack x) {
        // void resolve(unsigned int)
        this->QPalette::resolve((unsigned int)x[1].s_uint);
        (void)x; // noop (for compiler warning)
    }
    static void x_52(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QPalette::staticMetaObject;
    }
    static void x_53(Smoke::Stack x) {
        x[0].s_enum = (long)QPalette::Active;
    }
    static void x_54(Smoke::Stack x) {
        x[0].s_enum = (long)QPalette::Disabled;
    }
    static void x_55(Smoke::Stack x) {
        x[0].s_enum = (long)QPalette::Inactive;
    }
    static void x_56(Smoke::Stack x) {
        x[0].s_enum = (long)QPalette::NColorGroups;
    }
    static void x_57(Smoke::Stack x) {
        x[0].s_enum = (long)QPalette::Current;
    }
    static void x_58(Smoke::Stack x) {
        x[0].s_enum = (long)QPalette::All;
    }
    static void x_59(Smoke::Stack x) {
        x[0].s_enum = (long)QPalette::Normal;
    }
    static void x_60(Smoke::Stack x) {
        x[0].s_enum = (long)QPalette::WindowText;
    }
    static void x_61(Smoke::Stack x) {
        x[0].s_enum = (long)QPalette::Button;
    }
    static void x_62(Smoke::Stack x) {
        x[0].s_enum = (long)QPalette::Light;
    }
    static void x_63(Smoke::Stack x) {
        x[0].s_enum = (long)QPalette::Midlight;
    }
    static void x_64(Smoke::Stack x) {
        x[0].s_enum = (long)QPalette::Dark;
    }
    static void x_65(Smoke::Stack x) {
        x[0].s_enum = (long)QPalette::Mid;
    }
    static void x_66(Smoke::Stack x) {
        x[0].s_enum = (long)QPalette::Text;
    }
    static void x_67(Smoke::Stack x) {
        x[0].s_enum = (long)QPalette::BrightText;
    }
    static void x_68(Smoke::Stack x) {
        x[0].s_enum = (long)QPalette::ButtonText;
    }
    static void x_69(Smoke::Stack x) {
        x[0].s_enum = (long)QPalette::Base;
    }
    static void x_70(Smoke::Stack x) {
        x[0].s_enum = (long)QPalette::Window;
    }
    static void x_71(Smoke::Stack x) {
        x[0].s_enum = (long)QPalette::Shadow;
    }
    static void x_72(Smoke::Stack x) {
        x[0].s_enum = (long)QPalette::Highlight;
    }
    static void x_73(Smoke::Stack x) {
        x[0].s_enum = (long)QPalette::HighlightedText;
    }
    static void x_74(Smoke::Stack x) {
        x[0].s_enum = (long)QPalette::Link;
    }
    static void x_75(Smoke::Stack x) {
        x[0].s_enum = (long)QPalette::LinkVisited;
    }
    static void x_76(Smoke::Stack x) {
        x[0].s_enum = (long)QPalette::AlternateBase;
    }
    static void x_77(Smoke::Stack x) {
        x[0].s_enum = (long)QPalette::NoRole;
    }
    static void x_78(Smoke::Stack x) {
        x[0].s_enum = (long)QPalette::ToolTipBase;
    }
    static void x_79(Smoke::Stack x) {
        x[0].s_enum = (long)QPalette::ToolTipText;
    }
    static void x_80(Smoke::Stack x) {
        x[0].s_enum = (long)QPalette::NColorRoles;
    }
    static void x_81(Smoke::Stack x) {
        x[0].s_enum = (long)QPalette::Foreground;
    }
    static void x_82(Smoke::Stack x) {
        x[0].s_enum = (long)QPalette::Background;
    }
    static void xenum_operation(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
        switch(xtype) {
        case 793: //QPalette::ColorGroup
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QPalette::ColorGroup;
                    break;
                case Smoke::EnumDelete:
                    delete (QPalette::ColorGroup*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QPalette::ColorGroup*)xdata = (QPalette::ColorGroup)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QPalette::ColorGroup*)xdata;
                    break;
            }
            break;
        case 794: //QPalette::ColorRole
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QPalette::ColorRole;
                    break;
                case Smoke::EnumDelete:
                    delete (QPalette::ColorRole*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QPalette::ColorRole*)xdata = (QPalette::ColorRole)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QPalette::ColorRole*)xdata;
                    break;
            }
            break;
        }
    }
    ~x_QPalette() { this->_binding->deleted(298, (void*)this); }
};
void xenum_QPalette(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
    x_QPalette::xenum_operation(xop, xtype, xdata, xvalue);
}
void xcall_QPalette(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QPalette *xself = (x_QPalette*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: x_QPalette::x_1(args);	break;
        case 2: x_QPalette::x_2(args);	break;
        case 3: x_QPalette::x_3(args);	break;
        case 4: x_QPalette::x_4(args);	break;
        case 5: x_QPalette::x_5(args);	break;
        case 6: x_QPalette::x_6(args);	break;
        case 7: x_QPalette::x_7(args);	break;
        case 8: xself->x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: xself->x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: xself->x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: xself->x_30(args);	break;
        case 31: xself->x_31(args);	break;
        case 32: xself->x_32(args);	break;
        case 33: xself->x_33(args);	break;
        case 34: xself->x_34(args);	break;
        case 35: xself->x_35(args);	break;
        case 36: xself->x_36(args);	break;
        case 37: xself->x_37(args);	break;
        case 38: xself->x_38(args);	break;
        case 39: xself->x_39(args);	break;
        case 40: xself->x_40(args);	break;
        case 41: xself->x_41(args);	break;
        case 42: xself->x_42(args);	break;
        case 43: xself->x_43(args);	break;
        case 44: xself->x_44(args);	break;
        case 45: xself->x_45(args);	break;
        case 46: xself->x_46(args);	break;
        case 47: xself->x_47(args);	break;
        case 48: xself->x_48(args);	break;
        case 49: xself->x_49(args);	break;
        case 50: xself->x_50(args);	break;
        case 51: xself->x_51(args);	break;
        case 52: x_QPalette::x_52(args);	break;
        case 53: x_QPalette::x_53(args);	break;
        case 54: x_QPalette::x_54(args);	break;
        case 55: x_QPalette::x_55(args);	break;
        case 56: x_QPalette::x_56(args);	break;
        case 57: x_QPalette::x_57(args);	break;
        case 58: x_QPalette::x_58(args);	break;
        case 59: x_QPalette::x_59(args);	break;
        case 60: x_QPalette::x_60(args);	break;
        case 61: x_QPalette::x_61(args);	break;
        case 62: x_QPalette::x_62(args);	break;
        case 63: x_QPalette::x_63(args);	break;
        case 64: x_QPalette::x_64(args);	break;
        case 65: x_QPalette::x_65(args);	break;
        case 66: x_QPalette::x_66(args);	break;
        case 67: x_QPalette::x_67(args);	break;
        case 68: x_QPalette::x_68(args);	break;
        case 69: x_QPalette::x_69(args);	break;
        case 70: x_QPalette::x_70(args);	break;
        case 71: x_QPalette::x_71(args);	break;
        case 72: x_QPalette::x_72(args);	break;
        case 73: x_QPalette::x_73(args);	break;
        case 74: x_QPalette::x_74(args);	break;
        case 75: x_QPalette::x_75(args);	break;
        case 76: x_QPalette::x_76(args);	break;
        case 77: x_QPalette::x_77(args);	break;
        case 78: x_QPalette::x_78(args);	break;
        case 79: x_QPalette::x_79(args);	break;
        case 80: x_QPalette::x_80(args);	break;
        case 81: x_QPalette::x_81(args);	break;
        case 82: x_QPalette::x_82(args);	break;
        case 83: delete (QPalette*)xself;	break;
    }
}
class x_QPanGesture : public QPanGesture, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPanGesture*>(this))) {
            const QMetaObject* xret = ((const x_QPanGesture*)this)->QPanGesture::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QPanGesture*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPanGesture*>(this))) {
            void* xret = this->QPanGesture::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QPanGesture::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QPanGesture::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_5(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPanGesture*>(this))) {
            int xret = this->QPanGesture::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_6(Smoke::Stack x) {
        // QPanGesture* QPanGesture(QObject*)
        x_QPanGesture* xret = new x_QPanGesture((QObject*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QPanGesture(QObject* x1) : QPanGesture(x1) {}
    void x_7(Smoke::Stack x) {
        // QPointF lastOffset() const
        QPointF xret = ((const x_QPanGesture*)this)->QPanGesture::lastOffset();
        x[0].s_class = (void*)new QPointF(xret);
    }
    void x_8(Smoke::Stack x) {
        // QPointF offset() const
        QPointF xret = ((const x_QPanGesture*)this)->QPanGesture::offset();
        x[0].s_class = (void*)new QPointF(xret);
    }
    void x_9(Smoke::Stack x) {
        // QPointF delta() const
        QPointF xret = ((const x_QPanGesture*)this)->QPanGesture::delta();
        x[0].s_class = (void*)new QPointF(xret);
    }
    void x_10(Smoke::Stack x) {
        // double acceleration() const
        double xret = ((const x_QPanGesture*)this)->QPanGesture::acceleration();
        x[0].s_double = xret;
    }
    void x_11(Smoke::Stack x) {
        // void setLastOffset(const QPointF&)
        this->QPanGesture::setLastOffset(*(const QPointF*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_12(Smoke::Stack x) {
        // void setOffset(const QPointF&)
        this->QPanGesture::setOffset(*(const QPointF*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_13(Smoke::Stack x) {
        // void setAcceleration(double)
        this->QPanGesture::setAcceleration((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    static void x_14(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QPanGesture::tr((const char*)x[1].s_class,(const char*)0,(int)-1);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_15(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QPanGesture::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)-1);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_16(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QPanGesture::trUtf8((const char*)x[1].s_class,(const char*)0,(int)-1);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_17(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QPanGesture::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)-1);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_18(Smoke::Stack x) {
        // QPanGesture* QPanGesture()
        x_QPanGesture* xret = new x_QPanGesture((QObject*)0);
        x[0].s_class = (void*)xret;
    }
    static void x_19(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QPanGesture::staticMetaObject;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(13194, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QPanGesture::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(13195, (void*)this, x)) return (void*)x[0].s_class;
        return this->QPanGesture::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(13198, (void*)this, x)) return (int)x[0].s_int;
        return this->QPanGesture::qt_metacall(x1, x2, x3);
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(11926, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(11927, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(11966, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(11967, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(11968, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const QMetaMethod& x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)&x1;
        if (this->_binding->callMethod(11969, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const QMetaMethod& x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)&x1;
        if (this->_binding->callMethod(11970, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    ~x_QPanGesture() { this->_binding->deleted(299, (void*)this); }
};
void xcall_QPanGesture(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QPanGesture *xself = (x_QPanGesture*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QPanGesture::x_3(args);	break;
        case 4: x_QPanGesture::x_4(args);	break;
        case 5: xself->x_5(args);	break;
        case 6: x_QPanGesture::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: xself->x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: x_QPanGesture::x_14(args);	break;
        case 15: x_QPanGesture::x_15(args);	break;
        case 16: x_QPanGesture::x_16(args);	break;
        case 17: x_QPanGesture::x_17(args);	break;
        case 18: x_QPanGesture::x_18(args);	break;
        case 19: x_QPanGesture::x_19(args);	break;
        case 20: delete (QPanGesture*)xself;	break;
    }
}
class x_QParallelAnimationGroup : public QParallelAnimationGroup, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QParallelAnimationGroup*>(this))) {
            const QMetaObject* xret = ((const x_QParallelAnimationGroup*)this)->QParallelAnimationGroup::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QParallelAnimationGroup*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QParallelAnimationGroup*>(this))) {
            void* xret = this->QParallelAnimationGroup::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QParallelAnimationGroup::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QParallelAnimationGroup::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_5(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QParallelAnimationGroup*>(this))) {
            int xret = this->QParallelAnimationGroup::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_6(Smoke::Stack x) {
        // QParallelAnimationGroup* QParallelAnimationGroup(QObject*)
        x_QParallelAnimationGroup* xret = new x_QParallelAnimationGroup((QObject*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QParallelAnimationGroup(QObject* x1) : QParallelAnimationGroup(x1) {}
    void x_7(Smoke::Stack x) {
        // int duration() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QParallelAnimationGroup*>(this))) {
            int xret = ((const x_QParallelAnimationGroup*)this)->QParallelAnimationGroup::duration();
            x[0].s_int = xret;
        } else {
            int xret = ((const x_QParallelAnimationGroup*)this)->duration();
            x[0].s_int = xret;
        }
    }
    void x_8(Smoke::Stack x) {
        // bool event(QEvent*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QParallelAnimationGroup*>(this))) {
            bool xret = this->QParallelAnimationGroup::event((QEvent*)x[1].s_class);
            x[0].s_bool = xret;
        } else {
            bool xret = this->event((QEvent*)x[1].s_class);
            x[0].s_bool = xret;
        }
    }
    void x_9(Smoke::Stack x) {
        // void updateCurrentTime(int)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QParallelAnimationGroup*>(this))) {
            this->QParallelAnimationGroup::updateCurrentTime((int)x[1].s_int);
            (void)x; // noop (for compiler warning)
        } else {
            this->updateCurrentTime((int)x[1].s_int);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_10(Smoke::Stack x) {
        // void updateState(QAbstractAnimation::State, QAbstractAnimation::State)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QParallelAnimationGroup*>(this))) {
            this->QParallelAnimationGroup::updateState((QAbstractAnimation::State)x[1].s_enum,(QAbstractAnimation::State)x[2].s_enum);
            (void)x; // noop (for compiler warning)
        } else {
            this->updateState((QAbstractAnimation::State)x[1].s_enum,(QAbstractAnimation::State)x[2].s_enum);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_11(Smoke::Stack x) {
        // void updateDirection(QAbstractAnimation::Direction)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QParallelAnimationGroup*>(this))) {
            this->QParallelAnimationGroup::updateDirection((QAbstractAnimation::Direction)x[1].s_enum);
            (void)x; // noop (for compiler warning)
        } else {
            this->updateDirection((QAbstractAnimation::Direction)x[1].s_enum);
            (void)x; // noop (for compiler warning)
        }
    }
    static void x_12(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QParallelAnimationGroup::tr((const char*)x[1].s_class,(const char*)0,(int)-1);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_13(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QParallelAnimationGroup::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)-1);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_14(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QParallelAnimationGroup::trUtf8((const char*)x[1].s_class,(const char*)0,(int)-1);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_15(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QParallelAnimationGroup::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)-1);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_16(Smoke::Stack x) {
        // QParallelAnimationGroup* QParallelAnimationGroup()
        x_QParallelAnimationGroup* xret = new x_QParallelAnimationGroup((QObject*)0);
        x[0].s_class = (void*)xret;
    }
    static void x_17(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QParallelAnimationGroup::staticMetaObject;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(13214, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QParallelAnimationGroup::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(13215, (void*)this, x)) return (void*)x[0].s_class;
        return this->QParallelAnimationGroup::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(13218, (void*)this, x)) return (int)x[0].s_int;
        return this->QParallelAnimationGroup::qt_metacall(x1, x2, x3);
    }
    virtual int duration() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(13220, (void*)this, x)) return (int)x[0].s_int;
        return this->QParallelAnimationGroup::duration();
    }
    virtual void updateCurrentTime(int x1) {
        Smoke::StackItem x[2];
        x[1].s_int = x1;
        if (this->_binding->callMethod(13222, (void*)this, x)) return;
        this->QParallelAnimationGroup::updateCurrentTime(x1);
    }
    virtual void updateState(QAbstractAnimation::State x1, QAbstractAnimation::State x2) {
        Smoke::StackItem x[3];
        x[1].s_enum = x1;
        x[2].s_enum = x2;
        if (this->_binding->callMethod(13223, (void*)this, x)) return;
        this->QParallelAnimationGroup::updateState(x1, x2);
    }
    virtual void updateDirection(QAbstractAnimation::Direction x1) {
        Smoke::StackItem x[2];
        x[1].s_enum = x1;
        if (this->_binding->callMethod(13224, (void*)this, x)) return;
        this->QParallelAnimationGroup::updateDirection(x1);
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(13221, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QParallelAnimationGroup::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(11927, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(11966, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(11967, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(11968, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const QMetaMethod& x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)&x1;
        if (this->_binding->callMethod(11969, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const QMetaMethod& x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)&x1;
        if (this->_binding->callMethod(11970, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    ~x_QParallelAnimationGroup() { this->_binding->deleted(300, (void*)this); }
};
void xcall_QParallelAnimationGroup(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QParallelAnimationGroup *xself = (x_QParallelAnimationGroup*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QParallelAnimationGroup::x_3(args);	break;
        case 4: x_QParallelAnimationGroup::x_4(args);	break;
        case 5: xself->x_5(args);	break;
        case 6: x_QParallelAnimationGroup::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: xself->x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: x_QParallelAnimationGroup::x_12(args);	break;
        case 13: x_QParallelAnimationGroup::x_13(args);	break;
        case 14: x_QParallelAnimationGroup::x_14(args);	break;
        case 15: x_QParallelAnimationGroup::x_15(args);	break;
        case 16: x_QParallelAnimationGroup::x_16(args);	break;
        case 17: x_QParallelAnimationGroup::x_17(args);	break;
        case 18: delete (QParallelAnimationGroup*)xself;	break;
    }
}
class x_QPauseAnimation : public QPauseAnimation, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPauseAnimation*>(this))) {
            const QMetaObject* xret = ((const x_QPauseAnimation*)this)->QPauseAnimation::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QPauseAnimation*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPauseAnimation*>(this))) {
            void* xret = this->QPauseAnimation::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QPauseAnimation::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QPauseAnimation::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_5(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPauseAnimation*>(this))) {
            int xret = this->QPauseAnimation::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_6(Smoke::Stack x) {
        // QPauseAnimation* QPauseAnimation(QObject*)
        x_QPauseAnimation* xret = new x_QPauseAnimation((QObject*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QPauseAnimation(QObject* x1) : QPauseAnimation(x1) {}
    static void x_7(Smoke::Stack x) {
        // QPauseAnimation* QPauseAnimation(int, QObject*)
        x_QPauseAnimation* xret = new x_QPauseAnimation((int)x[1].s_int,(QObject*)x[2].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QPauseAnimation(int x1, QObject* x2) : QPauseAnimation(x1, x2) {}
    void x_8(Smoke::Stack x) {
        // int duration() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPauseAnimation*>(this))) {
            int xret = ((const x_QPauseAnimation*)this)->QPauseAnimation::duration();
            x[0].s_int = xret;
        } else {
            int xret = ((const x_QPauseAnimation*)this)->duration();
            x[0].s_int = xret;
        }
    }
    void x_9(Smoke::Stack x) {
        // void setDuration(int)
        this->QPauseAnimation::setDuration((int)x[1].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_10(Smoke::Stack x) {
        // bool event(QEvent*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPauseAnimation*>(this))) {
            bool xret = this->QPauseAnimation::event((QEvent*)x[1].s_class);
            x[0].s_bool = xret;
        } else {
            bool xret = this->event((QEvent*)x[1].s_class);
            x[0].s_bool = xret;
        }
    }
    void x_11(Smoke::Stack x) {
        // void updateCurrentTime(int)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPauseAnimation*>(this))) {
            this->QPauseAnimation::updateCurrentTime((int)x[1].s_int);
            (void)x; // noop (for compiler warning)
        } else {
            this->updateCurrentTime((int)x[1].s_int);
            (void)x; // noop (for compiler warning)
        }
    }
    static void x_12(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QPauseAnimation::tr((const char*)x[1].s_class,(const char*)0,(int)-1);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_13(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QPauseAnimation::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)-1);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_14(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QPauseAnimation::trUtf8((const char*)x[1].s_class,(const char*)0,(int)-1);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_15(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QPauseAnimation::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)-1);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_16(Smoke::Stack x) {
        // QPauseAnimation* QPauseAnimation()
        x_QPauseAnimation* xret = new x_QPauseAnimation((QObject*)0);
        x[0].s_class = (void*)xret;
    }
    static void x_17(Smoke::Stack x) {
        // QPauseAnimation* QPauseAnimation(int)
        x_QPauseAnimation* xret = new x_QPauseAnimation((int)x[1].s_int,(QObject*)0);
        x[0].s_class = (void*)xret;
    }
    static void x_18(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QPauseAnimation::staticMetaObject;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(13232, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QPauseAnimation::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(13233, (void*)this, x)) return (void*)x[0].s_class;
        return this->QPauseAnimation::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(13236, (void*)this, x)) return (int)x[0].s_int;
        return this->QPauseAnimation::qt_metacall(x1, x2, x3);
    }
    virtual int duration() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(13239, (void*)this, x)) return (int)x[0].s_int;
        return this->QPauseAnimation::duration();
    }
    virtual void updateCurrentTime(int x1) {
        Smoke::StackItem x[2];
        x[1].s_int = x1;
        if (this->_binding->callMethod(13242, (void*)this, x)) return;
        this->QPauseAnimation::updateCurrentTime(x1);
    }
    virtual void updateState(QAbstractAnimation::State x1, QAbstractAnimation::State x2) {
        Smoke::StackItem x[3];
        x[1].s_enum = x1;
        x[2].s_enum = x2;
        if (this->_binding->callMethod(30, (void*)this, x)) return;
        this->QAbstractAnimation::updateState(x1, x2);
    }
    virtual void updateDirection(QAbstractAnimation::Direction x1) {
        Smoke::StackItem x[2];
        x[1].s_enum = x1;
        if (this->_binding->callMethod(31, (void*)this, x)) return;
        this->QAbstractAnimation::updateDirection(x1);
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(13241, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QPauseAnimation::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(11927, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(11966, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(11967, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(11968, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const QMetaMethod& x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)&x1;
        if (this->_binding->callMethod(11969, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const QMetaMethod& x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)&x1;
        if (this->_binding->callMethod(11970, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    ~x_QPauseAnimation() { this->_binding->deleted(301, (void*)this); }
};
void xcall_QPauseAnimation(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QPauseAnimation *xself = (x_QPauseAnimation*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QPauseAnimation::x_3(args);	break;
        case 4: x_QPauseAnimation::x_4(args);	break;
        case 5: xself->x_5(args);	break;
        case 6: x_QPauseAnimation::x_6(args);	break;
        case 7: x_QPauseAnimation::x_7(args);	break;
        case 8: xself->x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: x_QPauseAnimation::x_12(args);	break;
        case 13: x_QPauseAnimation::x_13(args);	break;
        case 14: x_QPauseAnimation::x_14(args);	break;
        case 15: x_QPauseAnimation::x_15(args);	break;
        case 16: x_QPauseAnimation::x_16(args);	break;
        case 17: x_QPauseAnimation::x_17(args);	break;
        case 18: x_QPauseAnimation::x_18(args);	break;
        case 19: delete (QPauseAnimation*)xself;	break;
    }
}
class x_QPdfWriter : public QPdfWriter, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPdfWriter*>(this))) {
            const QMetaObject* xret = ((const x_QPdfWriter*)this)->QPdfWriter::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QPdfWriter*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPdfWriter*>(this))) {
            void* xret = this->QPdfWriter::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QPdfWriter::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QPdfWriter::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_5(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPdfWriter*>(this))) {
            int xret = this->QPdfWriter::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_6(Smoke::Stack x) {
        // QPdfWriter* QPdfWriter(const QString&)
        x_QPdfWriter* xret = new x_QPdfWriter(*(const QString*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QPdfWriter(const QString& x1) : QPdfWriter(x1) {}
    static void x_7(Smoke::Stack x) {
        // QPdfWriter* QPdfWriter(QIODevice*)
        x_QPdfWriter* xret = new x_QPdfWriter((QIODevice*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QPdfWriter(QIODevice* x1) : QPdfWriter(x1) {}
    void x_8(Smoke::Stack x) {
        // QString title() const
        QString xret = ((const x_QPdfWriter*)this)->QPdfWriter::title();
        x[0].s_class = (void*)new QString(xret);
    }
    void x_9(Smoke::Stack x) {
        // void setTitle(const QString&)
        this->QPdfWriter::setTitle(*(const QString*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_10(Smoke::Stack x) {
        // QString creator() const
        QString xret = ((const x_QPdfWriter*)this)->QPdfWriter::creator();
        x[0].s_class = (void*)new QString(xret);
    }
    void x_11(Smoke::Stack x) {
        // void setCreator(const QString&)
        this->QPdfWriter::setCreator(*(const QString*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_12(Smoke::Stack x) {
        // bool newPage()
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPdfWriter*>(this))) {
            bool xret = this->QPdfWriter::newPage();
            x[0].s_bool = xret;
        } else {
            bool xret = this->newPage();
            x[0].s_bool = xret;
        }
    }
    void x_13(Smoke::Stack x) {
        // void setPageSize(QPagedPaintDevice::PageSize)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPdfWriter*>(this))) {
            this->QPdfWriter::setPageSize((QPagedPaintDevice::PageSize)x[1].s_enum);
            (void)x; // noop (for compiler warning)
        } else {
            this->setPageSize((QPagedPaintDevice::PageSize)x[1].s_enum);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_14(Smoke::Stack x) {
        // void setPageSizeMM(const QSizeF&)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPdfWriter*>(this))) {
            this->QPdfWriter::setPageSizeMM(*(const QSizeF*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->setPageSizeMM(*(const QSizeF*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_15(Smoke::Stack x) {
        // void setMargins(const QPagedPaintDevice::Margins&)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPdfWriter*>(this))) {
            this->QPdfWriter::setMargins(*(const QPagedPaintDevice::Margins*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->setMargins(*(const QPagedPaintDevice::Margins*)x[1].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_16(Smoke::Stack x) {
        // QPaintEngine* paintEngine() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPdfWriter*>(this))) {
            QPaintEngine* xret = ((const x_QPdfWriter*)this)->QPdfWriter::paintEngine();
            x[0].s_class = (void*)xret;
        } else {
            QPaintEngine* xret = ((const x_QPdfWriter*)this)->paintEngine();
            x[0].s_class = (void*)xret;
        }
    }
    void x_17(Smoke::Stack x) {
        // int metric(QPaintDevice::PaintDeviceMetric) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPdfWriter*>(this))) {
            int xret = ((const x_QPdfWriter*)this)->QPdfWriter::metric((QPaintDevice::PaintDeviceMetric)x[1].s_enum);
            x[0].s_int = xret;
        } else {
            int xret = ((const x_QPdfWriter*)this)->metric((QPaintDevice::PaintDeviceMetric)x[1].s_enum);
            x[0].s_int = xret;
        }
    }
    static void x_18(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QPdfWriter::tr((const char*)x[1].s_class,(const char*)0,(int)-1);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_19(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QPdfWriter::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)-1);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_20(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QPdfWriter::trUtf8((const char*)x[1].s_class,(const char*)0,(int)-1);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_21(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QPdfWriter::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)-1);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_22(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QPdfWriter::staticMetaObject;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(13251, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QPdfWriter::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(13252, (void*)this, x)) return (void*)x[0].s_class;
        return this->QPdfWriter::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(13255, (void*)this, x)) return (int)x[0].s_int;
        return this->QPdfWriter::qt_metacall(x1, x2, x3);
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(11926, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(11927, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(11966, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(11967, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(11968, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const QMetaMethod& x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)&x1;
        if (this->_binding->callMethod(11969, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const QMetaMethod& x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)&x1;
        if (this->_binding->callMethod(11970, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    virtual bool newPage() {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(13262, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QPdfWriter::newPage();
    }
    virtual void setPageSize(QPagedPaintDevice::PageSize x1) {
        Smoke::StackItem x[2];
        x[1].s_enum = x1;
        if (this->_binding->callMethod(13263, (void*)this, x)) return;
        this->QPdfWriter::setPageSize(x1);
    }
    virtual void setPageSizeMM(const QSizeF& x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)&x1;
        if (this->_binding->callMethod(13264, (void*)this, x)) return;
        this->QPdfWriter::setPageSizeMM(x1);
    }
    virtual void setMargins(const QPagedPaintDevice::Margins& x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)&x1;
        if (this->_binding->callMethod(13265, (void*)this, x)) return;
        this->QPdfWriter::setMargins(x1);
    }
    virtual int devType() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(12483, (void*)this, x)) return (int)x[0].s_int;
        return this->QPaintDevice::devType();
    }
    virtual QPaintEngine* paintEngine() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(13266, (void*)this, x)) return (QPaintEngine*)x[0].s_class;
        return this->QPdfWriter::paintEngine();
    }
    virtual int metric(QPaintDevice::PaintDeviceMetric x1) const {
        Smoke::StackItem x[2];
        x[1].s_enum = x1;
        if (this->_binding->callMethod(13267, (void*)this, x)) return (int)x[0].s_int;
        return this->QPdfWriter::metric(x1);
    }
    virtual void initPainter(QPainter* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(12499, (void*)this, x)) return;
        this->QPaintDevice::initPainter(x1);
    }
    virtual QPaintDevice* redirected(QPoint* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(12500, (void*)this, x)) return (QPaintDevice*)x[0].s_class;
        return this->QPaintDevice::redirected(x1);
    }
    virtual QPainter* sharedPainter() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(12501, (void*)this, x)) return (QPainter*)x[0].s_class;
        return this->QPaintDevice::sharedPainter();
    }
    ~x_QPdfWriter() { this->_binding->deleted(302, (void*)this); }
};
void xcall_QPdfWriter(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QPdfWriter *xself = (x_QPdfWriter*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QPdfWriter::x_3(args);	break;
        case 4: x_QPdfWriter::x_4(args);	break;
        case 5: xself->x_5(args);	break;
        case 6: x_QPdfWriter::x_6(args);	break;
        case 7: x_QPdfWriter::x_7(args);	break;
        case 8: xself->x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: x_QPdfWriter::x_18(args);	break;
        case 19: x_QPdfWriter::x_19(args);	break;
        case 20: x_QPdfWriter::x_20(args);	break;
        case 21: x_QPdfWriter::x_21(args);	break;
        case 22: x_QPdfWriter::x_22(args);	break;
        case 23: delete (QPdfWriter*)xself;	break;
    }
}
class x_QPen : public QPen {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    static void x_1(Smoke::Stack x) {
        // QPen* QPen()
        x_QPen* xret = new x_QPen();
        x[0].s_class = (void*)xret;
    }
    explicit x_QPen() : QPen() {}
    static void x_2(Smoke::Stack x) {
        // QPen* QPen(Qt::PenStyle)
        x_QPen* xret = new x_QPen((Qt::PenStyle)x[1].s_enum);
        x[0].s_class = (void*)xret;
    }
    explicit x_QPen(Qt::PenStyle x1) : QPen(x1) {}
    static void x_3(Smoke::Stack x) {
        // QPen* QPen(const QColor&)
        x_QPen* xret = new x_QPen(*(const QColor*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QPen(const QColor& x1) : QPen(x1) {}
    static void x_4(Smoke::Stack x) {
        // QPen* QPen(const QBrush&, double, Qt::PenStyle, Qt::PenCapStyle, Qt::PenJoinStyle)
        x_QPen* xret = new x_QPen(*(const QBrush*)x[1].s_class,(double)x[2].s_double,(Qt::PenStyle)x[3].s_enum,(Qt::PenCapStyle)x[4].s_enum,(Qt::PenJoinStyle)x[5].s_enum);
        x[0].s_class = (void*)xret;
    }
    explicit x_QPen(const QBrush& x1, double x2, Qt::PenStyle x3, Qt::PenCapStyle x4, Qt::PenJoinStyle x5) : QPen(x1, x2, x3, x4, x5) {}
    static void x_5(Smoke::Stack x) {
        // QPen* QPen(const QPen&)
        x_QPen* xret = new x_QPen(*(const QPen*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QPen(const QPen& x1) : QPen(x1) {}
    void x_6(Smoke::Stack x) {
        // QPen& operator=(const QPen&)
        QPen& xret = this->QPen::operator=(*(const QPen*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    void x_7(Smoke::Stack x) {
        // void swap(QPen&)
        this->QPen::swap(*(QPen*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_8(Smoke::Stack x) {
        // Qt::PenStyle style() const
        Qt::PenStyle xret = ((const x_QPen*)this)->QPen::style();
        x[0].s_enum = xret;
    }
    void x_9(Smoke::Stack x) {
        // void setStyle(Qt::PenStyle)
        this->QPen::setStyle((Qt::PenStyle)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_10(Smoke::Stack x) {
        // QVector<double> dashPattern() const
        QVector<double> xret = ((const x_QPen*)this)->QPen::dashPattern();
        x[0].s_class = (void*)new QVector<double>(xret);
    }
    void x_11(Smoke::Stack x) {
        // void setDashPattern(const QVector<double>&)
        this->QPen::setDashPattern(*(const QVector<double>*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_12(Smoke::Stack x) {
        // double dashOffset() const
        double xret = ((const x_QPen*)this)->QPen::dashOffset();
        x[0].s_double = xret;
    }
    void x_13(Smoke::Stack x) {
        // void setDashOffset(double)
        this->QPen::setDashOffset((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_14(Smoke::Stack x) {
        // double miterLimit() const
        double xret = ((const x_QPen*)this)->QPen::miterLimit();
        x[0].s_double = xret;
    }
    void x_15(Smoke::Stack x) {
        // void setMiterLimit(double)
        this->QPen::setMiterLimit((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_16(Smoke::Stack x) {
        // double widthF() const
        double xret = ((const x_QPen*)this)->QPen::widthF();
        x[0].s_double = xret;
    }
    void x_17(Smoke::Stack x) {
        // void setWidthF(double)
        this->QPen::setWidthF((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_18(Smoke::Stack x) {
        // int width() const
        int xret = ((const x_QPen*)this)->QPen::width();
        x[0].s_int = xret;
    }
    void x_19(Smoke::Stack x) {
        // void setWidth(int)
        this->QPen::setWidth((int)x[1].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_20(Smoke::Stack x) {
        // QColor color() const
        QColor xret = ((const x_QPen*)this)->QPen::color();
        x[0].s_class = (void*)new QColor(xret);
    }
    void x_21(Smoke::Stack x) {
        // void setColor(const QColor&)
        this->QPen::setColor(*(const QColor*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_22(Smoke::Stack x) {
        // QBrush brush() const
        QBrush xret = ((const x_QPen*)this)->QPen::brush();
        x[0].s_class = (void*)new QBrush(xret);
    }
    void x_23(Smoke::Stack x) {
        // void setBrush(const QBrush&)
        this->QPen::setBrush(*(const QBrush*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_24(Smoke::Stack x) {
        // bool isSolid() const
        bool xret = ((const x_QPen*)this)->QPen::isSolid();
        x[0].s_bool = xret;
    }
    void x_25(Smoke::Stack x) {
        // Qt::PenCapStyle capStyle() const
        Qt::PenCapStyle xret = ((const x_QPen*)this)->QPen::capStyle();
        x[0].s_enum = xret;
    }
    void x_26(Smoke::Stack x) {
        // void setCapStyle(Qt::PenCapStyle)
        this->QPen::setCapStyle((Qt::PenCapStyle)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_27(Smoke::Stack x) {
        // Qt::PenJoinStyle joinStyle() const
        Qt::PenJoinStyle xret = ((const x_QPen*)this)->QPen::joinStyle();
        x[0].s_enum = xret;
    }
    void x_28(Smoke::Stack x) {
        // void setJoinStyle(Qt::PenJoinStyle)
        this->QPen::setJoinStyle((Qt::PenJoinStyle)x[1].s_enum);
        (void)x; // noop (for compiler warning)
    }
    void x_29(Smoke::Stack x) {
        // bool isCosmetic() const
        bool xret = ((const x_QPen*)this)->QPen::isCosmetic();
        x[0].s_bool = xret;
    }
    void x_30(Smoke::Stack x) {
        // void setCosmetic(bool)
        this->QPen::setCosmetic((bool)x[1].s_bool);
        (void)x; // noop (for compiler warning)
    }
    void x_31(Smoke::Stack x) {
        // bool operator==(const QPen&) const
        bool xret = ((const x_QPen*)this)->QPen::operator==(*(const QPen*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_32(Smoke::Stack x) {
        // bool operator!=(const QPen&) const
        bool xret = ((const x_QPen*)this)->QPen::operator!=(*(const QPen*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_33(Smoke::Stack x) {
        // QVariant operator QVariant() const
        QVariant xret = ((const x_QPen*)this)->QPen::operator QVariant();
        x[0].s_class = (void*)new QVariant(xret);
    }
    void x_34(Smoke::Stack x) {
        // bool isDetached()
        bool xret = this->QPen::isDetached();
        x[0].s_bool = xret;
    }
    void x_35(Smoke::Stack x) {
        // QPenPrivate*& data_ptr()
        QPenPrivate*& xret = this->QPen::data_ptr();
        x[0].s_class = (void*)xret;
    }
    static void x_36(Smoke::Stack x) {
        // QPen* QPen(const QBrush&, double)
        x_QPen* xret = new x_QPen(*(const QBrush*)x[1].s_class,(double)x[2].s_double,(Qt::PenStyle)Qt::SolidLine,(Qt::PenCapStyle)Qt::SquareCap,(Qt::PenJoinStyle)Qt::BevelJoin);
        x[0].s_class = (void*)xret;
    }
    static void x_37(Smoke::Stack x) {
        // QPen* QPen(const QBrush&, double, Qt::PenStyle)
        x_QPen* xret = new x_QPen(*(const QBrush*)x[1].s_class,(double)x[2].s_double,(Qt::PenStyle)x[3].s_enum,(Qt::PenCapStyle)Qt::SquareCap,(Qt::PenJoinStyle)Qt::BevelJoin);
        x[0].s_class = (void*)xret;
    }
    static void x_38(Smoke::Stack x) {
        // QPen* QPen(const QBrush&, double, Qt::PenStyle, Qt::PenCapStyle)
        x_QPen* xret = new x_QPen(*(const QBrush*)x[1].s_class,(double)x[2].s_double,(Qt::PenStyle)x[3].s_enum,(Qt::PenCapStyle)x[4].s_enum,(Qt::PenJoinStyle)Qt::BevelJoin);
        x[0].s_class = (void*)xret;
    }
    ~x_QPen() { this->_binding->deleted(303, (void*)this); }
};
void xcall_QPen(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QPen *xself = (x_QPen*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: x_QPen::x_1(args);	break;
        case 2: x_QPen::x_2(args);	break;
        case 3: x_QPen::x_3(args);	break;
        case 4: x_QPen::x_4(args);	break;
        case 5: x_QPen::x_5(args);	break;
        case 6: xself->x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: xself->x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: xself->x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: xself->x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: xself->x_30(args);	break;
        case 31: xself->x_31(args);	break;
        case 32: xself->x_32(args);	break;
        case 33: xself->x_33(args);	break;
        case 34: xself->x_34(args);	break;
        case 35: xself->x_35(args);	break;
        case 36: x_QPen::x_36(args);	break;
        case 37: x_QPen::x_37(args);	break;
        case 38: x_QPen::x_38(args);	break;
        case 39: delete (QPen*)xself;	break;
    }
}
class x_QPersistentModelIndex : public QPersistentModelIndex {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    static void x_1(Smoke::Stack x) {
        // QPersistentModelIndex* QPersistentModelIndex()
        x_QPersistentModelIndex* xret = new x_QPersistentModelIndex();
        x[0].s_class = (void*)xret;
    }
    explicit x_QPersistentModelIndex() : QPersistentModelIndex() {}
    static void x_2(Smoke::Stack x) {
        // QPersistentModelIndex* QPersistentModelIndex(const QModelIndex&)
        x_QPersistentModelIndex* xret = new x_QPersistentModelIndex(*(const QModelIndex*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QPersistentModelIndex(const QModelIndex& x1) : QPersistentModelIndex(x1) {}
    static void x_3(Smoke::Stack x) {
        // QPersistentModelIndex* QPersistentModelIndex(const QPersistentModelIndex&)
        x_QPersistentModelIndex* xret = new x_QPersistentModelIndex(*(const QPersistentModelIndex*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QPersistentModelIndex(const QPersistentModelIndex& x1) : QPersistentModelIndex(x1) {}
    void x_4(Smoke::Stack x) {
        // bool operator<(const QPersistentModelIndex&) const
        bool xret = ((const x_QPersistentModelIndex*)this)->QPersistentModelIndex::operator<(*(const QPersistentModelIndex*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_5(Smoke::Stack x) {
        // bool operator==(const QPersistentModelIndex&) const
        bool xret = ((const x_QPersistentModelIndex*)this)->QPersistentModelIndex::operator==(*(const QPersistentModelIndex*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_6(Smoke::Stack x) {
        // bool operator!=(const QPersistentModelIndex&) const
        bool xret = ((const x_QPersistentModelIndex*)this)->QPersistentModelIndex::operator!=(*(const QPersistentModelIndex*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_7(Smoke::Stack x) {
        // QPersistentModelIndex& operator=(const QPersistentModelIndex&)
        QPersistentModelIndex& xret = this->QPersistentModelIndex::operator=(*(const QPersistentModelIndex*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    void x_8(Smoke::Stack x) {
        // void swap(QPersistentModelIndex&)
        this->QPersistentModelIndex::swap(*(QPersistentModelIndex*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_9(Smoke::Stack x) {
        // bool operator==(const QModelIndex&) const
        bool xret = ((const x_QPersistentModelIndex*)this)->QPersistentModelIndex::operator==(*(const QModelIndex*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_10(Smoke::Stack x) {
        // bool operator!=(const QModelIndex&) const
        bool xret = ((const x_QPersistentModelIndex*)this)->QPersistentModelIndex::operator!=(*(const QModelIndex*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_11(Smoke::Stack x) {
        // QPersistentModelIndex& operator=(const QModelIndex&)
        QPersistentModelIndex& xret = this->QPersistentModelIndex::operator=(*(const QModelIndex*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    void x_12(Smoke::Stack x) {
        // const QModelIndex& operator const QModelIndex&() const
        const QModelIndex& xret = ((const x_QPersistentModelIndex*)this)->QPersistentModelIndex::operator const QModelIndex&();
        x[0].s_class = (void*)&xret;
    }
    void x_13(Smoke::Stack x) {
        // int row() const
        int xret = ((const x_QPersistentModelIndex*)this)->QPersistentModelIndex::row();
        x[0].s_int = xret;
    }
    void x_14(Smoke::Stack x) {
        // int column() const
        int xret = ((const x_QPersistentModelIndex*)this)->QPersistentModelIndex::column();
        x[0].s_int = xret;
    }
    void x_15(Smoke::Stack x) {
        // void* internalPointer() const
        void* xret = ((const x_QPersistentModelIndex*)this)->QPersistentModelIndex::internalPointer();
        x[0].s_class = (void*)xret;
    }
    void x_16(Smoke::Stack x) {
        // QIntegerForSizeof< void* >::Unsigned internalId() const
        QIntegerForSizeof< void* >::Unsigned xret = ((const x_QPersistentModelIndex*)this)->QPersistentModelIndex::internalId();
        x[0].s_class = (void*)new QIntegerForSizeof< void* >::Unsigned(xret);
    }
    void x_17(Smoke::Stack x) {
        // QModelIndex parent() const
        QModelIndex xret = ((const x_QPersistentModelIndex*)this)->QPersistentModelIndex::parent();
        x[0].s_class = (void*)new QModelIndex(xret);
    }
    void x_18(Smoke::Stack x) {
        // QModelIndex sibling(int, int) const
        QModelIndex xret = ((const x_QPersistentModelIndex*)this)->QPersistentModelIndex::sibling((int)x[1].s_int,(int)x[2].s_int);
        x[0].s_class = (void*)new QModelIndex(xret);
    }
    void x_19(Smoke::Stack x) {
        // QModelIndex child(int, int) const
        QModelIndex xret = ((const x_QPersistentModelIndex*)this)->QPersistentModelIndex::child((int)x[1].s_int,(int)x[2].s_int);
        x[0].s_class = (void*)new QModelIndex(xret);
    }
    void x_20(Smoke::Stack x) {
        // QVariant data(int) const
        QVariant xret = ((const x_QPersistentModelIndex*)this)->QPersistentModelIndex::data((int)x[1].s_int);
        x[0].s_class = (void*)new QVariant(xret);
    }
    void x_21(Smoke::Stack x) {
        // QFlags<Qt::ItemFlag> flags() const
        QFlags<Qt::ItemFlag> xret = ((const x_QPersistentModelIndex*)this)->QPersistentModelIndex::flags();
        x[0].s_uint = (uint)xret;
    }
    void x_22(Smoke::Stack x) {
        // const QAbstractItemModel* model() const
        const QAbstractItemModel* xret = ((const x_QPersistentModelIndex*)this)->QPersistentModelIndex::model();
        x[0].s_class = (void*)xret;
    }
    void x_23(Smoke::Stack x) {
        // bool isValid() const
        bool xret = ((const x_QPersistentModelIndex*)this)->QPersistentModelIndex::isValid();
        x[0].s_bool = xret;
    }
    void x_24(Smoke::Stack x) {
        // QVariant data() const
        QVariant xret = ((const x_QPersistentModelIndex*)this)->QPersistentModelIndex::data((int)Qt::DisplayRole);
        x[0].s_class = (void*)new QVariant(xret);
    }
    ~x_QPersistentModelIndex() { this->_binding->deleted(305, (void*)this); }
};
void xcall_QPersistentModelIndex(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QPersistentModelIndex *xself = (x_QPersistentModelIndex*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: x_QPersistentModelIndex::x_1(args);	break;
        case 2: x_QPersistentModelIndex::x_2(args);	break;
        case 3: x_QPersistentModelIndex::x_3(args);	break;
        case 4: xself->x_4(args);	break;
        case 5: xself->x_5(args);	break;
        case 6: xself->x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: xself->x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: delete (QPersistentModelIndex*)xself;	break;
    }
}
class x_QPicture : public QPicture, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    static void x_1(Smoke::Stack x) {
        // QPicture* QPicture(int)
        x_QPicture* xret = new x_QPicture((int)x[1].s_int);
        x[0].s_class = (void*)xret;
    }
    explicit x_QPicture(int x1) : QPicture(x1) {}
    static void x_2(Smoke::Stack x) {
        // QPicture* QPicture(const QPicture&)
        x_QPicture* xret = new x_QPicture(*(const QPicture*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QPicture(const QPicture& x1) : QPicture(x1) {}
    void x_3(Smoke::Stack x) {
        // bool isNull() const
        bool xret = ((const x_QPicture*)this)->QPicture::isNull();
        x[0].s_bool = xret;
    }
    void x_4(Smoke::Stack x) {
        // int devType() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPicture*>(this))) {
            int xret = ((const x_QPicture*)this)->QPicture::devType();
            x[0].s_int = xret;
        } else {
            int xret = ((const x_QPicture*)this)->devType();
            x[0].s_int = xret;
        }
    }
    void x_5(Smoke::Stack x) {
        // unsigned int size() const
        unsigned int xret = ((const x_QPicture*)this)->QPicture::size();
        x[0].s_uint = xret;
    }
    void x_6(Smoke::Stack x) {
        // const char* data() const
        const char* xret = ((const x_QPicture*)this)->QPicture::data();
        x[0].s_class = (void*)xret;
    }
    void x_7(Smoke::Stack x) {
        // virtual void setData(const char*, unsigned int)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPicture*>(this))) {
            this->QPicture::setData((const char*)x[1].s_class,(unsigned int)x[2].s_uint);
            (void)x; // noop (for compiler warning)
        } else {
            this->setData((const char*)x[1].s_class,(unsigned int)x[2].s_uint);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_8(Smoke::Stack x) {
        // bool play(QPainter*)
        bool xret = this->QPicture::play((QPainter*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_9(Smoke::Stack x) {
        // bool load(QIODevice*, const char*)
        bool xret = this->QPicture::load((QIODevice*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_bool = xret;
    }
    void x_10(Smoke::Stack x) {
        // bool load(const QString&, const char*)
        bool xret = this->QPicture::load(*(const QString*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_bool = xret;
    }
    void x_11(Smoke::Stack x) {
        // bool save(QIODevice*, const char*)
        bool xret = this->QPicture::save((QIODevice*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_bool = xret;
    }
    void x_12(Smoke::Stack x) {
        // bool save(const QString&, const char*)
        bool xret = this->QPicture::save(*(const QString*)x[1].s_class,(const char*)x[2].s_class);
        x[0].s_bool = xret;
    }
    void x_13(Smoke::Stack x) {
        // QRect boundingRect() const
        QRect xret = ((const x_QPicture*)this)->QPicture::boundingRect();
        x[0].s_class = (void*)new QRect(xret);
    }
    void x_14(Smoke::Stack x) {
        // void setBoundingRect(const QRect&)
        this->QPicture::setBoundingRect(*(const QRect*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_15(Smoke::Stack x) {
        // QPicture& operator=(const QPicture&)
        QPicture& xret = this->QPicture::operator=(*(const QPicture*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    void x_16(Smoke::Stack x) {
        // void swap(QPicture&)
        this->QPicture::swap(*(QPicture*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_17(Smoke::Stack x) {
        // void detach()
        this->QPicture::detach();
        (void)x; // noop (for compiler warning)
    }
    void x_18(Smoke::Stack x) {
        // bool isDetached() const
        bool xret = ((const x_QPicture*)this)->QPicture::isDetached();
        x[0].s_bool = xret;
    }
    static void x_19(Smoke::Stack x) {
        // static const char* pictureFormat(const QString&)
        const char* xret = QPicture::pictureFormat(*(const QString*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    static void x_20(Smoke::Stack x) {
        // static QList<QByteArray> inputFormats()
        QList<QByteArray> xret = QPicture::inputFormats();
        x[0].s_class = (void*)new QList<QByteArray>(xret);
    }
    static void x_21(Smoke::Stack x) {
        // static QList<QByteArray> outputFormats()
        QList<QByteArray> xret = QPicture::outputFormats();
        x[0].s_class = (void*)new QList<QByteArray>(xret);
    }
    static void x_22(Smoke::Stack x) {
        // static QStringList inputFormatList()
        QStringList xret = QPicture::inputFormatList();
        x[0].s_class = (void*)new QStringList(xret);
    }
    static void x_23(Smoke::Stack x) {
        // static QStringList outputFormatList()
        QStringList xret = QPicture::outputFormatList();
        x[0].s_class = (void*)new QStringList(xret);
    }
    void x_24(Smoke::Stack x) {
        // QPaintEngine* paintEngine() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPicture*>(this))) {
            QPaintEngine* xret = ((const x_QPicture*)this)->QPicture::paintEngine();
            x[0].s_class = (void*)xret;
        } else {
            QPaintEngine* xret = ((const x_QPicture*)this)->paintEngine();
            x[0].s_class = (void*)xret;
        }
    }
    void x_25(Smoke::Stack x) {
        // int metric(QPaintDevice::PaintDeviceMetric) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPicture*>(this))) {
            int xret = ((const x_QPicture*)this)->QPicture::metric((QPaintDevice::PaintDeviceMetric)x[1].s_enum);
            x[0].s_int = xret;
        } else {
            int xret = ((const x_QPicture*)this)->metric((QPaintDevice::PaintDeviceMetric)x[1].s_enum);
            x[0].s_int = xret;
        }
    }
    void x_26(Smoke::Stack x) {
        // QExplicitlySharedDataPointer<QPicturePrivate>& data_ptr()
        QExplicitlySharedDataPointer<QPicturePrivate>& xret = this->QPicture::data_ptr();
        x[0].s_class = (void*)&xret;
    }
    static void x_27(Smoke::Stack x) {
        // QPicture* QPicture()
        x_QPicture* xret = new x_QPicture((int)-1);
        x[0].s_class = (void*)xret;
    }
    void x_28(Smoke::Stack x) {
        // bool load(QIODevice*)
        bool xret = this->QPicture::load((QIODevice*)x[1].s_class,(const char*)0);
        x[0].s_bool = xret;
    }
    void x_29(Smoke::Stack x) {
        // bool load(const QString&)
        bool xret = this->QPicture::load(*(const QString*)x[1].s_class,(const char*)0);
        x[0].s_bool = xret;
    }
    void x_30(Smoke::Stack x) {
        // bool save(QIODevice*)
        bool xret = this->QPicture::save((QIODevice*)x[1].s_class,(const char*)0);
        x[0].s_bool = xret;
    }
    void x_31(Smoke::Stack x) {
        // bool save(const QString&)
        bool xret = this->QPicture::save(*(const QString*)x[1].s_class,(const char*)0);
        x[0].s_bool = xret;
    }
    virtual void setData(const char* x1, unsigned int x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_uint = x2;
        if (this->_binding->callMethod(13344, (void*)this, x)) return;
        this->QPicture::setData(x1, x2);
    }
    virtual int devType() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(13341, (void*)this, x)) return (int)x[0].s_int;
        return this->QPicture::devType();
    }
    virtual QPaintEngine* paintEngine() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(13361, (void*)this, x)) return (QPaintEngine*)x[0].s_class;
        return this->QPicture::paintEngine();
    }
    virtual int metric(QPaintDevice::PaintDeviceMetric x1) const {
        Smoke::StackItem x[2];
        x[1].s_enum = x1;
        if (this->_binding->callMethod(13362, (void*)this, x)) return (int)x[0].s_int;
        return this->QPicture::metric(x1);
    }
    virtual void initPainter(QPainter* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(12499, (void*)this, x)) return;
        this->QPaintDevice::initPainter(x1);
    }
    virtual QPaintDevice* redirected(QPoint* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(12500, (void*)this, x)) return (QPaintDevice*)x[0].s_class;
        return this->QPaintDevice::redirected(x1);
    }
    virtual QPainter* sharedPainter() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(12501, (void*)this, x)) return (QPainter*)x[0].s_class;
        return this->QPaintDevice::sharedPainter();
    }
    ~x_QPicture() { this->_binding->deleted(306, (void*)this); }
};
void xcall_QPicture(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QPicture *xself = (x_QPicture*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: x_QPicture::x_1(args);	break;
        case 2: x_QPicture::x_2(args);	break;
        case 3: xself->x_3(args);	break;
        case 4: xself->x_4(args);	break;
        case 5: xself->x_5(args);	break;
        case 6: xself->x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: xself->x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: x_QPicture::x_19(args);	break;
        case 20: x_QPicture::x_20(args);	break;
        case 21: x_QPicture::x_21(args);	break;
        case 22: x_QPicture::x_22(args);	break;
        case 23: x_QPicture::x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: xself->x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: x_QPicture::x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: xself->x_30(args);	break;
        case 31: xself->x_31(args);	break;
        case 32: delete (QPicture*)xself;	break;
    }
}
class x_QPinchGesture : public QPinchGesture, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPinchGesture*>(this))) {
            const QMetaObject* xret = ((const x_QPinchGesture*)this)->QPinchGesture::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QPinchGesture*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPinchGesture*>(this))) {
            void* xret = this->QPinchGesture::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QPinchGesture::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QPinchGesture::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_5(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPinchGesture*>(this))) {
            int xret = this->QPinchGesture::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_6(Smoke::Stack x) {
        // QPinchGesture* QPinchGesture(QObject*)
        x_QPinchGesture* xret = new x_QPinchGesture((QObject*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QPinchGesture(QObject* x1) : QPinchGesture(x1) {}
    void x_7(Smoke::Stack x) {
        // QFlags<QPinchGesture::ChangeFlag> totalChangeFlags() const
        QFlags<QPinchGesture::ChangeFlag> xret = ((const x_QPinchGesture*)this)->QPinchGesture::totalChangeFlags();
        x[0].s_uint = (uint)xret;
    }
    void x_8(Smoke::Stack x) {
        // void setTotalChangeFlags(QFlags<QPinchGesture::ChangeFlag>)
        this->QPinchGesture::setTotalChangeFlags((QFlags<QPinchGesture::ChangeFlag>)x[1].s_uint);
        (void)x; // noop (for compiler warning)
    }
    void x_9(Smoke::Stack x) {
        // QFlags<QPinchGesture::ChangeFlag> changeFlags() const
        QFlags<QPinchGesture::ChangeFlag> xret = ((const x_QPinchGesture*)this)->QPinchGesture::changeFlags();
        x[0].s_uint = (uint)xret;
    }
    void x_10(Smoke::Stack x) {
        // void setChangeFlags(QFlags<QPinchGesture::ChangeFlag>)
        this->QPinchGesture::setChangeFlags((QFlags<QPinchGesture::ChangeFlag>)x[1].s_uint);
        (void)x; // noop (for compiler warning)
    }
    void x_11(Smoke::Stack x) {
        // QPointF startCenterPoint() const
        QPointF xret = ((const x_QPinchGesture*)this)->QPinchGesture::startCenterPoint();
        x[0].s_class = (void*)new QPointF(xret);
    }
    void x_12(Smoke::Stack x) {
        // QPointF lastCenterPoint() const
        QPointF xret = ((const x_QPinchGesture*)this)->QPinchGesture::lastCenterPoint();
        x[0].s_class = (void*)new QPointF(xret);
    }
    void x_13(Smoke::Stack x) {
        // QPointF centerPoint() const
        QPointF xret = ((const x_QPinchGesture*)this)->QPinchGesture::centerPoint();
        x[0].s_class = (void*)new QPointF(xret);
    }
    void x_14(Smoke::Stack x) {
        // void setStartCenterPoint(const QPointF&)
        this->QPinchGesture::setStartCenterPoint(*(const QPointF*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_15(Smoke::Stack x) {
        // void setLastCenterPoint(const QPointF&)
        this->QPinchGesture::setLastCenterPoint(*(const QPointF*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_16(Smoke::Stack x) {
        // void setCenterPoint(const QPointF&)
        this->QPinchGesture::setCenterPoint(*(const QPointF*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_17(Smoke::Stack x) {
        // double totalScaleFactor() const
        double xret = ((const x_QPinchGesture*)this)->QPinchGesture::totalScaleFactor();
        x[0].s_double = xret;
    }
    void x_18(Smoke::Stack x) {
        // double lastScaleFactor() const
        double xret = ((const x_QPinchGesture*)this)->QPinchGesture::lastScaleFactor();
        x[0].s_double = xret;
    }
    void x_19(Smoke::Stack x) {
        // double scaleFactor() const
        double xret = ((const x_QPinchGesture*)this)->QPinchGesture::scaleFactor();
        x[0].s_double = xret;
    }
    void x_20(Smoke::Stack x) {
        // void setTotalScaleFactor(double)
        this->QPinchGesture::setTotalScaleFactor((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_21(Smoke::Stack x) {
        // void setLastScaleFactor(double)
        this->QPinchGesture::setLastScaleFactor((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_22(Smoke::Stack x) {
        // void setScaleFactor(double)
        this->QPinchGesture::setScaleFactor((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_23(Smoke::Stack x) {
        // double totalRotationAngle() const
        double xret = ((const x_QPinchGesture*)this)->QPinchGesture::totalRotationAngle();
        x[0].s_double = xret;
    }
    void x_24(Smoke::Stack x) {
        // double lastRotationAngle() const
        double xret = ((const x_QPinchGesture*)this)->QPinchGesture::lastRotationAngle();
        x[0].s_double = xret;
    }
    void x_25(Smoke::Stack x) {
        // double rotationAngle() const
        double xret = ((const x_QPinchGesture*)this)->QPinchGesture::rotationAngle();
        x[0].s_double = xret;
    }
    void x_26(Smoke::Stack x) {
        // void setTotalRotationAngle(double)
        this->QPinchGesture::setTotalRotationAngle((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_27(Smoke::Stack x) {
        // void setLastRotationAngle(double)
        this->QPinchGesture::setLastRotationAngle((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_28(Smoke::Stack x) {
        // void setRotationAngle(double)
        this->QPinchGesture::setRotationAngle((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    static void x_29(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QPinchGesture::tr((const char*)x[1].s_class,(const char*)0,(int)-1);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_30(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QPinchGesture::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)-1);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_31(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QPinchGesture::trUtf8((const char*)x[1].s_class,(const char*)0,(int)-1);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_32(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QPinchGesture::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)-1);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_33(Smoke::Stack x) {
        // QPinchGesture* QPinchGesture()
        x_QPinchGesture* xret = new x_QPinchGesture((QObject*)0);
        x[0].s_class = (void*)xret;
    }
    static void x_34(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QPinchGesture::staticMetaObject;
    }
    static void x_35(Smoke::Stack x) {
        x[0].s_enum = (long)QPinchGesture::ScaleFactorChanged;
    }
    static void x_36(Smoke::Stack x) {
        x[0].s_enum = (long)QPinchGesture::RotationAngleChanged;
    }
    static void x_37(Smoke::Stack x) {
        x[0].s_enum = (long)QPinchGesture::CenterPointChanged;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(13370, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QPinchGesture::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(13371, (void*)this, x)) return (void*)x[0].s_class;
        return this->QPinchGesture::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(13374, (void*)this, x)) return (int)x[0].s_int;
        return this->QPinchGesture::qt_metacall(x1, x2, x3);
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(11926, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(11927, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(11966, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(11967, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(11968, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const QMetaMethod& x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)&x1;
        if (this->_binding->callMethod(11969, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const QMetaMethod& x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)&x1;
        if (this->_binding->callMethod(11970, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    static void xenum_operation(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
        switch(xtype) {
        case 811: //QPinchGesture::ChangeFlag
            switch(xop) {
                case Smoke::EnumNew:
                    xdata = (void*)new QPinchGesture::ChangeFlag;
                    break;
                case Smoke::EnumDelete:
                    delete (QPinchGesture::ChangeFlag*)xdata;
                    break;
                case Smoke::EnumFromLong:
                    *(QPinchGesture::ChangeFlag*)xdata = (QPinchGesture::ChangeFlag)xvalue;
                    break;
                case Smoke::EnumToLong:
                    xvalue = (long)*(QPinchGesture::ChangeFlag*)xdata;
                    break;
            }
            break;
        }
    }
    ~x_QPinchGesture() { this->_binding->deleted(308, (void*)this); }
};
void xenum_QPinchGesture(Smoke::EnumOperation xop, Smoke::Index xtype, void *&xdata, long &xvalue) {
    x_QPinchGesture::xenum_operation(xop, xtype, xdata, xvalue);
}
void xcall_QPinchGesture(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QPinchGesture *xself = (x_QPinchGesture*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QPinchGesture::x_3(args);	break;
        case 4: x_QPinchGesture::x_4(args);	break;
        case 5: xself->x_5(args);	break;
        case 6: x_QPinchGesture::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: xself->x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: xself->x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: xself->x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: xself->x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: x_QPinchGesture::x_29(args);	break;
        case 30: x_QPinchGesture::x_30(args);	break;
        case 31: x_QPinchGesture::x_31(args);	break;
        case 32: x_QPinchGesture::x_32(args);	break;
        case 33: x_QPinchGesture::x_33(args);	break;
        case 34: x_QPinchGesture::x_34(args);	break;
        case 35: x_QPinchGesture::x_35(args);	break;
        case 36: x_QPinchGesture::x_36(args);	break;
        case 37: x_QPinchGesture::x_37(args);	break;
        case 38: delete (QPinchGesture*)xself;	break;
    }
}
class x_QPixmap : public QPixmap, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    static void x_1(Smoke::Stack x) {
        // QPixmap* QPixmap()
        x_QPixmap* xret = new x_QPixmap();
        x[0].s_class = (void*)xret;
    }
    explicit x_QPixmap() : QPixmap() {}
    static void x_2(Smoke::Stack x) {
        // QPixmap* QPixmap(QPlatformPixmap*)
        x_QPixmap* xret = new x_QPixmap((QPlatformPixmap*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QPixmap(QPlatformPixmap* x1) : QPixmap(x1) {}
    static void x_3(Smoke::Stack x) {
        // QPixmap* QPixmap(int, int)
        x_QPixmap* xret = new x_QPixmap((int)x[1].s_int,(int)x[2].s_int);
        x[0].s_class = (void*)xret;
    }
    explicit x_QPixmap(int x1, int x2) : QPixmap(x1, x2) {}
    static void x_4(Smoke::Stack x) {
        // QPixmap* QPixmap(const QSize&)
        x_QPixmap* xret = new x_QPixmap(*(const QSize*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QPixmap(const QSize& x1) : QPixmap(x1) {}
    static void x_5(Smoke::Stack x) {
        // QPixmap* QPixmap(const QString&, const char*, QFlags<Qt::ImageConversionFlag>)
        x_QPixmap* xret = new x_QPixmap(*(const QString*)x[1].s_class,(const char*)x[2].s_class,(QFlags<Qt::ImageConversionFlag>)x[3].s_uint);
        x[0].s_class = (void*)xret;
    }
    explicit x_QPixmap(const QString& x1, const char* x2, QFlags<Qt::ImageConversionFlag> x3) : QPixmap(x1, x2, x3) {}
    static void x_6(Smoke::Stack x) {
        // QPixmap* QPixmap(const char* const *)
        x_QPixmap* xret = new x_QPixmap((const char* const *)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QPixmap(const char* const * x1) : QPixmap(x1) {}
    static void x_7(Smoke::Stack x) {
        // QPixmap* QPixmap(const QPixmap&)
        x_QPixmap* xret = new x_QPixmap(*(const QPixmap*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QPixmap(const QPixmap& x1) : QPixmap(x1) {}
    void x_8(Smoke::Stack x) {
        // QPixmap& operator=(const QPixmap&)
        QPixmap& xret = this->QPixmap::operator=(*(const QPixmap*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    void x_9(Smoke::Stack x) {
        // void swap(QPixmap&)
        this->QPixmap::swap(*(QPixmap*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_10(Smoke::Stack x) {
        // QVariant operator QVariant() const
        QVariant xret = ((const x_QPixmap*)this)->QPixmap::operator QVariant();
        x[0].s_class = (void*)new QVariant(xret);
    }
    void x_11(Smoke::Stack x) {
        // bool isNull() const
        bool xret = ((const x_QPixmap*)this)->QPixmap::isNull();
        x[0].s_bool = xret;
    }
    void x_12(Smoke::Stack x) {
        // int devType() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPixmap*>(this))) {
            int xret = ((const x_QPixmap*)this)->QPixmap::devType();
            x[0].s_int = xret;
        } else {
            int xret = ((const x_QPixmap*)this)->devType();
            x[0].s_int = xret;
        }
    }
    void x_13(Smoke::Stack x) {
        // int width() const
        int xret = ((const x_QPixmap*)this)->QPixmap::width();
        x[0].s_int = xret;
    }
    void x_14(Smoke::Stack x) {
        // int height() const
        int xret = ((const x_QPixmap*)this)->QPixmap::height();
        x[0].s_int = xret;
    }
    void x_15(Smoke::Stack x) {
        // QSize size() const
        QSize xret = ((const x_QPixmap*)this)->QPixmap::size();
        x[0].s_class = (void*)new QSize(xret);
    }
    void x_16(Smoke::Stack x) {
        // QRect rect() const
        QRect xret = ((const x_QPixmap*)this)->QPixmap::rect();
        x[0].s_class = (void*)new QRect(xret);
    }
    void x_17(Smoke::Stack x) {
        // int depth() const
        int xret = ((const x_QPixmap*)this)->QPixmap::depth();
        x[0].s_int = xret;
    }
    static void x_18(Smoke::Stack x) {
        // static int defaultDepth()
        int xret = QPixmap::defaultDepth();
        x[0].s_int = xret;
    }
    void x_19(Smoke::Stack x) {
        // void fill(const QColor&)
        this->QPixmap::fill(*(const QColor*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_20(Smoke::Stack x) {
        // void fill(const QPaintDevice*, const QPoint&)
        this->QPixmap::fill((const QPaintDevice*)x[1].s_class,*(const QPoint*)x[2].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_21(Smoke::Stack x) {
        // void fill(const QPaintDevice*, int, int)
        this->QPixmap::fill((const QPaintDevice*)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_22(Smoke::Stack x) {
        // QBitmap mask() const
        QBitmap xret = ((const x_QPixmap*)this)->QPixmap::mask();
        x[0].s_class = (void*)new QBitmap(xret);
    }
    void x_23(Smoke::Stack x) {
        // void setMask(const QBitmap&)
        this->QPixmap::setMask(*(const QBitmap*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_24(Smoke::Stack x) {
        // double devicePixelRatio() const
        double xret = ((const x_QPixmap*)this)->QPixmap::devicePixelRatio();
        x[0].s_double = xret;
    }
    void x_25(Smoke::Stack x) {
        // void setDevicePixelRatio(double)
        this->QPixmap::setDevicePixelRatio((double)x[1].s_double);
        (void)x; // noop (for compiler warning)
    }
    void x_26(Smoke::Stack x) {
        // bool hasAlpha() const
        bool xret = ((const x_QPixmap*)this)->QPixmap::hasAlpha();
        x[0].s_bool = xret;
    }
    void x_27(Smoke::Stack x) {
        // bool hasAlphaChannel() const
        bool xret = ((const x_QPixmap*)this)->QPixmap::hasAlphaChannel();
        x[0].s_bool = xret;
    }
    void x_28(Smoke::Stack x) {
        // QBitmap createHeuristicMask(bool) const
        QBitmap xret = ((const x_QPixmap*)this)->QPixmap::createHeuristicMask((bool)x[1].s_bool);
        x[0].s_class = (void*)new QBitmap(xret);
    }
    void x_29(Smoke::Stack x) {
        // QBitmap createMaskFromColor(const QColor&, Qt::MaskMode) const
        QBitmap xret = ((const x_QPixmap*)this)->QPixmap::createMaskFromColor(*(const QColor*)x[1].s_class,(Qt::MaskMode)x[2].s_enum);
        x[0].s_class = (void*)new QBitmap(xret);
    }
    static void x_30(Smoke::Stack x) {
        // static QPixmap grabWindow(QIntegerForSizeof< void* >::Unsigned, int, int, int, int)
        QPixmap xret = QPixmap::grabWindow(*(QIntegerForSizeof< void* >::Unsigned*)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int,(int)x[5].s_int);
        x[0].s_class = (void*)new QPixmap(xret);
    }
    static void x_31(Smoke::Stack x) {
        // static QPixmap grabWidget(QObject*, const QRect&)
        QPixmap xret = QPixmap::grabWidget((QObject*)x[1].s_class,*(const QRect*)x[2].s_class);
        x[0].s_class = (void*)new QPixmap(xret);
    }
    static void x_32(Smoke::Stack x) {
        // static QPixmap grabWidget(QObject*, int, int, int, int)
        QPixmap xret = QPixmap::grabWidget((QObject*)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int,(int)x[5].s_int);
        x[0].s_class = (void*)new QPixmap(xret);
    }
    void x_33(Smoke::Stack x) {
        // QPixmap scaled(int, int, Qt::AspectRatioMode, Qt::TransformationMode) const
        QPixmap xret = ((const x_QPixmap*)this)->QPixmap::scaled((int)x[1].s_int,(int)x[2].s_int,(Qt::AspectRatioMode)x[3].s_enum,(Qt::TransformationMode)x[4].s_enum);
        x[0].s_class = (void*)new QPixmap(xret);
    }
    void x_34(Smoke::Stack x) {
        // QPixmap scaled(const QSize&, Qt::AspectRatioMode, Qt::TransformationMode) const
        QPixmap xret = ((const x_QPixmap*)this)->QPixmap::scaled(*(const QSize*)x[1].s_class,(Qt::AspectRatioMode)x[2].s_enum,(Qt::TransformationMode)x[3].s_enum);
        x[0].s_class = (void*)new QPixmap(xret);
    }
    void x_35(Smoke::Stack x) {
        // QPixmap scaledToWidth(int, Qt::TransformationMode) const
        QPixmap xret = ((const x_QPixmap*)this)->QPixmap::scaledToWidth((int)x[1].s_int,(Qt::TransformationMode)x[2].s_enum);
        x[0].s_class = (void*)new QPixmap(xret);
    }
    void x_36(Smoke::Stack x) {
        // QPixmap scaledToHeight(int, Qt::TransformationMode) const
        QPixmap xret = ((const x_QPixmap*)this)->QPixmap::scaledToHeight((int)x[1].s_int,(Qt::TransformationMode)x[2].s_enum);
        x[0].s_class = (void*)new QPixmap(xret);
    }
    void x_37(Smoke::Stack x) {
        // QPixmap transformed(const QMatrix&, Qt::TransformationMode) const
        QPixmap xret = ((const x_QPixmap*)this)->QPixmap::transformed(*(const QMatrix*)x[1].s_class,(Qt::TransformationMode)x[2].s_enum);
        x[0].s_class = (void*)new QPixmap(xret);
    }
    static void x_38(Smoke::Stack x) {
        // static QMatrix trueMatrix(const QMatrix&, int, int)
        QMatrix xret = QPixmap::trueMatrix(*(const QMatrix*)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int);
        x[0].s_class = (void*)new QMatrix(xret);
    }
    void x_39(Smoke::Stack x) {
        // QPixmap transformed(const QTransform&, Qt::TransformationMode) const
        QPixmap xret = ((const x_QPixmap*)this)->QPixmap::transformed(*(const QTransform*)x[1].s_class,(Qt::TransformationMode)x[2].s_enum);
        x[0].s_class = (void*)new QPixmap(xret);
    }
    static void x_40(Smoke::Stack x) {
        // static QTransform trueMatrix(const QTransform&, int, int)
        QTransform xret = QPixmap::trueMatrix(*(const QTransform*)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int);
        x[0].s_class = (void*)new QTransform(xret);
    }
    void x_41(Smoke::Stack x) {
        // QImage toImage() const
        QImage xret = ((const x_QPixmap*)this)->QPixmap::toImage();
        x[0].s_class = (void*)new QImage(xret);
    }
    static void x_42(Smoke::Stack x) {
        // static QPixmap fromImage(const QImage&, QFlags<Qt::ImageConversionFlag>)
        QPixmap xret = QPixmap::fromImage(*(const QImage*)x[1].s_class,(QFlags<Qt::ImageConversionFlag>)x[2].s_uint);
        x[0].s_class = (void*)new QPixmap(xret);
    }
    static void x_43(Smoke::Stack x) {
        // static QPixmap fromImageReader(QImageReader*, QFlags<Qt::ImageConversionFlag>)
        QPixmap xret = QPixmap::fromImageReader((QImageReader*)x[1].s_class,(QFlags<Qt::ImageConversionFlag>)x[2].s_uint);
        x[0].s_class = (void*)new QPixmap(xret);
    }
    void x_44(Smoke::Stack x) {
        // bool load(const QString&, const char*, QFlags<Qt::ImageConversionFlag>)
        bool xret = this->QPixmap::load(*(const QString*)x[1].s_class,(const char*)x[2].s_class,(QFlags<Qt::ImageConversionFlag>)x[3].s_uint);
        x[0].s_bool = xret;
    }
    void x_45(Smoke::Stack x) {
        // bool loadFromData(const unsigned char*, unsigned int, const char*, QFlags<Qt::ImageConversionFlag>)
        bool xret = this->QPixmap::loadFromData((const unsigned char*)x[1].s_class,(unsigned int)x[2].s_uint,(const char*)x[3].s_class,(QFlags<Qt::ImageConversionFlag>)x[4].s_uint);
        x[0].s_bool = xret;
    }
    void x_46(Smoke::Stack x) {
        // bool loadFromData(const QByteArray&, const char*, QFlags<Qt::ImageConversionFlag>)
        bool xret = this->QPixmap::loadFromData(*(const QByteArray*)x[1].s_class,(const char*)x[2].s_class,(QFlags<Qt::ImageConversionFlag>)x[3].s_uint);
        x[0].s_bool = xret;
    }
    void x_47(Smoke::Stack x) {
        // bool save(const QString&, const char*, int) const
        bool xret = ((const x_QPixmap*)this)->QPixmap::save(*(const QString*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_bool = xret;
    }
    void x_48(Smoke::Stack x) {
        // bool save(QIODevice*, const char*, int) const
        bool xret = ((const x_QPixmap*)this)->QPixmap::save((QIODevice*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_bool = xret;
    }
    void x_49(Smoke::Stack x) {
        // bool convertFromImage(const QImage&, QFlags<Qt::ImageConversionFlag>)
        bool xret = this->QPixmap::convertFromImage(*(const QImage*)x[1].s_class,(QFlags<Qt::ImageConversionFlag>)x[2].s_uint);
        x[0].s_bool = xret;
    }
    void x_50(Smoke::Stack x) {
        // QPixmap copy(int, int, int, int) const
        QPixmap xret = ((const x_QPixmap*)this)->QPixmap::copy((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int);
        x[0].s_class = (void*)new QPixmap(xret);
    }
    void x_51(Smoke::Stack x) {
        // QPixmap copy(const QRect&) const
        QPixmap xret = ((const x_QPixmap*)this)->QPixmap::copy(*(const QRect*)x[1].s_class);
        x[0].s_class = (void*)new QPixmap(xret);
    }
    void x_52(Smoke::Stack x) {
        // void scroll(int, int, int, int, int, int, QRegion*)
        this->QPixmap::scroll((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int,(int)x[5].s_int,(int)x[6].s_int,(QRegion*)x[7].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_53(Smoke::Stack x) {
        // void scroll(int, int, const QRect&, QRegion*)
        this->QPixmap::scroll((int)x[1].s_int,(int)x[2].s_int,*(const QRect*)x[3].s_class,(QRegion*)x[4].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_54(Smoke::Stack x) {
        // long long cacheKey() const
        long long xret = ((const x_QPixmap*)this)->QPixmap::cacheKey();
        x[0].s_class = (void*)new long long(xret);
    }
    void x_55(Smoke::Stack x) {
        // bool isDetached() const
        bool xret = ((const x_QPixmap*)this)->QPixmap::isDetached();
        x[0].s_bool = xret;
    }
    void x_56(Smoke::Stack x) {
        // void detach()
        this->QPixmap::detach();
        (void)x; // noop (for compiler warning)
    }
    void x_57(Smoke::Stack x) {
        // bool isQBitmap() const
        bool xret = ((const x_QPixmap*)this)->QPixmap::isQBitmap();
        x[0].s_bool = xret;
    }
    void x_58(Smoke::Stack x) {
        // QPaintEngine* paintEngine() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPixmap*>(this))) {
            QPaintEngine* xret = ((const x_QPixmap*)this)->QPixmap::paintEngine();
            x[0].s_class = (void*)xret;
        } else {
            QPaintEngine* xret = ((const x_QPixmap*)this)->paintEngine();
            x[0].s_class = (void*)xret;
        }
    }
    void x_59(Smoke::Stack x) {
        // bool operator!() const
        bool xret = ((const x_QPixmap*)this)->QPixmap::operator!();
        x[0].s_bool = xret;
    }
    void x_60(Smoke::Stack x) {
        // int metric(QPaintDevice::PaintDeviceMetric) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPixmap*>(this))) {
            int xret = ((const x_QPixmap*)this)->QPixmap::metric((QPaintDevice::PaintDeviceMetric)x[1].s_enum);
            x[0].s_int = xret;
        } else {
            int xret = ((const x_QPixmap*)this)->metric((QPaintDevice::PaintDeviceMetric)x[1].s_enum);
            x[0].s_int = xret;
        }
    }
    void x_61(Smoke::Stack x) {
        // QPlatformPixmap* handle() const
        QPlatformPixmap* xret = ((const x_QPixmap*)this)->QPixmap::handle();
        x[0].s_class = (void*)xret;
    }
    void x_62(Smoke::Stack x) {
        // QExplicitlySharedDataPointer<QPlatformPixmap>& data_ptr()
        QExplicitlySharedDataPointer<QPlatformPixmap>& xret = this->QPixmap::data_ptr();
        x[0].s_class = (void*)&xret;
    }
    static void x_63(Smoke::Stack x) {
        // QPixmap* QPixmap(const QString&)
        x_QPixmap* xret = new x_QPixmap(*(const QString*)x[1].s_class,(const char*)0,(QFlags<Qt::ImageConversionFlag>)Qt::AutoColor);
        x[0].s_class = (void*)xret;
    }
    static void x_64(Smoke::Stack x) {
        // QPixmap* QPixmap(const QString&, const char*)
        x_QPixmap* xret = new x_QPixmap(*(const QString*)x[1].s_class,(const char*)x[2].s_class,(QFlags<Qt::ImageConversionFlag>)Qt::AutoColor);
        x[0].s_class = (void*)xret;
    }
    void x_65(Smoke::Stack x) {
        // void fill()
        this->QPixmap::fill((const QColor&)Qt::white);
        (void)x; // noop (for compiler warning)
    }
    void x_66(Smoke::Stack x) {
        // QBitmap createHeuristicMask() const
        QBitmap xret = ((const x_QPixmap*)this)->QPixmap::createHeuristicMask((bool)true);
        x[0].s_class = (void*)new QBitmap(xret);
    }
    void x_67(Smoke::Stack x) {
        // QBitmap createMaskFromColor(const QColor&) const
        QBitmap xret = ((const x_QPixmap*)this)->QPixmap::createMaskFromColor(*(const QColor*)x[1].s_class,(Qt::MaskMode)Qt::MaskInColor);
        x[0].s_class = (void*)new QBitmap(xret);
    }
    static void x_68(Smoke::Stack x) {
        // static QPixmap grabWindow(QIntegerForSizeof< void* >::Unsigned)
        QPixmap xret = QPixmap::grabWindow(*(QIntegerForSizeof< void* >::Unsigned*)x[1].s_class,(int)0,(int)0,(int)-1,(int)-1);
        x[0].s_class = (void*)new QPixmap(xret);
    }
    static void x_69(Smoke::Stack x) {
        // static QPixmap grabWindow(QIntegerForSizeof< void* >::Unsigned, int)
        QPixmap xret = QPixmap::grabWindow(*(QIntegerForSizeof< void* >::Unsigned*)x[1].s_class,(int)x[2].s_int,(int)0,(int)-1,(int)-1);
        x[0].s_class = (void*)new QPixmap(xret);
    }
    static void x_70(Smoke::Stack x) {
        // static QPixmap grabWindow(QIntegerForSizeof< void* >::Unsigned, int, int)
        QPixmap xret = QPixmap::grabWindow(*(QIntegerForSizeof< void* >::Unsigned*)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int,(int)-1,(int)-1);
        x[0].s_class = (void*)new QPixmap(xret);
    }
    static void x_71(Smoke::Stack x) {
        // static QPixmap grabWindow(QIntegerForSizeof< void* >::Unsigned, int, int, int)
        QPixmap xret = QPixmap::grabWindow(*(QIntegerForSizeof< void* >::Unsigned*)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int,(int)-1);
        x[0].s_class = (void*)new QPixmap(xret);
    }
    static void x_72(Smoke::Stack x) {
        // static QPixmap grabWidget(QObject*)
        QPixmap xret = QPixmap::grabWidget((QObject*)x[1].s_class,(int)0,(int)0,(int)-1,(int)-1);
        x[0].s_class = (void*)new QPixmap(xret);
    }
    static void x_73(Smoke::Stack x) {
        // static QPixmap grabWidget(QObject*, int)
        QPixmap xret = QPixmap::grabWidget((QObject*)x[1].s_class,(int)x[2].s_int,(int)0,(int)-1,(int)-1);
        x[0].s_class = (void*)new QPixmap(xret);
    }
    static void x_74(Smoke::Stack x) {
        // static QPixmap grabWidget(QObject*, int, int)
        QPixmap xret = QPixmap::grabWidget((QObject*)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int,(int)-1,(int)-1);
        x[0].s_class = (void*)new QPixmap(xret);
    }
    static void x_75(Smoke::Stack x) {
        // static QPixmap grabWidget(QObject*, int, int, int)
        QPixmap xret = QPixmap::grabWidget((QObject*)x[1].s_class,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int,(int)-1);
        x[0].s_class = (void*)new QPixmap(xret);
    }
    void x_76(Smoke::Stack x) {
        // QPixmap scaled(int, int) const
        QPixmap xret = ((const x_QPixmap*)this)->QPixmap::scaled((int)x[1].s_int,(int)x[2].s_int,(Qt::AspectRatioMode)Qt::IgnoreAspectRatio,(Qt::TransformationMode)Qt::FastTransformation);
        x[0].s_class = (void*)new QPixmap(xret);
    }
    void x_77(Smoke::Stack x) {
        // QPixmap scaled(int, int, Qt::AspectRatioMode) const
        QPixmap xret = ((const x_QPixmap*)this)->QPixmap::scaled((int)x[1].s_int,(int)x[2].s_int,(Qt::AspectRatioMode)x[3].s_enum,(Qt::TransformationMode)Qt::FastTransformation);
        x[0].s_class = (void*)new QPixmap(xret);
    }
    void x_78(Smoke::Stack x) {
        // QPixmap scaled(const QSize&) const
        QPixmap xret = ((const x_QPixmap*)this)->QPixmap::scaled(*(const QSize*)x[1].s_class,(Qt::AspectRatioMode)Qt::IgnoreAspectRatio,(Qt::TransformationMode)Qt::FastTransformation);
        x[0].s_class = (void*)new QPixmap(xret);
    }
    void x_79(Smoke::Stack x) {
        // QPixmap scaled(const QSize&, Qt::AspectRatioMode) const
        QPixmap xret = ((const x_QPixmap*)this)->QPixmap::scaled(*(const QSize*)x[1].s_class,(Qt::AspectRatioMode)x[2].s_enum,(Qt::TransformationMode)Qt::FastTransformation);
        x[0].s_class = (void*)new QPixmap(xret);
    }
    void x_80(Smoke::Stack x) {
        // QPixmap scaledToWidth(int) const
        QPixmap xret = ((const x_QPixmap*)this)->QPixmap::scaledToWidth((int)x[1].s_int,(Qt::TransformationMode)Qt::FastTransformation);
        x[0].s_class = (void*)new QPixmap(xret);
    }
    void x_81(Smoke::Stack x) {
        // QPixmap scaledToHeight(int) const
        QPixmap xret = ((const x_QPixmap*)this)->QPixmap::scaledToHeight((int)x[1].s_int,(Qt::TransformationMode)Qt::FastTransformation);
        x[0].s_class = (void*)new QPixmap(xret);
    }
    void x_82(Smoke::Stack x) {
        // QPixmap transformed(const QMatrix&) const
        QPixmap xret = ((const x_QPixmap*)this)->QPixmap::transformed(*(const QMatrix*)x[1].s_class,(Qt::TransformationMode)Qt::FastTransformation);
        x[0].s_class = (void*)new QPixmap(xret);
    }
    void x_83(Smoke::Stack x) {
        // QPixmap transformed(const QTransform&) const
        QPixmap xret = ((const x_QPixmap*)this)->QPixmap::transformed(*(const QTransform*)x[1].s_class,(Qt::TransformationMode)Qt::FastTransformation);
        x[0].s_class = (void*)new QPixmap(xret);
    }
    static void x_84(Smoke::Stack x) {
        // static QPixmap fromImage(const QImage&)
        QPixmap xret = QPixmap::fromImage(*(const QImage*)x[1].s_class,(QFlags<Qt::ImageConversionFlag>)Qt::AutoColor);
        x[0].s_class = (void*)new QPixmap(xret);
    }
    static void x_85(Smoke::Stack x) {
        // static QPixmap fromImageReader(QImageReader*)
        QPixmap xret = QPixmap::fromImageReader((QImageReader*)x[1].s_class,(QFlags<Qt::ImageConversionFlag>)Qt::AutoColor);
        x[0].s_class = (void*)new QPixmap(xret);
    }
    void x_86(Smoke::Stack x) {
        // bool load(const QString&)
        bool xret = this->QPixmap::load(*(const QString*)x[1].s_class,(const char*)0,(QFlags<Qt::ImageConversionFlag>)Qt::AutoColor);
        x[0].s_bool = xret;
    }
    void x_87(Smoke::Stack x) {
        // bool load(const QString&, const char*)
        bool xret = this->QPixmap::load(*(const QString*)x[1].s_class,(const char*)x[2].s_class,(QFlags<Qt::ImageConversionFlag>)Qt::AutoColor);
        x[0].s_bool = xret;
    }
    void x_88(Smoke::Stack x) {
        // bool loadFromData(const unsigned char*, unsigned int)
        bool xret = this->QPixmap::loadFromData((const unsigned char*)x[1].s_class,(unsigned int)x[2].s_uint,(const char*)0,(QFlags<Qt::ImageConversionFlag>)Qt::AutoColor);
        x[0].s_bool = xret;
    }
    void x_89(Smoke::Stack x) {
        // bool loadFromData(const unsigned char*, unsigned int, const char*)
        bool xret = this->QPixmap::loadFromData((const unsigned char*)x[1].s_class,(unsigned int)x[2].s_uint,(const char*)x[3].s_class,(QFlags<Qt::ImageConversionFlag>)Qt::AutoColor);
        x[0].s_bool = xret;
    }
    void x_90(Smoke::Stack x) {
        // bool loadFromData(const QByteArray&)
        bool xret = this->QPixmap::loadFromData(*(const QByteArray*)x[1].s_class,(const char*)0,(QFlags<Qt::ImageConversionFlag>)Qt::AutoColor);
        x[0].s_bool = xret;
    }
    void x_91(Smoke::Stack x) {
        // bool loadFromData(const QByteArray&, const char*)
        bool xret = this->QPixmap::loadFromData(*(const QByteArray*)x[1].s_class,(const char*)x[2].s_class,(QFlags<Qt::ImageConversionFlag>)Qt::AutoColor);
        x[0].s_bool = xret;
    }
    void x_92(Smoke::Stack x) {
        // bool save(const QString&) const
        bool xret = ((const x_QPixmap*)this)->QPixmap::save(*(const QString*)x[1].s_class,(const char*)0,(int)-1);
        x[0].s_bool = xret;
    }
    void x_93(Smoke::Stack x) {
        // bool save(const QString&, const char*) const
        bool xret = ((const x_QPixmap*)this)->QPixmap::save(*(const QString*)x[1].s_class,(const char*)x[2].s_class,(int)-1);
        x[0].s_bool = xret;
    }
    void x_94(Smoke::Stack x) {
        // bool save(QIODevice*) const
        bool xret = ((const x_QPixmap*)this)->QPixmap::save((QIODevice*)x[1].s_class,(const char*)0,(int)-1);
        x[0].s_bool = xret;
    }
    void x_95(Smoke::Stack x) {
        // bool save(QIODevice*, const char*) const
        bool xret = ((const x_QPixmap*)this)->QPixmap::save((QIODevice*)x[1].s_class,(const char*)x[2].s_class,(int)-1);
        x[0].s_bool = xret;
    }
    void x_96(Smoke::Stack x) {
        // bool convertFromImage(const QImage&)
        bool xret = this->QPixmap::convertFromImage(*(const QImage*)x[1].s_class,(QFlags<Qt::ImageConversionFlag>)Qt::AutoColor);
        x[0].s_bool = xret;
    }
    void x_97(Smoke::Stack x) {
        // QPixmap copy() const
        QPixmap xret = ((const x_QPixmap*)this)->QPixmap::copy((const QRect&)QRect());
        x[0].s_class = (void*)new QPixmap(xret);
    }
    void x_98(Smoke::Stack x) {
        // void scroll(int, int, int, int, int, int)
        this->QPixmap::scroll((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int,(int)x[4].s_int,(int)x[5].s_int,(int)x[6].s_int,(QRegion*)0);
        (void)x; // noop (for compiler warning)
    }
    void x_99(Smoke::Stack x) {
        // void scroll(int, int, const QRect&)
        this->QPixmap::scroll((int)x[1].s_int,(int)x[2].s_int,*(const QRect*)x[3].s_class,(QRegion*)0);
        (void)x; // noop (for compiler warning)
    }
    virtual int devType() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(13419, (void*)this, x)) return (int)x[0].s_int;
        return this->QPixmap::devType();
    }
    virtual QPaintEngine* paintEngine() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(13465, (void*)this, x)) return (QPaintEngine*)x[0].s_class;
        return this->QPixmap::paintEngine();
    }
    virtual int metric(QPaintDevice::PaintDeviceMetric x1) const {
        Smoke::StackItem x[2];
        x[1].s_enum = x1;
        if (this->_binding->callMethod(13467, (void*)this, x)) return (int)x[0].s_int;
        return this->QPixmap::metric(x1);
    }
    virtual void initPainter(QPainter* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(12499, (void*)this, x)) return;
        this->QPaintDevice::initPainter(x1);
    }
    virtual QPaintDevice* redirected(QPoint* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(12500, (void*)this, x)) return (QPaintDevice*)x[0].s_class;
        return this->QPaintDevice::redirected(x1);
    }
    virtual QPainter* sharedPainter() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(12501, (void*)this, x)) return (QPainter*)x[0].s_class;
        return this->QPaintDevice::sharedPainter();
    }
    ~x_QPixmap() { this->_binding->deleted(309, (void*)this); }
};
void xcall_QPixmap(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QPixmap *xself = (x_QPixmap*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: x_QPixmap::x_1(args);	break;
        case 2: x_QPixmap::x_2(args);	break;
        case 3: x_QPixmap::x_3(args);	break;
        case 4: x_QPixmap::x_4(args);	break;
        case 5: x_QPixmap::x_5(args);	break;
        case 6: x_QPixmap::x_6(args);	break;
        case 7: x_QPixmap::x_7(args);	break;
        case 8: xself->x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: x_QPixmap::x_18(args);	break;
        case 19: xself->x_19(args);	break;
        case 20: xself->x_20(args);	break;
        case 21: xself->x_21(args);	break;
        case 22: xself->x_22(args);	break;
        case 23: xself->x_23(args);	break;
        case 24: xself->x_24(args);	break;
        case 25: xself->x_25(args);	break;
        case 26: xself->x_26(args);	break;
        case 27: xself->x_27(args);	break;
        case 28: xself->x_28(args);	break;
        case 29: xself->x_29(args);	break;
        case 30: x_QPixmap::x_30(args);	break;
        case 31: x_QPixmap::x_31(args);	break;
        case 32: x_QPixmap::x_32(args);	break;
        case 33: xself->x_33(args);	break;
        case 34: xself->x_34(args);	break;
        case 35: xself->x_35(args);	break;
        case 36: xself->x_36(args);	break;
        case 37: xself->x_37(args);	break;
        case 38: x_QPixmap::x_38(args);	break;
        case 39: xself->x_39(args);	break;
        case 40: x_QPixmap::x_40(args);	break;
        case 41: xself->x_41(args);	break;
        case 42: x_QPixmap::x_42(args);	break;
        case 43: x_QPixmap::x_43(args);	break;
        case 44: xself->x_44(args);	break;
        case 45: xself->x_45(args);	break;
        case 46: xself->x_46(args);	break;
        case 47: xself->x_47(args);	break;
        case 48: xself->x_48(args);	break;
        case 49: xself->x_49(args);	break;
        case 50: xself->x_50(args);	break;
        case 51: xself->x_51(args);	break;
        case 52: xself->x_52(args);	break;
        case 53: xself->x_53(args);	break;
        case 54: xself->x_54(args);	break;
        case 55: xself->x_55(args);	break;
        case 56: xself->x_56(args);	break;
        case 57: xself->x_57(args);	break;
        case 58: xself->x_58(args);	break;
        case 59: xself->x_59(args);	break;
        case 60: xself->x_60(args);	break;
        case 61: xself->x_61(args);	break;
        case 62: xself->x_62(args);	break;
        case 63: x_QPixmap::x_63(args);	break;
        case 64: x_QPixmap::x_64(args);	break;
        case 65: xself->x_65(args);	break;
        case 66: xself->x_66(args);	break;
        case 67: xself->x_67(args);	break;
        case 68: x_QPixmap::x_68(args);	break;
        case 69: x_QPixmap::x_69(args);	break;
        case 70: x_QPixmap::x_70(args);	break;
        case 71: x_QPixmap::x_71(args);	break;
        case 72: x_QPixmap::x_72(args);	break;
        case 73: x_QPixmap::x_73(args);	break;
        case 74: x_QPixmap::x_74(args);	break;
        case 75: x_QPixmap::x_75(args);	break;
        case 76: xself->x_76(args);	break;
        case 77: xself->x_77(args);	break;
        case 78: xself->x_78(args);	break;
        case 79: xself->x_79(args);	break;
        case 80: xself->x_80(args);	break;
        case 81: xself->x_81(args);	break;
        case 82: xself->x_82(args);	break;
        case 83: xself->x_83(args);	break;
        case 84: x_QPixmap::x_84(args);	break;
        case 85: x_QPixmap::x_85(args);	break;
        case 86: xself->x_86(args);	break;
        case 87: xself->x_87(args);	break;
        case 88: xself->x_88(args);	break;
        case 89: xself->x_89(args);	break;
        case 90: xself->x_90(args);	break;
        case 91: xself->x_91(args);	break;
        case 92: xself->x_92(args);	break;
        case 93: xself->x_93(args);	break;
        case 94: xself->x_94(args);	break;
        case 95: xself->x_95(args);	break;
        case 96: xself->x_96(args);	break;
        case 97: xself->x_97(args);	break;
        case 98: xself->x_98(args);	break;
        case 99: xself->x_99(args);	break;
        case 100: delete (QPixmap*)xself;	break;
    }
}
class x_QPixmapCache : public QPixmapCache {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    static void x_1(Smoke::Stack x) {
        // static int cacheLimit()
        int xret = QPixmapCache::cacheLimit();
        x[0].s_int = xret;
    }
    static void x_2(Smoke::Stack x) {
        // static void setCacheLimit(int)
        QPixmapCache::setCacheLimit((int)x[1].s_int);
        (void)x; // noop (for compiler warning)
    }
    static void x_3(Smoke::Stack x) {
        // static QPixmap* find(const QString&)
        QPixmap* xret = QPixmapCache::find(*(const QString*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    static void x_4(Smoke::Stack x) {
        // static bool find(const QString&, QPixmap&)
        bool xret = QPixmapCache::find(*(const QString*)x[1].s_class,*(QPixmap*)x[2].s_class);
        x[0].s_bool = xret;
    }
    static void x_5(Smoke::Stack x) {
        // static bool find(const QString&, QPixmap*)
        bool xret = QPixmapCache::find(*(const QString*)x[1].s_class,(QPixmap*)x[2].s_class);
        x[0].s_bool = xret;
    }
    static void x_6(Smoke::Stack x) {
        // static bool find(const QPixmapCache::Key&, QPixmap*)
        bool xret = QPixmapCache::find(*(const QPixmapCache::Key*)x[1].s_class,(QPixmap*)x[2].s_class);
        x[0].s_bool = xret;
    }
    static void x_7(Smoke::Stack x) {
        // static bool insert(const QString&, const QPixmap&)
        bool xret = QPixmapCache::insert(*(const QString*)x[1].s_class,*(const QPixmap*)x[2].s_class);
        x[0].s_bool = xret;
    }
    static void x_8(Smoke::Stack x) {
        // static QPixmapCache::Key insert(const QPixmap&)
        QPixmapCache::Key xret = QPixmapCache::insert(*(const QPixmap*)x[1].s_class);
        x[0].s_class = (void*)new QPixmapCache::Key(xret);
    }
    static void x_9(Smoke::Stack x) {
        // static bool replace(const QPixmapCache::Key&, const QPixmap&)
        bool xret = QPixmapCache::replace(*(const QPixmapCache::Key*)x[1].s_class,*(const QPixmap*)x[2].s_class);
        x[0].s_bool = xret;
    }
    static void x_10(Smoke::Stack x) {
        // static void remove(const QString&)
        QPixmapCache::remove(*(const QString*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    static void x_11(Smoke::Stack x) {
        // static void remove(const QPixmapCache::Key&)
        QPixmapCache::remove(*(const QPixmapCache::Key*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    static void x_12(Smoke::Stack x) {
        // static void clear()
        QPixmapCache::clear();
        (void)x; // noop (for compiler warning)
    }
    static void x_13(Smoke::Stack x) {
        // QPixmapCache* QPixmapCache()
        x_QPixmapCache* xret = new x_QPixmapCache();
        x[0].s_class = (void*)xret;
    }
    explicit x_QPixmapCache() : QPixmapCache() {}
    static void x_14(Smoke::Stack x) {
        // QPixmapCache* QPixmapCache(const QPixmapCache&)
        x_QPixmapCache* xret = new x_QPixmapCache(*(const QPixmapCache*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QPixmapCache(const QPixmapCache& x1) : QPixmapCache(x1) {}
    ~x_QPixmapCache() { this->_binding->deleted(310, (void*)this); }
};
void xcall_QPixmapCache(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QPixmapCache *xself = (x_QPixmapCache*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: x_QPixmapCache::x_1(args);	break;
        case 2: x_QPixmapCache::x_2(args);	break;
        case 3: x_QPixmapCache::x_3(args);	break;
        case 4: x_QPixmapCache::x_4(args);	break;
        case 5: x_QPixmapCache::x_5(args);	break;
        case 6: x_QPixmapCache::x_6(args);	break;
        case 7: x_QPixmapCache::x_7(args);	break;
        case 8: x_QPixmapCache::x_8(args);	break;
        case 9: x_QPixmapCache::x_9(args);	break;
        case 10: x_QPixmapCache::x_10(args);	break;
        case 11: x_QPixmapCache::x_11(args);	break;
        case 12: x_QPixmapCache::x_12(args);	break;
        case 13: x_QPixmapCache::x_13(args);	break;
        case 14: x_QPixmapCache::x_14(args);	break;
        case 15: delete (QPixmapCache*)xself;	break;
    }
}
class x_QPixmapCache__Key : public QPixmapCache::Key {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    static void x_1(Smoke::Stack x) {
        // QPixmapCache::Key* Key()
        x_QPixmapCache__Key* xret = new x_QPixmapCache__Key();
        x[0].s_class = (void*)xret;
    }
    explicit x_QPixmapCache__Key() : Key() {}
    static void x_2(Smoke::Stack x) {
        // QPixmapCache::Key* Key(const QPixmapCache::Key&)
        x_QPixmapCache__Key* xret = new x_QPixmapCache__Key(*(const QPixmapCache::Key*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QPixmapCache__Key(const QPixmapCache::Key& x1) : Key(x1) {}
    void x_3(Smoke::Stack x) {
        // bool operator==(const QPixmapCache::Key&) const
        bool xret = ((const x_QPixmapCache__Key*)this)->QPixmapCache::Key::operator==(*(const QPixmapCache::Key*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_4(Smoke::Stack x) {
        // bool operator!=(const QPixmapCache::Key&) const
        bool xret = ((const x_QPixmapCache__Key*)this)->QPixmapCache::Key::operator!=(*(const QPixmapCache::Key*)x[1].s_class);
        x[0].s_bool = xret;
    }
    void x_5(Smoke::Stack x) {
        // QPixmapCache::Key& operator=(const QPixmapCache::Key&)
        QPixmapCache::Key& xret = this->QPixmapCache::Key::operator=(*(const QPixmapCache::Key*)x[1].s_class);
        x[0].s_class = (void*)&xret;
    }
    ~x_QPixmapCache__Key() { this->_binding->deleted(311, (void*)this); }
};
void xcall_QPixmapCache__Key(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QPixmapCache__Key *xself = (x_QPixmapCache__Key*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: x_QPixmapCache__Key::x_1(args);	break;
        case 2: x_QPixmapCache__Key::x_2(args);	break;
        case 3: xself->x_3(args);	break;
        case 4: xself->x_4(args);	break;
        case 5: xself->x_5(args);	break;
        case 6: delete (QPixmapCache::Key*)xself;	break;
    }
}
class x_QPlainTextDocumentLayout : public QPlainTextDocumentLayout, public __internal_SmokeClass {
    SmokeBinding* _binding;
public:
    void x_0(Smoke::Stack x) {
        // set the smoke binding
        _binding = (SmokeBinding*)x[1].s_class;
    }
    void x_1(Smoke::Stack x) {
        // virtual const QMetaObject* metaObject() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPlainTextDocumentLayout*>(this))) {
            const QMetaObject* xret = ((const x_QPlainTextDocumentLayout*)this)->QPlainTextDocumentLayout::metaObject();
            x[0].s_class = (void*)xret;
        } else {
            const QMetaObject* xret = ((const x_QPlainTextDocumentLayout*)this)->metaObject();
            x[0].s_class = (void*)xret;
        }
    }
    void x_2(Smoke::Stack x) {
        // virtual void* qt_metacast(const char*)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPlainTextDocumentLayout*>(this))) {
            void* xret = this->QPlainTextDocumentLayout::qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        } else {
            void* xret = this->qt_metacast((const char*)x[1].s_class);
            x[0].s_class = (void*)xret;
        }
    }
    static void x_3(Smoke::Stack x) {
        // static QString tr(const char*, const char*, int)
        QString xret = QPlainTextDocumentLayout::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_4(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*, int)
        QString xret = QPlainTextDocumentLayout::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)x[3].s_int);
        x[0].s_class = (void*)new QString(xret);
    }
    void x_5(Smoke::Stack x) {
        // virtual int qt_metacall(QMetaObject::Call, int, void**)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPlainTextDocumentLayout*>(this))) {
            int xret = this->QPlainTextDocumentLayout::qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        } else {
            int xret = this->qt_metacall((QMetaObject::Call)x[1].s_enum,(int)x[2].s_int,(void**)x[3].s_class);
            x[0].s_int = xret;
        }
    }
    static void x_6(Smoke::Stack x) {
        // QPlainTextDocumentLayout* QPlainTextDocumentLayout(QTextDocument*)
        x_QPlainTextDocumentLayout* xret = new x_QPlainTextDocumentLayout((QTextDocument*)x[1].s_class);
        x[0].s_class = (void*)xret;
    }
    explicit x_QPlainTextDocumentLayout(QTextDocument* x1) : QPlainTextDocumentLayout(x1) {}
    void x_7(Smoke::Stack x) {
        // void draw(QPainter*, const QAbstractTextDocumentLayout::PaintContext&)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPlainTextDocumentLayout*>(this))) {
            this->QPlainTextDocumentLayout::draw((QPainter*)x[1].s_class,*(const QAbstractTextDocumentLayout::PaintContext*)x[2].s_class);
            (void)x; // noop (for compiler warning)
        } else {
            this->draw((QPainter*)x[1].s_class,*(const QAbstractTextDocumentLayout::PaintContext*)x[2].s_class);
            (void)x; // noop (for compiler warning)
        }
    }
    void x_8(Smoke::Stack x) {
        // int hitTest(const QPointF&, Qt::HitTestAccuracy) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPlainTextDocumentLayout*>(this))) {
            int xret = ((const x_QPlainTextDocumentLayout*)this)->QPlainTextDocumentLayout::hitTest(*(const QPointF*)x[1].s_class,(Qt::HitTestAccuracy)x[2].s_enum);
            x[0].s_int = xret;
        } else {
            int xret = ((const x_QPlainTextDocumentLayout*)this)->hitTest(*(const QPointF*)x[1].s_class,(Qt::HitTestAccuracy)x[2].s_enum);
            x[0].s_int = xret;
        }
    }
    void x_9(Smoke::Stack x) {
        // int pageCount() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPlainTextDocumentLayout*>(this))) {
            int xret = ((const x_QPlainTextDocumentLayout*)this)->QPlainTextDocumentLayout::pageCount();
            x[0].s_int = xret;
        } else {
            int xret = ((const x_QPlainTextDocumentLayout*)this)->pageCount();
            x[0].s_int = xret;
        }
    }
    void x_10(Smoke::Stack x) {
        // QSizeF documentSize() const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPlainTextDocumentLayout*>(this))) {
            QSizeF xret = ((const x_QPlainTextDocumentLayout*)this)->QPlainTextDocumentLayout::documentSize();
            x[0].s_class = (void*)new QSizeF(xret);
        } else {
            QSizeF xret = ((const x_QPlainTextDocumentLayout*)this)->documentSize();
            x[0].s_class = (void*)new QSizeF(xret);
        }
    }
    void x_11(Smoke::Stack x) {
        // QRectF frameBoundingRect(QTextFrame*) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPlainTextDocumentLayout*>(this))) {
            QRectF xret = ((const x_QPlainTextDocumentLayout*)this)->QPlainTextDocumentLayout::frameBoundingRect((QTextFrame*)x[1].s_class);
            x[0].s_class = (void*)new QRectF(xret);
        } else {
            QRectF xret = ((const x_QPlainTextDocumentLayout*)this)->frameBoundingRect((QTextFrame*)x[1].s_class);
            x[0].s_class = (void*)new QRectF(xret);
        }
    }
    void x_12(Smoke::Stack x) {
        // QRectF blockBoundingRect(const QTextBlock&) const
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPlainTextDocumentLayout*>(this))) {
            QRectF xret = ((const x_QPlainTextDocumentLayout*)this)->QPlainTextDocumentLayout::blockBoundingRect(*(const QTextBlock*)x[1].s_class);
            x[0].s_class = (void*)new QRectF(xret);
        } else {
            QRectF xret = ((const x_QPlainTextDocumentLayout*)this)->blockBoundingRect(*(const QTextBlock*)x[1].s_class);
            x[0].s_class = (void*)new QRectF(xret);
        }
    }
    void x_13(Smoke::Stack x) {
        // void ensureBlockLayout(const QTextBlock&) const
        ((const x_QPlainTextDocumentLayout*)this)->QPlainTextDocumentLayout::ensureBlockLayout(*(const QTextBlock*)x[1].s_class);
        (void)x; // noop (for compiler warning)
    }
    void x_14(Smoke::Stack x) {
        // void setCursorWidth(int)
        this->QPlainTextDocumentLayout::setCursorWidth((int)x[1].s_int);
        (void)x; // noop (for compiler warning)
    }
    void x_15(Smoke::Stack x) {
        // int cursorWidth() const
        int xret = ((const x_QPlainTextDocumentLayout*)this)->QPlainTextDocumentLayout::cursorWidth();
        x[0].s_int = xret;
    }
    void x_16(Smoke::Stack x) {
        // void requestUpdate()
        this->QPlainTextDocumentLayout::requestUpdate();
        (void)x; // noop (for compiler warning)
    }
    void x_17(Smoke::Stack x) {
        // void documentChanged(int, int, int)
        if (dynamic_cast<__internal_SmokeClass*>(static_cast<QPlainTextDocumentLayout*>(this))) {
            this->QPlainTextDocumentLayout::documentChanged((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int);
            (void)x; // noop (for compiler warning)
        } else {
            this->documentChanged((int)x[1].s_int,(int)x[2].s_int,(int)x[3].s_int);
            (void)x; // noop (for compiler warning)
        }
    }
    static void x_18(Smoke::Stack x) {
        // static QString tr(const char*)
        QString xret = QPlainTextDocumentLayout::tr((const char*)x[1].s_class,(const char*)0,(int)-1);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_19(Smoke::Stack x) {
        // static QString tr(const char*, const char*)
        QString xret = QPlainTextDocumentLayout::tr((const char*)x[1].s_class,(const char*)x[2].s_class,(int)-1);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_20(Smoke::Stack x) {
        // static QString trUtf8(const char*)
        QString xret = QPlainTextDocumentLayout::trUtf8((const char*)x[1].s_class,(const char*)0,(int)-1);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_21(Smoke::Stack x) {
        // static QString trUtf8(const char*, const char*)
        QString xret = QPlainTextDocumentLayout::trUtf8((const char*)x[1].s_class,(const char*)x[2].s_class,(int)-1);
        x[0].s_class = (void*)new QString(xret);
    }
    static void x_22(Smoke::Stack x) {
        // static const QMetaObject staticMetaObject
        x[0].s_class = (void*)&QPlainTextDocumentLayout::staticMetaObject;
    }
    virtual const QMetaObject* metaObject() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(13529, (void*)this, x)) return (const QMetaObject*)x[0].s_class;
        return this->QPlainTextDocumentLayout::metaObject();
    }
    virtual void* qt_metacast(const char* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(13530, (void*)this, x)) return (void*)x[0].s_class;
        return this->QPlainTextDocumentLayout::qt_metacast(x1);
    }
    virtual int qt_metacall(QMetaObject::Call x1, int x2, void** x3) {
        Smoke::StackItem x[4];
        x[1].s_enum = x1;
        x[2].s_int = x2;
        x[3].s_class = (void*)x3;
        if (this->_binding->callMethod(13533, (void*)this, x)) return (int)x[0].s_int;
        return this->QPlainTextDocumentLayout::qt_metacall(x1, x2, x3);
    }
    virtual void draw(QPainter* x1, const QAbstractTextDocumentLayout::PaintContext& x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)&x2;
        if (this->_binding->callMethod(13535, (void*)this, x)) return;
        this->QPlainTextDocumentLayout::draw(x1, x2);
    }
    virtual int hitTest(const QPointF& x1, Qt::HitTestAccuracy x2) const {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)&x1;
        x[2].s_enum = x2;
        if (this->_binding->callMethod(13536, (void*)this, x)) return (int)x[0].s_int;
        return this->QPlainTextDocumentLayout::hitTest(x1, x2);
    }
    virtual int pageCount() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(13537, (void*)this, x)) return (int)x[0].s_int;
        return this->QPlainTextDocumentLayout::pageCount();
    }
    virtual QSizeF documentSize() const {
        Smoke::StackItem x[1];
        if (this->_binding->callMethod(13538, (void*)this, x)) {
            QSizeF* xptr = (QSizeF*)x[0].s_class;
            QSizeF xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QPlainTextDocumentLayout::documentSize();
    }
    virtual QRectF frameBoundingRect(QTextFrame* x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(13539, (void*)this, x)) {
            QRectF* xptr = (QRectF*)x[0].s_class;
            QRectF xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QPlainTextDocumentLayout::frameBoundingRect(x1);
    }
    virtual QRectF blockBoundingRect(const QTextBlock& x1) const {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)&x1;
        if (this->_binding->callMethod(13540, (void*)this, x)) {
            QRectF* xptr = (QRectF*)x[0].s_class;
            QRectF xret(*xptr);
            delete xptr;
            return xret;
        }
        return this->QPlainTextDocumentLayout::blockBoundingRect(x1);
    }
    virtual void documentChanged(int x1, int x2, int x3) {
        Smoke::StackItem x[4];
        x[1].s_int = x1;
        x[2].s_int = x2;
        x[3].s_int = x3;
        if (this->_binding->callMethod(13545, (void*)this, x)) return;
        this->QPlainTextDocumentLayout::documentChanged(x1, x2, x3);
    }
    virtual void resizeInlineObject(QTextInlineObject x1, int x2, const QTextFormat& x3) {
        Smoke::StackItem x[4];
        x[1].s_class = (void*)new QTextInlineObject(x1);
        x[2].s_int = x2;
        x[3].s_class = (void*)&x3;
        if (this->_binding->callMethod(820, (void*)this, x)) return;
        this->QAbstractTextDocumentLayout::resizeInlineObject(x1, x2, x3);
    }
    virtual void positionInlineObject(QTextInlineObject x1, int x2, const QTextFormat& x3) {
        Smoke::StackItem x[4];
        x[1].s_class = (void*)new QTextInlineObject(x1);
        x[2].s_int = x2;
        x[3].s_class = (void*)&x3;
        if (this->_binding->callMethod(821, (void*)this, x)) return;
        this->QAbstractTextDocumentLayout::positionInlineObject(x1, x2, x3);
    }
    virtual void drawInlineObject(QPainter* x1, const QRectF& x2, QTextInlineObject x3, int x4, const QTextFormat& x5) {
        Smoke::StackItem x[6];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)&x2;
        x[3].s_class = (void*)new QTextInlineObject(x3);
        x[4].s_int = x4;
        x[5].s_class = (void*)&x5;
        if (this->_binding->callMethod(822, (void*)this, x)) return;
        this->QAbstractTextDocumentLayout::drawInlineObject(x1, x2, x3, x4, x5);
    }
    virtual bool event(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(11926, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::event(x1);
    }
    virtual bool eventFilter(QObject* x1, QEvent* x2) {
        Smoke::StackItem x[3];
        x[1].s_class = (void*)x1;
        x[2].s_class = (void*)x2;
        if (this->_binding->callMethod(11927, (void*)this, x)) return (bool)x[0].s_bool;
        return this->QObject::eventFilter(x1, x2);
    }
    virtual void timerEvent(QTimerEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(11966, (void*)this, x)) return;
        this->QObject::timerEvent(x1);
    }
    virtual void childEvent(QChildEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(11967, (void*)this, x)) return;
        this->QObject::childEvent(x1);
    }
    virtual void customEvent(QEvent* x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)x1;
        if (this->_binding->callMethod(11968, (void*)this, x)) return;
        this->QObject::customEvent(x1);
    }
    virtual void connectNotify(const QMetaMethod& x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)&x1;
        if (this->_binding->callMethod(11969, (void*)this, x)) return;
        this->QObject::connectNotify(x1);
    }
    virtual void disconnectNotify(const QMetaMethod& x1) {
        Smoke::StackItem x[2];
        x[1].s_class = (void*)&x1;
        if (this->_binding->callMethod(11970, (void*)this, x)) return;
        this->QObject::disconnectNotify(x1);
    }
    ~x_QPlainTextDocumentLayout() { this->_binding->deleted(312, (void*)this); }
};
void xcall_QPlainTextDocumentLayout(Smoke::Index xi, void *obj, Smoke::Stack args) {
    x_QPlainTextDocumentLayout *xself = (x_QPlainTextDocumentLayout*)obj;
    switch(xi) {
        case 0: xself->x_0(args);	break;
        case 1: xself->x_1(args);	break;
        case 2: xself->x_2(args);	break;
        case 3: x_QPlainTextDocumentLayout::x_3(args);	break;
        case 4: x_QPlainTextDocumentLayout::x_4(args);	break;
        case 5: xself->x_5(args);	break;
        case 6: x_QPlainTextDocumentLayout::x_6(args);	break;
        case 7: xself->x_7(args);	break;
        case 8: xself->x_8(args);	break;
        case 9: xself->x_9(args);	break;
        case 10: xself->x_10(args);	break;
        case 11: xself->x_11(args);	break;
        case 12: xself->x_12(args);	break;
        case 13: xself->x_13(args);	break;
        case 14: xself->x_14(args);	break;
        case 15: xself->x_15(args);	break;
        case 16: xself->x_16(args);	break;
        case 17: xself->x_17(args);	break;
        case 18: x_QPlainTextDocumentLayout::x_18(args);	break;
        case 19: x_QPlainTextDocumentLayout::x_19(args);	break;
        case 20: x_QPlainTextDocumentLayout::x_20(args);	break;
        case 21: x_QPlainTextDocumentLayout::x_21(args);	break;
        case 22: x_QPlainTextDocumentLayout::x_22(args);	break;
        case 23: delete (QPlainTextDocumentLayout*)xself;	break;
    }
}

}
